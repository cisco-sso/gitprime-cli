// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TagsAddTags(params *TagsAddTagsParams, authInfo runtime.ClientAuthInfoWriter) (*TagsAddTagsCreated, error)

	TagsCreate(params *TagsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*TagsCreateCreated, error)

	TagsList(params *TagsListParams, authInfo runtime.ClientAuthInfoWriter) (*TagsListOK, error)

	TagsRead(params *TagsReadParams, authInfo runtime.ClientAuthInfoWriter) (*TagsReadOK, error)

	TagsRemoveTags(params *TagsRemoveTagsParams, authInfo runtime.ClientAuthInfoWriter) (*TagsRemoveTagsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TagsAddTags adds tags to repos

  Add tags to repos
*/
func (a *Client) TagsAddTags(params *TagsAddTagsParams, authInfo runtime.ClientAuthInfoWriter) (*TagsAddTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsAddTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tags_add_tags",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/tags/add_tags/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsAddTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsAddTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tags_add_tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsCreate creates a tag

  Create a tag

This creates an unassigned tag, use add_tags to assign to repos
*/
func (a *Client) TagsCreate(params *TagsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*TagsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tags_create",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/tags/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tags_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsList lists tag entities

  List Tag entities

--- Tag ---

A Tag represents a user-defined tag for a set of repos.

--- General ---

All objects can be traversed to related objects. This can be achieved by using the double-underscore syntax.
For instance, query all Author records with a specific Team name like so:

"?team\_\_name=Bobs%20Team".

You can easily traverse multiple levels of relationships by connecting related objects. For example:

"?foo\_\_bar\_\_baz\_\_name=Bob"

All available relationships are defined in the filter documentation with the note "filter-traversable object."
Additionally, you can limit the properties returned in an object by using the `fields` or `omit`
keywords as follows:

"?fields=foo,bar,bad" will return only these fields

or

"?omit=foo,bar,baz" will return all but the specified fields
*/
func (a *Client) TagsList(params *TagsListParams, authInfo runtime.ClientAuthInfoWriter) (*TagsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tags_list",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/tags/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tags_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsRead gets a specific tag entity by id value

  Get a specific Tag entity by id value
*/
func (a *Client) TagsRead(params *TagsReadParams, authInfo runtime.ClientAuthInfoWriter) (*TagsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tags_read",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/tags/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tags_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TagsRemoveTags removes tags from repos

  Remove tags from repos

Use the field 'remove_unused' = True to delete tags no longer assigned to repos
*/
func (a *Client) TagsRemoveTags(params *TagsRemoveTagsParams, authInfo runtime.ClientAuthInfoWriter) (*TagsRemoveTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagsRemoveTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "tags_remove_tags",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/tags/remove_tags/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TagsRemoveTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TagsRemoveTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tags_remove_tags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
