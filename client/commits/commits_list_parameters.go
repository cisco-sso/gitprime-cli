// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCommitsListParams creates a new CommitsListParams object
// with the default values initialized.
func NewCommitsListParams() *CommitsListParams {
	var ()
	return &CommitsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCommitsListParamsWithTimeout creates a new CommitsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCommitsListParamsWithTimeout(timeout time.Duration) *CommitsListParams {
	var ()
	return &CommitsListParams{

		timeout: timeout,
	}
}

// NewCommitsListParamsWithContext creates a new CommitsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewCommitsListParamsWithContext(ctx context.Context) *CommitsListParams {
	var ()
	return &CommitsListParams{

		Context: ctx,
	}
}

// NewCommitsListParamsWithHTTPClient creates a new CommitsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCommitsListParamsWithHTTPClient(client *http.Client) *CommitsListParams {
	var ()
	return &CommitsListParams{
		HTTPClient: client,
	}
}

/*CommitsListParams contains all the parameters to send to the API endpoint
for the commits list operation typically these are written to a http.Request
*/
type CommitsListParams struct {

	/*ActivatePartitioning
	  Used to activate queryset partitioning

	*/
	ActivatePartitioning *string
	/*ApexUserID
	  Match on apex_user_id

	*/
	ApexUserID *string
	/*ApexUserIDIn
	  Match on apex_user_id in a comma separated list

	*/
	ApexUserIDIn *string
	/*ApplyDefaultFilters
	  Apply default set of filters from most reports

	*/
	ApplyDefaultFilters *string
	/*AuthorDate
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorDate *string
	/*AuthorDateGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorDateGt *string
	/*AuthorDateGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorDateGte *string
	/*AuthorDateLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorDateLt *string
	/*AuthorDateLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorDateLte *string
	/*AuthorLocalDate
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorLocalDate *string
	/*AuthorLocalDateGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorLocalDateGt *string
	/*AuthorLocalDateGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorLocalDateGte *string
	/*AuthorLocalDateLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorLocalDateLt *string
	/*AuthorLocalDateLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	AuthorLocalDateLte *string
	/*AuthorTzoffset*/
	AuthorTzoffset *float64
	/*Churn
	  Filter by churn = value

	*/
	Churn *float64
	/*ChurnGt
	  Filter by churn > value

	*/
	ChurnGt *float64
	/*ChurnGte
	  Filter by churn >= value

	*/
	ChurnGte *float64
	/*ChurnLt
	  Filter by churn < value

	*/
	ChurnLt *float64
	/*ChurnLte
	  Filter by churn <= value

	*/
	ChurnLte *float64
	/*CommitterDate
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterDate *string
	/*CommitterDateGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterDateGt *string
	/*CommitterDateGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterDateGte *string
	/*CommitterDateLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterDateLt *string
	/*CommitterDateLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterDateLte *string
	/*CommitterLocalDate
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterLocalDate *string
	/*CommitterLocalDateGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterLocalDateGt *string
	/*CommitterLocalDateGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterLocalDateGte *string
	/*CommitterLocalDateLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterLocalDateLt *string
	/*CommitterLocalDateLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CommitterLocalDateLte *string
	/*CommitterTzoffset*/
	CommitterTzoffset *float64
	/*Deletions
	  Filter by deletions = value

	*/
	Deletions *float64
	/*DeletionsGt
	  Filter by deletions > value

	*/
	DeletionsGt *float64
	/*DeletionsGte
	  Filter by deletions >= value

	*/
	DeletionsGte *float64
	/*DeletionsLt
	  Filter by deletions < value

	*/
	DeletionsLt *float64
	/*DeletionsLte
	  Filter by deletions <= value

	*/
	DeletionsLte *float64
	/*ExcludeBlocked
	  Remove commits from blocked or incomplete repos

	*/
	ExcludeBlocked *string
	/*ExcludeOutliers
	  Remove commits based on outlier detection configurations.

	*/
	ExcludeOutliers *string
	/*ExcludeWeekends
	  Remove commits created on weekends

	*/
	ExcludeWeekends *string
	/*ExtractedTags
	  Comma-separated list of included tags

	*/
	ExtractedTags *string
	/*ExtractedTagsIcontains
	  Comma-separated list of included tags

	*/
	ExtractedTagsIcontains *string
	/*Files
	  Filter by files = value

	*/
	Files *float64
	/*FilesGt
	  Filter by files > value

	*/
	FilesGt *float64
	/*FilesGte
	  Filter by files >= value

	*/
	FilesGte *float64
	/*FilesLt
	  Filter by files < value

	*/
	FilesLt *float64
	/*FilesLte
	  Filter by files <= value

	*/
	FilesLte *float64
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*Haloc
	  Filter by haloc = value

	*/
	Haloc *float64
	/*HalocGt
	  Filter by haloc > value

	*/
	HalocGt *float64
	/*HalocGte
	  Filter by haloc >= value

	*/
	HalocGte *float64
	/*HalocLt
	  Filter by haloc < value

	*/
	HalocLt *float64
	/*HalocLte
	  Filter by haloc <= value

	*/
	HalocLte *float64
	/*HelpOthers
	  Filter by help_others = value

	*/
	HelpOthers *float64
	/*HelpOthersGt
	  Filter by help_others > value

	*/
	HelpOthersGt *float64
	/*HelpOthersGte
	  Filter by help_others >= value

	*/
	HelpOthersGte *float64
	/*HelpOthersLt
	  Filter by help_others < value

	*/
	HelpOthersLt *float64
	/*HelpOthersLte
	  Filter by help_others <= value

	*/
	HelpOthersLte *float64
	/*Hexsha*/
	Hexsha *string
	/*HexshaIn
	  Multiple values may be separated by commas.

	*/
	HexshaIn *string
	/*Hunks
	  Filter by hunks = value

	*/
	Hunks *float64
	/*HunksGt
	  Filter by hunks > value

	*/
	HunksGt *float64
	/*HunksGte
	  Filter by hunks >= value

	*/
	HunksGte *float64
	/*HunksLt
	  Filter by hunks < value

	*/
	HunksLt *float64
	/*HunksLte
	  Filter by hunks <= value

	*/
	HunksLte *float64
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*IgnoreHash
	  Filter by ignore_hash = value

	*/
	IgnoreHash *string
	/*IgnoreHashIsnull
	  Filter by ignore_hash being null or not

	*/
	IgnoreHashIsnull *string
	/*Impact
	  Filter by impact = value

	*/
	Impact *float64
	/*ImpactGt
	  Filter by impact > value

	*/
	ImpactGt *float64
	/*ImpactGte
	  Filter by impact >= value

	*/
	ImpactGte *float64
	/*ImpactLt
	  Filter by impact < value

	*/
	ImpactLt *float64
	/*ImpactLte
	  Filter by impact <= value

	*/
	ImpactLte *float64
	/*InsDelRatio
	  Filter by ins_del_ratio = value

	*/
	InsDelRatio *float64
	/*InsDelRatioGt
	  Filter by ins_del_ratio > value

	*/
	InsDelRatioGt *float64
	/*InsDelRatioGte
	  Filter by ins_del_ratio >= value

	*/
	InsDelRatioGte *float64
	/*InsDelRatioLt
	  Filter by ins_del_ratio < value

	*/
	InsDelRatioLt *float64
	/*InsDelRatioLte
	  Filter by ins_del_ratio <= value

	*/
	InsDelRatioLte *float64
	/*Insertions
	  Filter by insertions = value

	*/
	Insertions *float64
	/*InsertionsGt
	  Filter by insertions > value

	*/
	InsertionsGt *float64
	/*InsertionsGte
	  Filter by insertions >= value

	*/
	InsertionsGte *float64
	/*InsertionsLt
	  Filter by insertions < value

	*/
	InsertionsLt *float64
	/*InsertionsLte
	  Filter by insertions <= value

	*/
	InsertionsLte *float64
	/*IsGroupCommit
	  Filter on whether a commit has more than one authors or not

	*/
	IsGroupCommit *string
	/*IsMerge
	  Is a merge commit

	*/
	IsMerge *string
	/*IsPrOrphan
	  Is flagged as orphaned

	*/
	IsPrOrphan *string
	/*IsTrivial
	  Is a trivial commit

	*/
	IsTrivial *string
	/*LegacyRefactor
	  Filter by legacy_refactor = value

	*/
	LegacyRefactor *float64
	/*LegacyRefactorGt
	  Filter by legacy_refactor > value

	*/
	LegacyRefactorGt *float64
	/*LegacyRefactorGte
	  Filter by legacy_refactor >= value

	*/
	LegacyRefactorGte *float64
	/*LegacyRefactorLt
	  Filter by legacy_refactor < value

	*/
	LegacyRefactorLt *float64
	/*LegacyRefactorLte
	  Filter by legacy_refactor <= value

	*/
	LegacyRefactorLte *float64
	/*Levenshtein
	  Filter by levenshtein = value

	*/
	Levenshtein *float64
	/*LevenshteinGt
	  Filter by levenshtein > value

	*/
	LevenshteinGt *float64
	/*LevenshteinGte
	  Filter by levenshtein >= value

	*/
	LevenshteinGte *float64
	/*LevenshteinLt
	  Filter by levenshtein < value

	*/
	LevenshteinLt *float64
	/*LevenshteinLte
	  Filter by levenshtein <= value

	*/
	LevenshteinLte *float64
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*LogicalCode
	  Filter by logical_code = value

	*/
	LogicalCode *float64
	/*LogicalCodeGt
	  Filter by logical_code > value

	*/
	LogicalCodeGt *float64
	/*LogicalCodeGte
	  Filter by logical_code >= value

	*/
	LogicalCodeGte *float64
	/*LogicalCodeIsnull
	  Filter by logical_code being null or not

	*/
	LogicalCodeIsnull *string
	/*LogicalCodeLt
	  Filter by logical_code < value

	*/
	LogicalCodeLt *float64
	/*LogicalCodeLte
	  Filter by logical_code <= value

	*/
	LogicalCodeLte *float64
	/*Message
	  Records containing case insensitive string in message

	*/
	Message *string
	/*MessageIcontains
	  Records containing case insensitive string in message

	*/
	MessageIcontains *string
	/*MessageStartswith
	  Message starts with case sensitive value

	*/
	MessageStartswith *string
	/*MultiLineComments
	  Filter by multi_line_comments = value

	*/
	MultiLineComments *float64
	/*MultiLineCommentsGt
	  Filter by multi_line_comments > value

	*/
	MultiLineCommentsGt *float64
	/*MultiLineCommentsGte
	  Filter by multi_line_comments >= value

	*/
	MultiLineCommentsGte *float64
	/*MultiLineCommentsIsnull
	  Filter by multi_line_comments being null or not

	*/
	MultiLineCommentsIsnull *string
	/*MultiLineCommentsLt
	  Filter by multi_line_comments < value

	*/
	MultiLineCommentsLt *float64
	/*MultiLineCommentsLte
	  Filter by multi_line_comments <= value

	*/
	MultiLineCommentsLte *float64
	/*NewWork
	  Filter by new_work = value

	*/
	NewWork *float64
	/*NewWorkGt
	  Filter by new_work > value

	*/
	NewWorkGt *float64
	/*NewWorkGte
	  Filter by new_work >= value

	*/
	NewWorkGte *float64
	/*NewWorkLt
	  Filter by new_work < value

	*/
	NewWorkLt *float64
	/*NewWorkLte
	  Filter by new_work <= value

	*/
	NewWorkLte *float64
	/*NormalizeAuthors
	  Replaces all author_ids with their "apex" author_id

	*/
	NormalizeAuthors *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `aliases`, `repo_id`, `hexsha`, `author_date`, `author_local_date`, `is_merge`, `is_pr_orphan`

	*/
	Ordering *string
	/*OutlierReason
	  Filter by outlier_reason = value

	*/
	OutlierReason *float64
	/*OutlierReasonIn
	  Filter by outlier_reason in a set of values

	*/
	OutlierReasonIn *float64
	/*OutlierReasonIsnull
	  Filter by outlier_reason being null or not

	*/
	OutlierReasonIsnull *string
	/*Partition
	  The partitioned queryset to be returned

	*/
	Partition *float64
	/*PartitionSize
	  Number of commits per given partition

	*/
	PartitionSize *float64
	/*PullRequestFollowOnID
	  Returns PR commits authored after PR submission

	*/
	PullRequestFollowOnID *float64
	/*PullRequestID
	  Match on pull request id

	*/
	PullRequestID *float64
	/*RemoveExcluded
	  Remove commits from excluded authors

	*/
	RemoveExcluded *string
	/*Repo
	  Filter-traversable object

	*/
	Repo *string
	/*RepoID*/
	RepoID *string
	/*RepoIDIn
	  Multiple values may be separated by commas.

	*/
	RepoIDIn *string
	/*RepoTagsIn
	  A comma-separated list of Repo Tag IDs to filter by

	*/
	RepoTagsIn *string
	/*Risk
	  Filter by risk = value

	*/
	Risk *float64
	/*RiskGt
	  Filter by risk > value

	*/
	RiskGt *float64
	/*RiskGte
	  Filter by risk >= value

	*/
	RiskGte *float64
	/*RiskLt
	  Filter by risk < value

	*/
	RiskLt *float64
	/*RiskLte
	  Filter by risk <= value

	*/
	RiskLte *float64
	/*Search
	  A search term.

	*/
	Search *string
	/*SingleLineComments
	  Filter by single_line_comments = value

	*/
	SingleLineComments *float64
	/*SingleLineCommentsGt
	  Filter by single_line_comments > value

	*/
	SingleLineCommentsGt *float64
	/*SingleLineCommentsGte
	  Filter by single_line_comments >= value

	*/
	SingleLineCommentsGte *float64
	/*SingleLineCommentsIsnull
	  Filter by single_line_comments being null or not

	*/
	SingleLineCommentsIsnull *string
	/*SingleLineCommentsLt
	  Filter by single_line_comments < value

	*/
	SingleLineCommentsLt *float64
	/*SingleLineCommentsLte
	  Filter by single_line_comments <= value

	*/
	SingleLineCommentsLte *float64
	/*SmartDedupe
	  Remove commits identified as duplicate

	*/
	SmartDedupe *string
	/*TechnologyLabels
	  Filter-traversable object

	*/
	TechnologyLabels *string
	/*UserAlias
	  Filter by user_alias_id = value

	*/
	UserAlias *float64
	/*UserAliasApexUserEmail
	  Filter by email of apex user

	*/
	UserAliasApexUserEmail *string
	/*UserAliasApexUserName
	  Filter by name of apex user

	*/
	UserAliasApexUserName *string
	/*UserAliasID
	  Match on apex_user_alias_id

	*/
	UserAliasID *string
	/*UserAliasIDIn
	  Match on apex_user_alias_id

	*/
	UserAliasIDIn *string
	/*WhitespaceAndPunctuation
	  Filter by whitespace_and_punctuation = value

	*/
	WhitespaceAndPunctuation *float64
	/*WhitespaceAndPunctuationGt
	  Filter by whitespace_and_punctuation > value

	*/
	WhitespaceAndPunctuationGt *float64
	/*WhitespaceAndPunctuationGte
	  Filter by whitespace_and_punctuation >= value

	*/
	WhitespaceAndPunctuationGte *float64
	/*WhitespaceAndPunctuationIsnull
	  Filter by whitespace_and_punctuation being null or not

	*/
	WhitespaceAndPunctuationIsnull *string
	/*WhitespaceAndPunctuationLt
	  Filter by whitespace_and_punctuation < value

	*/
	WhitespaceAndPunctuationLt *float64
	/*WhitespaceAndPunctuationLte
	  Filter by whitespace_and_punctuation <= value

	*/
	WhitespaceAndPunctuationLte *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the commits list params
func (o *CommitsListParams) WithTimeout(timeout time.Duration) *CommitsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the commits list params
func (o *CommitsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the commits list params
func (o *CommitsListParams) WithContext(ctx context.Context) *CommitsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the commits list params
func (o *CommitsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the commits list params
func (o *CommitsListParams) WithHTTPClient(client *http.Client) *CommitsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the commits list params
func (o *CommitsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActivatePartitioning adds the activatePartitioning to the commits list params
func (o *CommitsListParams) WithActivatePartitioning(activatePartitioning *string) *CommitsListParams {
	o.SetActivatePartitioning(activatePartitioning)
	return o
}

// SetActivatePartitioning adds the activatePartitioning to the commits list params
func (o *CommitsListParams) SetActivatePartitioning(activatePartitioning *string) {
	o.ActivatePartitioning = activatePartitioning
}

// WithApexUserID adds the apexUserID to the commits list params
func (o *CommitsListParams) WithApexUserID(apexUserID *string) *CommitsListParams {
	o.SetApexUserID(apexUserID)
	return o
}

// SetApexUserID adds the apexUserId to the commits list params
func (o *CommitsListParams) SetApexUserID(apexUserID *string) {
	o.ApexUserID = apexUserID
}

// WithApexUserIDIn adds the apexUserIDIn to the commits list params
func (o *CommitsListParams) WithApexUserIDIn(apexUserIDIn *string) *CommitsListParams {
	o.SetApexUserIDIn(apexUserIDIn)
	return o
}

// SetApexUserIDIn adds the apexUserIdIn to the commits list params
func (o *CommitsListParams) SetApexUserIDIn(apexUserIDIn *string) {
	o.ApexUserIDIn = apexUserIDIn
}

// WithApplyDefaultFilters adds the applyDefaultFilters to the commits list params
func (o *CommitsListParams) WithApplyDefaultFilters(applyDefaultFilters *string) *CommitsListParams {
	o.SetApplyDefaultFilters(applyDefaultFilters)
	return o
}

// SetApplyDefaultFilters adds the applyDefaultFilters to the commits list params
func (o *CommitsListParams) SetApplyDefaultFilters(applyDefaultFilters *string) {
	o.ApplyDefaultFilters = applyDefaultFilters
}

// WithAuthorDate adds the authorDate to the commits list params
func (o *CommitsListParams) WithAuthorDate(authorDate *string) *CommitsListParams {
	o.SetAuthorDate(authorDate)
	return o
}

// SetAuthorDate adds the authorDate to the commits list params
func (o *CommitsListParams) SetAuthorDate(authorDate *string) {
	o.AuthorDate = authorDate
}

// WithAuthorDateGt adds the authorDateGt to the commits list params
func (o *CommitsListParams) WithAuthorDateGt(authorDateGt *string) *CommitsListParams {
	o.SetAuthorDateGt(authorDateGt)
	return o
}

// SetAuthorDateGt adds the authorDateGt to the commits list params
func (o *CommitsListParams) SetAuthorDateGt(authorDateGt *string) {
	o.AuthorDateGt = authorDateGt
}

// WithAuthorDateGte adds the authorDateGte to the commits list params
func (o *CommitsListParams) WithAuthorDateGte(authorDateGte *string) *CommitsListParams {
	o.SetAuthorDateGte(authorDateGte)
	return o
}

// SetAuthorDateGte adds the authorDateGte to the commits list params
func (o *CommitsListParams) SetAuthorDateGte(authorDateGte *string) {
	o.AuthorDateGte = authorDateGte
}

// WithAuthorDateLt adds the authorDateLt to the commits list params
func (o *CommitsListParams) WithAuthorDateLt(authorDateLt *string) *CommitsListParams {
	o.SetAuthorDateLt(authorDateLt)
	return o
}

// SetAuthorDateLt adds the authorDateLt to the commits list params
func (o *CommitsListParams) SetAuthorDateLt(authorDateLt *string) {
	o.AuthorDateLt = authorDateLt
}

// WithAuthorDateLte adds the authorDateLte to the commits list params
func (o *CommitsListParams) WithAuthorDateLte(authorDateLte *string) *CommitsListParams {
	o.SetAuthorDateLte(authorDateLte)
	return o
}

// SetAuthorDateLte adds the authorDateLte to the commits list params
func (o *CommitsListParams) SetAuthorDateLte(authorDateLte *string) {
	o.AuthorDateLte = authorDateLte
}

// WithAuthorLocalDate adds the authorLocalDate to the commits list params
func (o *CommitsListParams) WithAuthorLocalDate(authorLocalDate *string) *CommitsListParams {
	o.SetAuthorLocalDate(authorLocalDate)
	return o
}

// SetAuthorLocalDate adds the authorLocalDate to the commits list params
func (o *CommitsListParams) SetAuthorLocalDate(authorLocalDate *string) {
	o.AuthorLocalDate = authorLocalDate
}

// WithAuthorLocalDateGt adds the authorLocalDateGt to the commits list params
func (o *CommitsListParams) WithAuthorLocalDateGt(authorLocalDateGt *string) *CommitsListParams {
	o.SetAuthorLocalDateGt(authorLocalDateGt)
	return o
}

// SetAuthorLocalDateGt adds the authorLocalDateGt to the commits list params
func (o *CommitsListParams) SetAuthorLocalDateGt(authorLocalDateGt *string) {
	o.AuthorLocalDateGt = authorLocalDateGt
}

// WithAuthorLocalDateGte adds the authorLocalDateGte to the commits list params
func (o *CommitsListParams) WithAuthorLocalDateGte(authorLocalDateGte *string) *CommitsListParams {
	o.SetAuthorLocalDateGte(authorLocalDateGte)
	return o
}

// SetAuthorLocalDateGte adds the authorLocalDateGte to the commits list params
func (o *CommitsListParams) SetAuthorLocalDateGte(authorLocalDateGte *string) {
	o.AuthorLocalDateGte = authorLocalDateGte
}

// WithAuthorLocalDateLt adds the authorLocalDateLt to the commits list params
func (o *CommitsListParams) WithAuthorLocalDateLt(authorLocalDateLt *string) *CommitsListParams {
	o.SetAuthorLocalDateLt(authorLocalDateLt)
	return o
}

// SetAuthorLocalDateLt adds the authorLocalDateLt to the commits list params
func (o *CommitsListParams) SetAuthorLocalDateLt(authorLocalDateLt *string) {
	o.AuthorLocalDateLt = authorLocalDateLt
}

// WithAuthorLocalDateLte adds the authorLocalDateLte to the commits list params
func (o *CommitsListParams) WithAuthorLocalDateLte(authorLocalDateLte *string) *CommitsListParams {
	o.SetAuthorLocalDateLte(authorLocalDateLte)
	return o
}

// SetAuthorLocalDateLte adds the authorLocalDateLte to the commits list params
func (o *CommitsListParams) SetAuthorLocalDateLte(authorLocalDateLte *string) {
	o.AuthorLocalDateLte = authorLocalDateLte
}

// WithAuthorTzoffset adds the authorTzoffset to the commits list params
func (o *CommitsListParams) WithAuthorTzoffset(authorTzoffset *float64) *CommitsListParams {
	o.SetAuthorTzoffset(authorTzoffset)
	return o
}

// SetAuthorTzoffset adds the authorTzoffset to the commits list params
func (o *CommitsListParams) SetAuthorTzoffset(authorTzoffset *float64) {
	o.AuthorTzoffset = authorTzoffset
}

// WithChurn adds the churn to the commits list params
func (o *CommitsListParams) WithChurn(churn *float64) *CommitsListParams {
	o.SetChurn(churn)
	return o
}

// SetChurn adds the churn to the commits list params
func (o *CommitsListParams) SetChurn(churn *float64) {
	o.Churn = churn
}

// WithChurnGt adds the churnGt to the commits list params
func (o *CommitsListParams) WithChurnGt(churnGt *float64) *CommitsListParams {
	o.SetChurnGt(churnGt)
	return o
}

// SetChurnGt adds the churnGt to the commits list params
func (o *CommitsListParams) SetChurnGt(churnGt *float64) {
	o.ChurnGt = churnGt
}

// WithChurnGte adds the churnGte to the commits list params
func (o *CommitsListParams) WithChurnGte(churnGte *float64) *CommitsListParams {
	o.SetChurnGte(churnGte)
	return o
}

// SetChurnGte adds the churnGte to the commits list params
func (o *CommitsListParams) SetChurnGte(churnGte *float64) {
	o.ChurnGte = churnGte
}

// WithChurnLt adds the churnLt to the commits list params
func (o *CommitsListParams) WithChurnLt(churnLt *float64) *CommitsListParams {
	o.SetChurnLt(churnLt)
	return o
}

// SetChurnLt adds the churnLt to the commits list params
func (o *CommitsListParams) SetChurnLt(churnLt *float64) {
	o.ChurnLt = churnLt
}

// WithChurnLte adds the churnLte to the commits list params
func (o *CommitsListParams) WithChurnLte(churnLte *float64) *CommitsListParams {
	o.SetChurnLte(churnLte)
	return o
}

// SetChurnLte adds the churnLte to the commits list params
func (o *CommitsListParams) SetChurnLte(churnLte *float64) {
	o.ChurnLte = churnLte
}

// WithCommitterDate adds the committerDate to the commits list params
func (o *CommitsListParams) WithCommitterDate(committerDate *string) *CommitsListParams {
	o.SetCommitterDate(committerDate)
	return o
}

// SetCommitterDate adds the committerDate to the commits list params
func (o *CommitsListParams) SetCommitterDate(committerDate *string) {
	o.CommitterDate = committerDate
}

// WithCommitterDateGt adds the committerDateGt to the commits list params
func (o *CommitsListParams) WithCommitterDateGt(committerDateGt *string) *CommitsListParams {
	o.SetCommitterDateGt(committerDateGt)
	return o
}

// SetCommitterDateGt adds the committerDateGt to the commits list params
func (o *CommitsListParams) SetCommitterDateGt(committerDateGt *string) {
	o.CommitterDateGt = committerDateGt
}

// WithCommitterDateGte adds the committerDateGte to the commits list params
func (o *CommitsListParams) WithCommitterDateGte(committerDateGte *string) *CommitsListParams {
	o.SetCommitterDateGte(committerDateGte)
	return o
}

// SetCommitterDateGte adds the committerDateGte to the commits list params
func (o *CommitsListParams) SetCommitterDateGte(committerDateGte *string) {
	o.CommitterDateGte = committerDateGte
}

// WithCommitterDateLt adds the committerDateLt to the commits list params
func (o *CommitsListParams) WithCommitterDateLt(committerDateLt *string) *CommitsListParams {
	o.SetCommitterDateLt(committerDateLt)
	return o
}

// SetCommitterDateLt adds the committerDateLt to the commits list params
func (o *CommitsListParams) SetCommitterDateLt(committerDateLt *string) {
	o.CommitterDateLt = committerDateLt
}

// WithCommitterDateLte adds the committerDateLte to the commits list params
func (o *CommitsListParams) WithCommitterDateLte(committerDateLte *string) *CommitsListParams {
	o.SetCommitterDateLte(committerDateLte)
	return o
}

// SetCommitterDateLte adds the committerDateLte to the commits list params
func (o *CommitsListParams) SetCommitterDateLte(committerDateLte *string) {
	o.CommitterDateLte = committerDateLte
}

// WithCommitterLocalDate adds the committerLocalDate to the commits list params
func (o *CommitsListParams) WithCommitterLocalDate(committerLocalDate *string) *CommitsListParams {
	o.SetCommitterLocalDate(committerLocalDate)
	return o
}

// SetCommitterLocalDate adds the committerLocalDate to the commits list params
func (o *CommitsListParams) SetCommitterLocalDate(committerLocalDate *string) {
	o.CommitterLocalDate = committerLocalDate
}

// WithCommitterLocalDateGt adds the committerLocalDateGt to the commits list params
func (o *CommitsListParams) WithCommitterLocalDateGt(committerLocalDateGt *string) *CommitsListParams {
	o.SetCommitterLocalDateGt(committerLocalDateGt)
	return o
}

// SetCommitterLocalDateGt adds the committerLocalDateGt to the commits list params
func (o *CommitsListParams) SetCommitterLocalDateGt(committerLocalDateGt *string) {
	o.CommitterLocalDateGt = committerLocalDateGt
}

// WithCommitterLocalDateGte adds the committerLocalDateGte to the commits list params
func (o *CommitsListParams) WithCommitterLocalDateGte(committerLocalDateGte *string) *CommitsListParams {
	o.SetCommitterLocalDateGte(committerLocalDateGte)
	return o
}

// SetCommitterLocalDateGte adds the committerLocalDateGte to the commits list params
func (o *CommitsListParams) SetCommitterLocalDateGte(committerLocalDateGte *string) {
	o.CommitterLocalDateGte = committerLocalDateGte
}

// WithCommitterLocalDateLt adds the committerLocalDateLt to the commits list params
func (o *CommitsListParams) WithCommitterLocalDateLt(committerLocalDateLt *string) *CommitsListParams {
	o.SetCommitterLocalDateLt(committerLocalDateLt)
	return o
}

// SetCommitterLocalDateLt adds the committerLocalDateLt to the commits list params
func (o *CommitsListParams) SetCommitterLocalDateLt(committerLocalDateLt *string) {
	o.CommitterLocalDateLt = committerLocalDateLt
}

// WithCommitterLocalDateLte adds the committerLocalDateLte to the commits list params
func (o *CommitsListParams) WithCommitterLocalDateLte(committerLocalDateLte *string) *CommitsListParams {
	o.SetCommitterLocalDateLte(committerLocalDateLte)
	return o
}

// SetCommitterLocalDateLte adds the committerLocalDateLte to the commits list params
func (o *CommitsListParams) SetCommitterLocalDateLte(committerLocalDateLte *string) {
	o.CommitterLocalDateLte = committerLocalDateLte
}

// WithCommitterTzoffset adds the committerTzoffset to the commits list params
func (o *CommitsListParams) WithCommitterTzoffset(committerTzoffset *float64) *CommitsListParams {
	o.SetCommitterTzoffset(committerTzoffset)
	return o
}

// SetCommitterTzoffset adds the committerTzoffset to the commits list params
func (o *CommitsListParams) SetCommitterTzoffset(committerTzoffset *float64) {
	o.CommitterTzoffset = committerTzoffset
}

// WithDeletions adds the deletions to the commits list params
func (o *CommitsListParams) WithDeletions(deletions *float64) *CommitsListParams {
	o.SetDeletions(deletions)
	return o
}

// SetDeletions adds the deletions to the commits list params
func (o *CommitsListParams) SetDeletions(deletions *float64) {
	o.Deletions = deletions
}

// WithDeletionsGt adds the deletionsGt to the commits list params
func (o *CommitsListParams) WithDeletionsGt(deletionsGt *float64) *CommitsListParams {
	o.SetDeletionsGt(deletionsGt)
	return o
}

// SetDeletionsGt adds the deletionsGt to the commits list params
func (o *CommitsListParams) SetDeletionsGt(deletionsGt *float64) {
	o.DeletionsGt = deletionsGt
}

// WithDeletionsGte adds the deletionsGte to the commits list params
func (o *CommitsListParams) WithDeletionsGte(deletionsGte *float64) *CommitsListParams {
	o.SetDeletionsGte(deletionsGte)
	return o
}

// SetDeletionsGte adds the deletionsGte to the commits list params
func (o *CommitsListParams) SetDeletionsGte(deletionsGte *float64) {
	o.DeletionsGte = deletionsGte
}

// WithDeletionsLt adds the deletionsLt to the commits list params
func (o *CommitsListParams) WithDeletionsLt(deletionsLt *float64) *CommitsListParams {
	o.SetDeletionsLt(deletionsLt)
	return o
}

// SetDeletionsLt adds the deletionsLt to the commits list params
func (o *CommitsListParams) SetDeletionsLt(deletionsLt *float64) {
	o.DeletionsLt = deletionsLt
}

// WithDeletionsLte adds the deletionsLte to the commits list params
func (o *CommitsListParams) WithDeletionsLte(deletionsLte *float64) *CommitsListParams {
	o.SetDeletionsLte(deletionsLte)
	return o
}

// SetDeletionsLte adds the deletionsLte to the commits list params
func (o *CommitsListParams) SetDeletionsLte(deletionsLte *float64) {
	o.DeletionsLte = deletionsLte
}

// WithExcludeBlocked adds the excludeBlocked to the commits list params
func (o *CommitsListParams) WithExcludeBlocked(excludeBlocked *string) *CommitsListParams {
	o.SetExcludeBlocked(excludeBlocked)
	return o
}

// SetExcludeBlocked adds the excludeBlocked to the commits list params
func (o *CommitsListParams) SetExcludeBlocked(excludeBlocked *string) {
	o.ExcludeBlocked = excludeBlocked
}

// WithExcludeOutliers adds the excludeOutliers to the commits list params
func (o *CommitsListParams) WithExcludeOutliers(excludeOutliers *string) *CommitsListParams {
	o.SetExcludeOutliers(excludeOutliers)
	return o
}

// SetExcludeOutliers adds the excludeOutliers to the commits list params
func (o *CommitsListParams) SetExcludeOutliers(excludeOutliers *string) {
	o.ExcludeOutliers = excludeOutliers
}

// WithExcludeWeekends adds the excludeWeekends to the commits list params
func (o *CommitsListParams) WithExcludeWeekends(excludeWeekends *string) *CommitsListParams {
	o.SetExcludeWeekends(excludeWeekends)
	return o
}

// SetExcludeWeekends adds the excludeWeekends to the commits list params
func (o *CommitsListParams) SetExcludeWeekends(excludeWeekends *string) {
	o.ExcludeWeekends = excludeWeekends
}

// WithExtractedTags adds the extractedTags to the commits list params
func (o *CommitsListParams) WithExtractedTags(extractedTags *string) *CommitsListParams {
	o.SetExtractedTags(extractedTags)
	return o
}

// SetExtractedTags adds the extractedTags to the commits list params
func (o *CommitsListParams) SetExtractedTags(extractedTags *string) {
	o.ExtractedTags = extractedTags
}

// WithExtractedTagsIcontains adds the extractedTagsIcontains to the commits list params
func (o *CommitsListParams) WithExtractedTagsIcontains(extractedTagsIcontains *string) *CommitsListParams {
	o.SetExtractedTagsIcontains(extractedTagsIcontains)
	return o
}

// SetExtractedTagsIcontains adds the extractedTagsIcontains to the commits list params
func (o *CommitsListParams) SetExtractedTagsIcontains(extractedTagsIcontains *string) {
	o.ExtractedTagsIcontains = extractedTagsIcontains
}

// WithFiles adds the files to the commits list params
func (o *CommitsListParams) WithFiles(files *float64) *CommitsListParams {
	o.SetFiles(files)
	return o
}

// SetFiles adds the files to the commits list params
func (o *CommitsListParams) SetFiles(files *float64) {
	o.Files = files
}

// WithFilesGt adds the filesGt to the commits list params
func (o *CommitsListParams) WithFilesGt(filesGt *float64) *CommitsListParams {
	o.SetFilesGt(filesGt)
	return o
}

// SetFilesGt adds the filesGt to the commits list params
func (o *CommitsListParams) SetFilesGt(filesGt *float64) {
	o.FilesGt = filesGt
}

// WithFilesGte adds the filesGte to the commits list params
func (o *CommitsListParams) WithFilesGte(filesGte *float64) *CommitsListParams {
	o.SetFilesGte(filesGte)
	return o
}

// SetFilesGte adds the filesGte to the commits list params
func (o *CommitsListParams) SetFilesGte(filesGte *float64) {
	o.FilesGte = filesGte
}

// WithFilesLt adds the filesLt to the commits list params
func (o *CommitsListParams) WithFilesLt(filesLt *float64) *CommitsListParams {
	o.SetFilesLt(filesLt)
	return o
}

// SetFilesLt adds the filesLt to the commits list params
func (o *CommitsListParams) SetFilesLt(filesLt *float64) {
	o.FilesLt = filesLt
}

// WithFilesLte adds the filesLte to the commits list params
func (o *CommitsListParams) WithFilesLte(filesLte *float64) *CommitsListParams {
	o.SetFilesLte(filesLte)
	return o
}

// SetFilesLte adds the filesLte to the commits list params
func (o *CommitsListParams) SetFilesLte(filesLte *float64) {
	o.FilesLte = filesLte
}

// WithFilters adds the filters to the commits list params
func (o *CommitsListParams) WithFilters(filters *string) *CommitsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the commits list params
func (o *CommitsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithHaloc adds the haloc to the commits list params
func (o *CommitsListParams) WithHaloc(haloc *float64) *CommitsListParams {
	o.SetHaloc(haloc)
	return o
}

// SetHaloc adds the haloc to the commits list params
func (o *CommitsListParams) SetHaloc(haloc *float64) {
	o.Haloc = haloc
}

// WithHalocGt adds the halocGt to the commits list params
func (o *CommitsListParams) WithHalocGt(halocGt *float64) *CommitsListParams {
	o.SetHalocGt(halocGt)
	return o
}

// SetHalocGt adds the halocGt to the commits list params
func (o *CommitsListParams) SetHalocGt(halocGt *float64) {
	o.HalocGt = halocGt
}

// WithHalocGte adds the halocGte to the commits list params
func (o *CommitsListParams) WithHalocGte(halocGte *float64) *CommitsListParams {
	o.SetHalocGte(halocGte)
	return o
}

// SetHalocGte adds the halocGte to the commits list params
func (o *CommitsListParams) SetHalocGte(halocGte *float64) {
	o.HalocGte = halocGte
}

// WithHalocLt adds the halocLt to the commits list params
func (o *CommitsListParams) WithHalocLt(halocLt *float64) *CommitsListParams {
	o.SetHalocLt(halocLt)
	return o
}

// SetHalocLt adds the halocLt to the commits list params
func (o *CommitsListParams) SetHalocLt(halocLt *float64) {
	o.HalocLt = halocLt
}

// WithHalocLte adds the halocLte to the commits list params
func (o *CommitsListParams) WithHalocLte(halocLte *float64) *CommitsListParams {
	o.SetHalocLte(halocLte)
	return o
}

// SetHalocLte adds the halocLte to the commits list params
func (o *CommitsListParams) SetHalocLte(halocLte *float64) {
	o.HalocLte = halocLte
}

// WithHelpOthers adds the helpOthers to the commits list params
func (o *CommitsListParams) WithHelpOthers(helpOthers *float64) *CommitsListParams {
	o.SetHelpOthers(helpOthers)
	return o
}

// SetHelpOthers adds the helpOthers to the commits list params
func (o *CommitsListParams) SetHelpOthers(helpOthers *float64) {
	o.HelpOthers = helpOthers
}

// WithHelpOthersGt adds the helpOthersGt to the commits list params
func (o *CommitsListParams) WithHelpOthersGt(helpOthersGt *float64) *CommitsListParams {
	o.SetHelpOthersGt(helpOthersGt)
	return o
}

// SetHelpOthersGt adds the helpOthersGt to the commits list params
func (o *CommitsListParams) SetHelpOthersGt(helpOthersGt *float64) {
	o.HelpOthersGt = helpOthersGt
}

// WithHelpOthersGte adds the helpOthersGte to the commits list params
func (o *CommitsListParams) WithHelpOthersGte(helpOthersGte *float64) *CommitsListParams {
	o.SetHelpOthersGte(helpOthersGte)
	return o
}

// SetHelpOthersGte adds the helpOthersGte to the commits list params
func (o *CommitsListParams) SetHelpOthersGte(helpOthersGte *float64) {
	o.HelpOthersGte = helpOthersGte
}

// WithHelpOthersLt adds the helpOthersLt to the commits list params
func (o *CommitsListParams) WithHelpOthersLt(helpOthersLt *float64) *CommitsListParams {
	o.SetHelpOthersLt(helpOthersLt)
	return o
}

// SetHelpOthersLt adds the helpOthersLt to the commits list params
func (o *CommitsListParams) SetHelpOthersLt(helpOthersLt *float64) {
	o.HelpOthersLt = helpOthersLt
}

// WithHelpOthersLte adds the helpOthersLte to the commits list params
func (o *CommitsListParams) WithHelpOthersLte(helpOthersLte *float64) *CommitsListParams {
	o.SetHelpOthersLte(helpOthersLte)
	return o
}

// SetHelpOthersLte adds the helpOthersLte to the commits list params
func (o *CommitsListParams) SetHelpOthersLte(helpOthersLte *float64) {
	o.HelpOthersLte = helpOthersLte
}

// WithHexsha adds the hexsha to the commits list params
func (o *CommitsListParams) WithHexsha(hexsha *string) *CommitsListParams {
	o.SetHexsha(hexsha)
	return o
}

// SetHexsha adds the hexsha to the commits list params
func (o *CommitsListParams) SetHexsha(hexsha *string) {
	o.Hexsha = hexsha
}

// WithHexshaIn adds the hexshaIn to the commits list params
func (o *CommitsListParams) WithHexshaIn(hexshaIn *string) *CommitsListParams {
	o.SetHexshaIn(hexshaIn)
	return o
}

// SetHexshaIn adds the hexshaIn to the commits list params
func (o *CommitsListParams) SetHexshaIn(hexshaIn *string) {
	o.HexshaIn = hexshaIn
}

// WithHunks adds the hunks to the commits list params
func (o *CommitsListParams) WithHunks(hunks *float64) *CommitsListParams {
	o.SetHunks(hunks)
	return o
}

// SetHunks adds the hunks to the commits list params
func (o *CommitsListParams) SetHunks(hunks *float64) {
	o.Hunks = hunks
}

// WithHunksGt adds the hunksGt to the commits list params
func (o *CommitsListParams) WithHunksGt(hunksGt *float64) *CommitsListParams {
	o.SetHunksGt(hunksGt)
	return o
}

// SetHunksGt adds the hunksGt to the commits list params
func (o *CommitsListParams) SetHunksGt(hunksGt *float64) {
	o.HunksGt = hunksGt
}

// WithHunksGte adds the hunksGte to the commits list params
func (o *CommitsListParams) WithHunksGte(hunksGte *float64) *CommitsListParams {
	o.SetHunksGte(hunksGte)
	return o
}

// SetHunksGte adds the hunksGte to the commits list params
func (o *CommitsListParams) SetHunksGte(hunksGte *float64) {
	o.HunksGte = hunksGte
}

// WithHunksLt adds the hunksLt to the commits list params
func (o *CommitsListParams) WithHunksLt(hunksLt *float64) *CommitsListParams {
	o.SetHunksLt(hunksLt)
	return o
}

// SetHunksLt adds the hunksLt to the commits list params
func (o *CommitsListParams) SetHunksLt(hunksLt *float64) {
	o.HunksLt = hunksLt
}

// WithHunksLte adds the hunksLte to the commits list params
func (o *CommitsListParams) WithHunksLte(hunksLte *float64) *CommitsListParams {
	o.SetHunksLte(hunksLte)
	return o
}

// SetHunksLte adds the hunksLte to the commits list params
func (o *CommitsListParams) SetHunksLte(hunksLte *float64) {
	o.HunksLte = hunksLte
}

// WithID adds the id to the commits list params
func (o *CommitsListParams) WithID(id *float64) *CommitsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the commits list params
func (o *CommitsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the commits list params
func (o *CommitsListParams) WithIDIn(iDIn *float64) *CommitsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the commits list params
func (o *CommitsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithIgnoreHash adds the ignoreHash to the commits list params
func (o *CommitsListParams) WithIgnoreHash(ignoreHash *string) *CommitsListParams {
	o.SetIgnoreHash(ignoreHash)
	return o
}

// SetIgnoreHash adds the ignoreHash to the commits list params
func (o *CommitsListParams) SetIgnoreHash(ignoreHash *string) {
	o.IgnoreHash = ignoreHash
}

// WithIgnoreHashIsnull adds the ignoreHashIsnull to the commits list params
func (o *CommitsListParams) WithIgnoreHashIsnull(ignoreHashIsnull *string) *CommitsListParams {
	o.SetIgnoreHashIsnull(ignoreHashIsnull)
	return o
}

// SetIgnoreHashIsnull adds the ignoreHashIsnull to the commits list params
func (o *CommitsListParams) SetIgnoreHashIsnull(ignoreHashIsnull *string) {
	o.IgnoreHashIsnull = ignoreHashIsnull
}

// WithImpact adds the impact to the commits list params
func (o *CommitsListParams) WithImpact(impact *float64) *CommitsListParams {
	o.SetImpact(impact)
	return o
}

// SetImpact adds the impact to the commits list params
func (o *CommitsListParams) SetImpact(impact *float64) {
	o.Impact = impact
}

// WithImpactGt adds the impactGt to the commits list params
func (o *CommitsListParams) WithImpactGt(impactGt *float64) *CommitsListParams {
	o.SetImpactGt(impactGt)
	return o
}

// SetImpactGt adds the impactGt to the commits list params
func (o *CommitsListParams) SetImpactGt(impactGt *float64) {
	o.ImpactGt = impactGt
}

// WithImpactGte adds the impactGte to the commits list params
func (o *CommitsListParams) WithImpactGte(impactGte *float64) *CommitsListParams {
	o.SetImpactGte(impactGte)
	return o
}

// SetImpactGte adds the impactGte to the commits list params
func (o *CommitsListParams) SetImpactGte(impactGte *float64) {
	o.ImpactGte = impactGte
}

// WithImpactLt adds the impactLt to the commits list params
func (o *CommitsListParams) WithImpactLt(impactLt *float64) *CommitsListParams {
	o.SetImpactLt(impactLt)
	return o
}

// SetImpactLt adds the impactLt to the commits list params
func (o *CommitsListParams) SetImpactLt(impactLt *float64) {
	o.ImpactLt = impactLt
}

// WithImpactLte adds the impactLte to the commits list params
func (o *CommitsListParams) WithImpactLte(impactLte *float64) *CommitsListParams {
	o.SetImpactLte(impactLte)
	return o
}

// SetImpactLte adds the impactLte to the commits list params
func (o *CommitsListParams) SetImpactLte(impactLte *float64) {
	o.ImpactLte = impactLte
}

// WithInsDelRatio adds the insDelRatio to the commits list params
func (o *CommitsListParams) WithInsDelRatio(insDelRatio *float64) *CommitsListParams {
	o.SetInsDelRatio(insDelRatio)
	return o
}

// SetInsDelRatio adds the insDelRatio to the commits list params
func (o *CommitsListParams) SetInsDelRatio(insDelRatio *float64) {
	o.InsDelRatio = insDelRatio
}

// WithInsDelRatioGt adds the insDelRatioGt to the commits list params
func (o *CommitsListParams) WithInsDelRatioGt(insDelRatioGt *float64) *CommitsListParams {
	o.SetInsDelRatioGt(insDelRatioGt)
	return o
}

// SetInsDelRatioGt adds the insDelRatioGt to the commits list params
func (o *CommitsListParams) SetInsDelRatioGt(insDelRatioGt *float64) {
	o.InsDelRatioGt = insDelRatioGt
}

// WithInsDelRatioGte adds the insDelRatioGte to the commits list params
func (o *CommitsListParams) WithInsDelRatioGte(insDelRatioGte *float64) *CommitsListParams {
	o.SetInsDelRatioGte(insDelRatioGte)
	return o
}

// SetInsDelRatioGte adds the insDelRatioGte to the commits list params
func (o *CommitsListParams) SetInsDelRatioGte(insDelRatioGte *float64) {
	o.InsDelRatioGte = insDelRatioGte
}

// WithInsDelRatioLt adds the insDelRatioLt to the commits list params
func (o *CommitsListParams) WithInsDelRatioLt(insDelRatioLt *float64) *CommitsListParams {
	o.SetInsDelRatioLt(insDelRatioLt)
	return o
}

// SetInsDelRatioLt adds the insDelRatioLt to the commits list params
func (o *CommitsListParams) SetInsDelRatioLt(insDelRatioLt *float64) {
	o.InsDelRatioLt = insDelRatioLt
}

// WithInsDelRatioLte adds the insDelRatioLte to the commits list params
func (o *CommitsListParams) WithInsDelRatioLte(insDelRatioLte *float64) *CommitsListParams {
	o.SetInsDelRatioLte(insDelRatioLte)
	return o
}

// SetInsDelRatioLte adds the insDelRatioLte to the commits list params
func (o *CommitsListParams) SetInsDelRatioLte(insDelRatioLte *float64) {
	o.InsDelRatioLte = insDelRatioLte
}

// WithInsertions adds the insertions to the commits list params
func (o *CommitsListParams) WithInsertions(insertions *float64) *CommitsListParams {
	o.SetInsertions(insertions)
	return o
}

// SetInsertions adds the insertions to the commits list params
func (o *CommitsListParams) SetInsertions(insertions *float64) {
	o.Insertions = insertions
}

// WithInsertionsGt adds the insertionsGt to the commits list params
func (o *CommitsListParams) WithInsertionsGt(insertionsGt *float64) *CommitsListParams {
	o.SetInsertionsGt(insertionsGt)
	return o
}

// SetInsertionsGt adds the insertionsGt to the commits list params
func (o *CommitsListParams) SetInsertionsGt(insertionsGt *float64) {
	o.InsertionsGt = insertionsGt
}

// WithInsertionsGte adds the insertionsGte to the commits list params
func (o *CommitsListParams) WithInsertionsGte(insertionsGte *float64) *CommitsListParams {
	o.SetInsertionsGte(insertionsGte)
	return o
}

// SetInsertionsGte adds the insertionsGte to the commits list params
func (o *CommitsListParams) SetInsertionsGte(insertionsGte *float64) {
	o.InsertionsGte = insertionsGte
}

// WithInsertionsLt adds the insertionsLt to the commits list params
func (o *CommitsListParams) WithInsertionsLt(insertionsLt *float64) *CommitsListParams {
	o.SetInsertionsLt(insertionsLt)
	return o
}

// SetInsertionsLt adds the insertionsLt to the commits list params
func (o *CommitsListParams) SetInsertionsLt(insertionsLt *float64) {
	o.InsertionsLt = insertionsLt
}

// WithInsertionsLte adds the insertionsLte to the commits list params
func (o *CommitsListParams) WithInsertionsLte(insertionsLte *float64) *CommitsListParams {
	o.SetInsertionsLte(insertionsLte)
	return o
}

// SetInsertionsLte adds the insertionsLte to the commits list params
func (o *CommitsListParams) SetInsertionsLte(insertionsLte *float64) {
	o.InsertionsLte = insertionsLte
}

// WithIsGroupCommit adds the isGroupCommit to the commits list params
func (o *CommitsListParams) WithIsGroupCommit(isGroupCommit *string) *CommitsListParams {
	o.SetIsGroupCommit(isGroupCommit)
	return o
}

// SetIsGroupCommit adds the isGroupCommit to the commits list params
func (o *CommitsListParams) SetIsGroupCommit(isGroupCommit *string) {
	o.IsGroupCommit = isGroupCommit
}

// WithIsMerge adds the isMerge to the commits list params
func (o *CommitsListParams) WithIsMerge(isMerge *string) *CommitsListParams {
	o.SetIsMerge(isMerge)
	return o
}

// SetIsMerge adds the isMerge to the commits list params
func (o *CommitsListParams) SetIsMerge(isMerge *string) {
	o.IsMerge = isMerge
}

// WithIsPrOrphan adds the isPrOrphan to the commits list params
func (o *CommitsListParams) WithIsPrOrphan(isPrOrphan *string) *CommitsListParams {
	o.SetIsPrOrphan(isPrOrphan)
	return o
}

// SetIsPrOrphan adds the isPrOrphan to the commits list params
func (o *CommitsListParams) SetIsPrOrphan(isPrOrphan *string) {
	o.IsPrOrphan = isPrOrphan
}

// WithIsTrivial adds the isTrivial to the commits list params
func (o *CommitsListParams) WithIsTrivial(isTrivial *string) *CommitsListParams {
	o.SetIsTrivial(isTrivial)
	return o
}

// SetIsTrivial adds the isTrivial to the commits list params
func (o *CommitsListParams) SetIsTrivial(isTrivial *string) {
	o.IsTrivial = isTrivial
}

// WithLegacyRefactor adds the legacyRefactor to the commits list params
func (o *CommitsListParams) WithLegacyRefactor(legacyRefactor *float64) *CommitsListParams {
	o.SetLegacyRefactor(legacyRefactor)
	return o
}

// SetLegacyRefactor adds the legacyRefactor to the commits list params
func (o *CommitsListParams) SetLegacyRefactor(legacyRefactor *float64) {
	o.LegacyRefactor = legacyRefactor
}

// WithLegacyRefactorGt adds the legacyRefactorGt to the commits list params
func (o *CommitsListParams) WithLegacyRefactorGt(legacyRefactorGt *float64) *CommitsListParams {
	o.SetLegacyRefactorGt(legacyRefactorGt)
	return o
}

// SetLegacyRefactorGt adds the legacyRefactorGt to the commits list params
func (o *CommitsListParams) SetLegacyRefactorGt(legacyRefactorGt *float64) {
	o.LegacyRefactorGt = legacyRefactorGt
}

// WithLegacyRefactorGte adds the legacyRefactorGte to the commits list params
func (o *CommitsListParams) WithLegacyRefactorGte(legacyRefactorGte *float64) *CommitsListParams {
	o.SetLegacyRefactorGte(legacyRefactorGte)
	return o
}

// SetLegacyRefactorGte adds the legacyRefactorGte to the commits list params
func (o *CommitsListParams) SetLegacyRefactorGte(legacyRefactorGte *float64) {
	o.LegacyRefactorGte = legacyRefactorGte
}

// WithLegacyRefactorLt adds the legacyRefactorLt to the commits list params
func (o *CommitsListParams) WithLegacyRefactorLt(legacyRefactorLt *float64) *CommitsListParams {
	o.SetLegacyRefactorLt(legacyRefactorLt)
	return o
}

// SetLegacyRefactorLt adds the legacyRefactorLt to the commits list params
func (o *CommitsListParams) SetLegacyRefactorLt(legacyRefactorLt *float64) {
	o.LegacyRefactorLt = legacyRefactorLt
}

// WithLegacyRefactorLte adds the legacyRefactorLte to the commits list params
func (o *CommitsListParams) WithLegacyRefactorLte(legacyRefactorLte *float64) *CommitsListParams {
	o.SetLegacyRefactorLte(legacyRefactorLte)
	return o
}

// SetLegacyRefactorLte adds the legacyRefactorLte to the commits list params
func (o *CommitsListParams) SetLegacyRefactorLte(legacyRefactorLte *float64) {
	o.LegacyRefactorLte = legacyRefactorLte
}

// WithLevenshtein adds the levenshtein to the commits list params
func (o *CommitsListParams) WithLevenshtein(levenshtein *float64) *CommitsListParams {
	o.SetLevenshtein(levenshtein)
	return o
}

// SetLevenshtein adds the levenshtein to the commits list params
func (o *CommitsListParams) SetLevenshtein(levenshtein *float64) {
	o.Levenshtein = levenshtein
}

// WithLevenshteinGt adds the levenshteinGt to the commits list params
func (o *CommitsListParams) WithLevenshteinGt(levenshteinGt *float64) *CommitsListParams {
	o.SetLevenshteinGt(levenshteinGt)
	return o
}

// SetLevenshteinGt adds the levenshteinGt to the commits list params
func (o *CommitsListParams) SetLevenshteinGt(levenshteinGt *float64) {
	o.LevenshteinGt = levenshteinGt
}

// WithLevenshteinGte adds the levenshteinGte to the commits list params
func (o *CommitsListParams) WithLevenshteinGte(levenshteinGte *float64) *CommitsListParams {
	o.SetLevenshteinGte(levenshteinGte)
	return o
}

// SetLevenshteinGte adds the levenshteinGte to the commits list params
func (o *CommitsListParams) SetLevenshteinGte(levenshteinGte *float64) {
	o.LevenshteinGte = levenshteinGte
}

// WithLevenshteinLt adds the levenshteinLt to the commits list params
func (o *CommitsListParams) WithLevenshteinLt(levenshteinLt *float64) *CommitsListParams {
	o.SetLevenshteinLt(levenshteinLt)
	return o
}

// SetLevenshteinLt adds the levenshteinLt to the commits list params
func (o *CommitsListParams) SetLevenshteinLt(levenshteinLt *float64) {
	o.LevenshteinLt = levenshteinLt
}

// WithLevenshteinLte adds the levenshteinLte to the commits list params
func (o *CommitsListParams) WithLevenshteinLte(levenshteinLte *float64) *CommitsListParams {
	o.SetLevenshteinLte(levenshteinLte)
	return o
}

// SetLevenshteinLte adds the levenshteinLte to the commits list params
func (o *CommitsListParams) SetLevenshteinLte(levenshteinLte *float64) {
	o.LevenshteinLte = levenshteinLte
}

// WithLimit adds the limit to the commits list params
func (o *CommitsListParams) WithLimit(limit *int64) *CommitsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the commits list params
func (o *CommitsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLogicalCode adds the logicalCode to the commits list params
func (o *CommitsListParams) WithLogicalCode(logicalCode *float64) *CommitsListParams {
	o.SetLogicalCode(logicalCode)
	return o
}

// SetLogicalCode adds the logicalCode to the commits list params
func (o *CommitsListParams) SetLogicalCode(logicalCode *float64) {
	o.LogicalCode = logicalCode
}

// WithLogicalCodeGt adds the logicalCodeGt to the commits list params
func (o *CommitsListParams) WithLogicalCodeGt(logicalCodeGt *float64) *CommitsListParams {
	o.SetLogicalCodeGt(logicalCodeGt)
	return o
}

// SetLogicalCodeGt adds the logicalCodeGt to the commits list params
func (o *CommitsListParams) SetLogicalCodeGt(logicalCodeGt *float64) {
	o.LogicalCodeGt = logicalCodeGt
}

// WithLogicalCodeGte adds the logicalCodeGte to the commits list params
func (o *CommitsListParams) WithLogicalCodeGte(logicalCodeGte *float64) *CommitsListParams {
	o.SetLogicalCodeGte(logicalCodeGte)
	return o
}

// SetLogicalCodeGte adds the logicalCodeGte to the commits list params
func (o *CommitsListParams) SetLogicalCodeGte(logicalCodeGte *float64) {
	o.LogicalCodeGte = logicalCodeGte
}

// WithLogicalCodeIsnull adds the logicalCodeIsnull to the commits list params
func (o *CommitsListParams) WithLogicalCodeIsnull(logicalCodeIsnull *string) *CommitsListParams {
	o.SetLogicalCodeIsnull(logicalCodeIsnull)
	return o
}

// SetLogicalCodeIsnull adds the logicalCodeIsnull to the commits list params
func (o *CommitsListParams) SetLogicalCodeIsnull(logicalCodeIsnull *string) {
	o.LogicalCodeIsnull = logicalCodeIsnull
}

// WithLogicalCodeLt adds the logicalCodeLt to the commits list params
func (o *CommitsListParams) WithLogicalCodeLt(logicalCodeLt *float64) *CommitsListParams {
	o.SetLogicalCodeLt(logicalCodeLt)
	return o
}

// SetLogicalCodeLt adds the logicalCodeLt to the commits list params
func (o *CommitsListParams) SetLogicalCodeLt(logicalCodeLt *float64) {
	o.LogicalCodeLt = logicalCodeLt
}

// WithLogicalCodeLte adds the logicalCodeLte to the commits list params
func (o *CommitsListParams) WithLogicalCodeLte(logicalCodeLte *float64) *CommitsListParams {
	o.SetLogicalCodeLte(logicalCodeLte)
	return o
}

// SetLogicalCodeLte adds the logicalCodeLte to the commits list params
func (o *CommitsListParams) SetLogicalCodeLte(logicalCodeLte *float64) {
	o.LogicalCodeLte = logicalCodeLte
}

// WithMessage adds the message to the commits list params
func (o *CommitsListParams) WithMessage(message *string) *CommitsListParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the commits list params
func (o *CommitsListParams) SetMessage(message *string) {
	o.Message = message
}

// WithMessageIcontains adds the messageIcontains to the commits list params
func (o *CommitsListParams) WithMessageIcontains(messageIcontains *string) *CommitsListParams {
	o.SetMessageIcontains(messageIcontains)
	return o
}

// SetMessageIcontains adds the messageIcontains to the commits list params
func (o *CommitsListParams) SetMessageIcontains(messageIcontains *string) {
	o.MessageIcontains = messageIcontains
}

// WithMessageStartswith adds the messageStartswith to the commits list params
func (o *CommitsListParams) WithMessageStartswith(messageStartswith *string) *CommitsListParams {
	o.SetMessageStartswith(messageStartswith)
	return o
}

// SetMessageStartswith adds the messageStartswith to the commits list params
func (o *CommitsListParams) SetMessageStartswith(messageStartswith *string) {
	o.MessageStartswith = messageStartswith
}

// WithMultiLineComments adds the multiLineComments to the commits list params
func (o *CommitsListParams) WithMultiLineComments(multiLineComments *float64) *CommitsListParams {
	o.SetMultiLineComments(multiLineComments)
	return o
}

// SetMultiLineComments adds the multiLineComments to the commits list params
func (o *CommitsListParams) SetMultiLineComments(multiLineComments *float64) {
	o.MultiLineComments = multiLineComments
}

// WithMultiLineCommentsGt adds the multiLineCommentsGt to the commits list params
func (o *CommitsListParams) WithMultiLineCommentsGt(multiLineCommentsGt *float64) *CommitsListParams {
	o.SetMultiLineCommentsGt(multiLineCommentsGt)
	return o
}

// SetMultiLineCommentsGt adds the multiLineCommentsGt to the commits list params
func (o *CommitsListParams) SetMultiLineCommentsGt(multiLineCommentsGt *float64) {
	o.MultiLineCommentsGt = multiLineCommentsGt
}

// WithMultiLineCommentsGte adds the multiLineCommentsGte to the commits list params
func (o *CommitsListParams) WithMultiLineCommentsGte(multiLineCommentsGte *float64) *CommitsListParams {
	o.SetMultiLineCommentsGte(multiLineCommentsGte)
	return o
}

// SetMultiLineCommentsGte adds the multiLineCommentsGte to the commits list params
func (o *CommitsListParams) SetMultiLineCommentsGte(multiLineCommentsGte *float64) {
	o.MultiLineCommentsGte = multiLineCommentsGte
}

// WithMultiLineCommentsIsnull adds the multiLineCommentsIsnull to the commits list params
func (o *CommitsListParams) WithMultiLineCommentsIsnull(multiLineCommentsIsnull *string) *CommitsListParams {
	o.SetMultiLineCommentsIsnull(multiLineCommentsIsnull)
	return o
}

// SetMultiLineCommentsIsnull adds the multiLineCommentsIsnull to the commits list params
func (o *CommitsListParams) SetMultiLineCommentsIsnull(multiLineCommentsIsnull *string) {
	o.MultiLineCommentsIsnull = multiLineCommentsIsnull
}

// WithMultiLineCommentsLt adds the multiLineCommentsLt to the commits list params
func (o *CommitsListParams) WithMultiLineCommentsLt(multiLineCommentsLt *float64) *CommitsListParams {
	o.SetMultiLineCommentsLt(multiLineCommentsLt)
	return o
}

// SetMultiLineCommentsLt adds the multiLineCommentsLt to the commits list params
func (o *CommitsListParams) SetMultiLineCommentsLt(multiLineCommentsLt *float64) {
	o.MultiLineCommentsLt = multiLineCommentsLt
}

// WithMultiLineCommentsLte adds the multiLineCommentsLte to the commits list params
func (o *CommitsListParams) WithMultiLineCommentsLte(multiLineCommentsLte *float64) *CommitsListParams {
	o.SetMultiLineCommentsLte(multiLineCommentsLte)
	return o
}

// SetMultiLineCommentsLte adds the multiLineCommentsLte to the commits list params
func (o *CommitsListParams) SetMultiLineCommentsLte(multiLineCommentsLte *float64) {
	o.MultiLineCommentsLte = multiLineCommentsLte
}

// WithNewWork adds the newWork to the commits list params
func (o *CommitsListParams) WithNewWork(newWork *float64) *CommitsListParams {
	o.SetNewWork(newWork)
	return o
}

// SetNewWork adds the newWork to the commits list params
func (o *CommitsListParams) SetNewWork(newWork *float64) {
	o.NewWork = newWork
}

// WithNewWorkGt adds the newWorkGt to the commits list params
func (o *CommitsListParams) WithNewWorkGt(newWorkGt *float64) *CommitsListParams {
	o.SetNewWorkGt(newWorkGt)
	return o
}

// SetNewWorkGt adds the newWorkGt to the commits list params
func (o *CommitsListParams) SetNewWorkGt(newWorkGt *float64) {
	o.NewWorkGt = newWorkGt
}

// WithNewWorkGte adds the newWorkGte to the commits list params
func (o *CommitsListParams) WithNewWorkGte(newWorkGte *float64) *CommitsListParams {
	o.SetNewWorkGte(newWorkGte)
	return o
}

// SetNewWorkGte adds the newWorkGte to the commits list params
func (o *CommitsListParams) SetNewWorkGte(newWorkGte *float64) {
	o.NewWorkGte = newWorkGte
}

// WithNewWorkLt adds the newWorkLt to the commits list params
func (o *CommitsListParams) WithNewWorkLt(newWorkLt *float64) *CommitsListParams {
	o.SetNewWorkLt(newWorkLt)
	return o
}

// SetNewWorkLt adds the newWorkLt to the commits list params
func (o *CommitsListParams) SetNewWorkLt(newWorkLt *float64) {
	o.NewWorkLt = newWorkLt
}

// WithNewWorkLte adds the newWorkLte to the commits list params
func (o *CommitsListParams) WithNewWorkLte(newWorkLte *float64) *CommitsListParams {
	o.SetNewWorkLte(newWorkLte)
	return o
}

// SetNewWorkLte adds the newWorkLte to the commits list params
func (o *CommitsListParams) SetNewWorkLte(newWorkLte *float64) {
	o.NewWorkLte = newWorkLte
}

// WithNormalizeAuthors adds the normalizeAuthors to the commits list params
func (o *CommitsListParams) WithNormalizeAuthors(normalizeAuthors *string) *CommitsListParams {
	o.SetNormalizeAuthors(normalizeAuthors)
	return o
}

// SetNormalizeAuthors adds the normalizeAuthors to the commits list params
func (o *CommitsListParams) SetNormalizeAuthors(normalizeAuthors *string) {
	o.NormalizeAuthors = normalizeAuthors
}

// WithOffset adds the offset to the commits list params
func (o *CommitsListParams) WithOffset(offset *int64) *CommitsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the commits list params
func (o *CommitsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the commits list params
func (o *CommitsListParams) WithOrdering(ordering *string) *CommitsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the commits list params
func (o *CommitsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithOutlierReason adds the outlierReason to the commits list params
func (o *CommitsListParams) WithOutlierReason(outlierReason *float64) *CommitsListParams {
	o.SetOutlierReason(outlierReason)
	return o
}

// SetOutlierReason adds the outlierReason to the commits list params
func (o *CommitsListParams) SetOutlierReason(outlierReason *float64) {
	o.OutlierReason = outlierReason
}

// WithOutlierReasonIn adds the outlierReasonIn to the commits list params
func (o *CommitsListParams) WithOutlierReasonIn(outlierReasonIn *float64) *CommitsListParams {
	o.SetOutlierReasonIn(outlierReasonIn)
	return o
}

// SetOutlierReasonIn adds the outlierReasonIn to the commits list params
func (o *CommitsListParams) SetOutlierReasonIn(outlierReasonIn *float64) {
	o.OutlierReasonIn = outlierReasonIn
}

// WithOutlierReasonIsnull adds the outlierReasonIsnull to the commits list params
func (o *CommitsListParams) WithOutlierReasonIsnull(outlierReasonIsnull *string) *CommitsListParams {
	o.SetOutlierReasonIsnull(outlierReasonIsnull)
	return o
}

// SetOutlierReasonIsnull adds the outlierReasonIsnull to the commits list params
func (o *CommitsListParams) SetOutlierReasonIsnull(outlierReasonIsnull *string) {
	o.OutlierReasonIsnull = outlierReasonIsnull
}

// WithPartition adds the partition to the commits list params
func (o *CommitsListParams) WithPartition(partition *float64) *CommitsListParams {
	o.SetPartition(partition)
	return o
}

// SetPartition adds the partition to the commits list params
func (o *CommitsListParams) SetPartition(partition *float64) {
	o.Partition = partition
}

// WithPartitionSize adds the partitionSize to the commits list params
func (o *CommitsListParams) WithPartitionSize(partitionSize *float64) *CommitsListParams {
	o.SetPartitionSize(partitionSize)
	return o
}

// SetPartitionSize adds the partitionSize to the commits list params
func (o *CommitsListParams) SetPartitionSize(partitionSize *float64) {
	o.PartitionSize = partitionSize
}

// WithPullRequestFollowOnID adds the pullRequestFollowOnID to the commits list params
func (o *CommitsListParams) WithPullRequestFollowOnID(pullRequestFollowOnID *float64) *CommitsListParams {
	o.SetPullRequestFollowOnID(pullRequestFollowOnID)
	return o
}

// SetPullRequestFollowOnID adds the pullRequestFollowOnId to the commits list params
func (o *CommitsListParams) SetPullRequestFollowOnID(pullRequestFollowOnID *float64) {
	o.PullRequestFollowOnID = pullRequestFollowOnID
}

// WithPullRequestID adds the pullRequestID to the commits list params
func (o *CommitsListParams) WithPullRequestID(pullRequestID *float64) *CommitsListParams {
	o.SetPullRequestID(pullRequestID)
	return o
}

// SetPullRequestID adds the pullRequestId to the commits list params
func (o *CommitsListParams) SetPullRequestID(pullRequestID *float64) {
	o.PullRequestID = pullRequestID
}

// WithRemoveExcluded adds the removeExcluded to the commits list params
func (o *CommitsListParams) WithRemoveExcluded(removeExcluded *string) *CommitsListParams {
	o.SetRemoveExcluded(removeExcluded)
	return o
}

// SetRemoveExcluded adds the removeExcluded to the commits list params
func (o *CommitsListParams) SetRemoveExcluded(removeExcluded *string) {
	o.RemoveExcluded = removeExcluded
}

// WithRepo adds the repo to the commits list params
func (o *CommitsListParams) WithRepo(repo *string) *CommitsListParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the commits list params
func (o *CommitsListParams) SetRepo(repo *string) {
	o.Repo = repo
}

// WithRepoID adds the repoID to the commits list params
func (o *CommitsListParams) WithRepoID(repoID *string) *CommitsListParams {
	o.SetRepoID(repoID)
	return o
}

// SetRepoID adds the repoId to the commits list params
func (o *CommitsListParams) SetRepoID(repoID *string) {
	o.RepoID = repoID
}

// WithRepoIDIn adds the repoIDIn to the commits list params
func (o *CommitsListParams) WithRepoIDIn(repoIDIn *string) *CommitsListParams {
	o.SetRepoIDIn(repoIDIn)
	return o
}

// SetRepoIDIn adds the repoIdIn to the commits list params
func (o *CommitsListParams) SetRepoIDIn(repoIDIn *string) {
	o.RepoIDIn = repoIDIn
}

// WithRepoTagsIn adds the repoTagsIn to the commits list params
func (o *CommitsListParams) WithRepoTagsIn(repoTagsIn *string) *CommitsListParams {
	o.SetRepoTagsIn(repoTagsIn)
	return o
}

// SetRepoTagsIn adds the repoTagsIn to the commits list params
func (o *CommitsListParams) SetRepoTagsIn(repoTagsIn *string) {
	o.RepoTagsIn = repoTagsIn
}

// WithRisk adds the risk to the commits list params
func (o *CommitsListParams) WithRisk(risk *float64) *CommitsListParams {
	o.SetRisk(risk)
	return o
}

// SetRisk adds the risk to the commits list params
func (o *CommitsListParams) SetRisk(risk *float64) {
	o.Risk = risk
}

// WithRiskGt adds the riskGt to the commits list params
func (o *CommitsListParams) WithRiskGt(riskGt *float64) *CommitsListParams {
	o.SetRiskGt(riskGt)
	return o
}

// SetRiskGt adds the riskGt to the commits list params
func (o *CommitsListParams) SetRiskGt(riskGt *float64) {
	o.RiskGt = riskGt
}

// WithRiskGte adds the riskGte to the commits list params
func (o *CommitsListParams) WithRiskGte(riskGte *float64) *CommitsListParams {
	o.SetRiskGte(riskGte)
	return o
}

// SetRiskGte adds the riskGte to the commits list params
func (o *CommitsListParams) SetRiskGte(riskGte *float64) {
	o.RiskGte = riskGte
}

// WithRiskLt adds the riskLt to the commits list params
func (o *CommitsListParams) WithRiskLt(riskLt *float64) *CommitsListParams {
	o.SetRiskLt(riskLt)
	return o
}

// SetRiskLt adds the riskLt to the commits list params
func (o *CommitsListParams) SetRiskLt(riskLt *float64) {
	o.RiskLt = riskLt
}

// WithRiskLte adds the riskLte to the commits list params
func (o *CommitsListParams) WithRiskLte(riskLte *float64) *CommitsListParams {
	o.SetRiskLte(riskLte)
	return o
}

// SetRiskLte adds the riskLte to the commits list params
func (o *CommitsListParams) SetRiskLte(riskLte *float64) {
	o.RiskLte = riskLte
}

// WithSearch adds the search to the commits list params
func (o *CommitsListParams) WithSearch(search *string) *CommitsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the commits list params
func (o *CommitsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithSingleLineComments adds the singleLineComments to the commits list params
func (o *CommitsListParams) WithSingleLineComments(singleLineComments *float64) *CommitsListParams {
	o.SetSingleLineComments(singleLineComments)
	return o
}

// SetSingleLineComments adds the singleLineComments to the commits list params
func (o *CommitsListParams) SetSingleLineComments(singleLineComments *float64) {
	o.SingleLineComments = singleLineComments
}

// WithSingleLineCommentsGt adds the singleLineCommentsGt to the commits list params
func (o *CommitsListParams) WithSingleLineCommentsGt(singleLineCommentsGt *float64) *CommitsListParams {
	o.SetSingleLineCommentsGt(singleLineCommentsGt)
	return o
}

// SetSingleLineCommentsGt adds the singleLineCommentsGt to the commits list params
func (o *CommitsListParams) SetSingleLineCommentsGt(singleLineCommentsGt *float64) {
	o.SingleLineCommentsGt = singleLineCommentsGt
}

// WithSingleLineCommentsGte adds the singleLineCommentsGte to the commits list params
func (o *CommitsListParams) WithSingleLineCommentsGte(singleLineCommentsGte *float64) *CommitsListParams {
	o.SetSingleLineCommentsGte(singleLineCommentsGte)
	return o
}

// SetSingleLineCommentsGte adds the singleLineCommentsGte to the commits list params
func (o *CommitsListParams) SetSingleLineCommentsGte(singleLineCommentsGte *float64) {
	o.SingleLineCommentsGte = singleLineCommentsGte
}

// WithSingleLineCommentsIsnull adds the singleLineCommentsIsnull to the commits list params
func (o *CommitsListParams) WithSingleLineCommentsIsnull(singleLineCommentsIsnull *string) *CommitsListParams {
	o.SetSingleLineCommentsIsnull(singleLineCommentsIsnull)
	return o
}

// SetSingleLineCommentsIsnull adds the singleLineCommentsIsnull to the commits list params
func (o *CommitsListParams) SetSingleLineCommentsIsnull(singleLineCommentsIsnull *string) {
	o.SingleLineCommentsIsnull = singleLineCommentsIsnull
}

// WithSingleLineCommentsLt adds the singleLineCommentsLt to the commits list params
func (o *CommitsListParams) WithSingleLineCommentsLt(singleLineCommentsLt *float64) *CommitsListParams {
	o.SetSingleLineCommentsLt(singleLineCommentsLt)
	return o
}

// SetSingleLineCommentsLt adds the singleLineCommentsLt to the commits list params
func (o *CommitsListParams) SetSingleLineCommentsLt(singleLineCommentsLt *float64) {
	o.SingleLineCommentsLt = singleLineCommentsLt
}

// WithSingleLineCommentsLte adds the singleLineCommentsLte to the commits list params
func (o *CommitsListParams) WithSingleLineCommentsLte(singleLineCommentsLte *float64) *CommitsListParams {
	o.SetSingleLineCommentsLte(singleLineCommentsLte)
	return o
}

// SetSingleLineCommentsLte adds the singleLineCommentsLte to the commits list params
func (o *CommitsListParams) SetSingleLineCommentsLte(singleLineCommentsLte *float64) {
	o.SingleLineCommentsLte = singleLineCommentsLte
}

// WithSmartDedupe adds the smartDedupe to the commits list params
func (o *CommitsListParams) WithSmartDedupe(smartDedupe *string) *CommitsListParams {
	o.SetSmartDedupe(smartDedupe)
	return o
}

// SetSmartDedupe adds the smartDedupe to the commits list params
func (o *CommitsListParams) SetSmartDedupe(smartDedupe *string) {
	o.SmartDedupe = smartDedupe
}

// WithTechnologyLabels adds the technologyLabels to the commits list params
func (o *CommitsListParams) WithTechnologyLabels(technologyLabels *string) *CommitsListParams {
	o.SetTechnologyLabels(technologyLabels)
	return o
}

// SetTechnologyLabels adds the technologyLabels to the commits list params
func (o *CommitsListParams) SetTechnologyLabels(technologyLabels *string) {
	o.TechnologyLabels = technologyLabels
}

// WithUserAlias adds the userAlias to the commits list params
func (o *CommitsListParams) WithUserAlias(userAlias *float64) *CommitsListParams {
	o.SetUserAlias(userAlias)
	return o
}

// SetUserAlias adds the userAlias to the commits list params
func (o *CommitsListParams) SetUserAlias(userAlias *float64) {
	o.UserAlias = userAlias
}

// WithUserAliasApexUserEmail adds the userAliasApexUserEmail to the commits list params
func (o *CommitsListParams) WithUserAliasApexUserEmail(userAliasApexUserEmail *string) *CommitsListParams {
	o.SetUserAliasApexUserEmail(userAliasApexUserEmail)
	return o
}

// SetUserAliasApexUserEmail adds the userAliasApexUserEmail to the commits list params
func (o *CommitsListParams) SetUserAliasApexUserEmail(userAliasApexUserEmail *string) {
	o.UserAliasApexUserEmail = userAliasApexUserEmail
}

// WithUserAliasApexUserName adds the userAliasApexUserName to the commits list params
func (o *CommitsListParams) WithUserAliasApexUserName(userAliasApexUserName *string) *CommitsListParams {
	o.SetUserAliasApexUserName(userAliasApexUserName)
	return o
}

// SetUserAliasApexUserName adds the userAliasApexUserName to the commits list params
func (o *CommitsListParams) SetUserAliasApexUserName(userAliasApexUserName *string) {
	o.UserAliasApexUserName = userAliasApexUserName
}

// WithUserAliasID adds the userAliasID to the commits list params
func (o *CommitsListParams) WithUserAliasID(userAliasID *string) *CommitsListParams {
	o.SetUserAliasID(userAliasID)
	return o
}

// SetUserAliasID adds the userAliasId to the commits list params
func (o *CommitsListParams) SetUserAliasID(userAliasID *string) {
	o.UserAliasID = userAliasID
}

// WithUserAliasIDIn adds the userAliasIDIn to the commits list params
func (o *CommitsListParams) WithUserAliasIDIn(userAliasIDIn *string) *CommitsListParams {
	o.SetUserAliasIDIn(userAliasIDIn)
	return o
}

// SetUserAliasIDIn adds the userAliasIdIn to the commits list params
func (o *CommitsListParams) SetUserAliasIDIn(userAliasIDIn *string) {
	o.UserAliasIDIn = userAliasIDIn
}

// WithWhitespaceAndPunctuation adds the whitespaceAndPunctuation to the commits list params
func (o *CommitsListParams) WithWhitespaceAndPunctuation(whitespaceAndPunctuation *float64) *CommitsListParams {
	o.SetWhitespaceAndPunctuation(whitespaceAndPunctuation)
	return o
}

// SetWhitespaceAndPunctuation adds the whitespaceAndPunctuation to the commits list params
func (o *CommitsListParams) SetWhitespaceAndPunctuation(whitespaceAndPunctuation *float64) {
	o.WhitespaceAndPunctuation = whitespaceAndPunctuation
}

// WithWhitespaceAndPunctuationGt adds the whitespaceAndPunctuationGt to the commits list params
func (o *CommitsListParams) WithWhitespaceAndPunctuationGt(whitespaceAndPunctuationGt *float64) *CommitsListParams {
	o.SetWhitespaceAndPunctuationGt(whitespaceAndPunctuationGt)
	return o
}

// SetWhitespaceAndPunctuationGt adds the whitespaceAndPunctuationGt to the commits list params
func (o *CommitsListParams) SetWhitespaceAndPunctuationGt(whitespaceAndPunctuationGt *float64) {
	o.WhitespaceAndPunctuationGt = whitespaceAndPunctuationGt
}

// WithWhitespaceAndPunctuationGte adds the whitespaceAndPunctuationGte to the commits list params
func (o *CommitsListParams) WithWhitespaceAndPunctuationGte(whitespaceAndPunctuationGte *float64) *CommitsListParams {
	o.SetWhitespaceAndPunctuationGte(whitespaceAndPunctuationGte)
	return o
}

// SetWhitespaceAndPunctuationGte adds the whitespaceAndPunctuationGte to the commits list params
func (o *CommitsListParams) SetWhitespaceAndPunctuationGte(whitespaceAndPunctuationGte *float64) {
	o.WhitespaceAndPunctuationGte = whitespaceAndPunctuationGte
}

// WithWhitespaceAndPunctuationIsnull adds the whitespaceAndPunctuationIsnull to the commits list params
func (o *CommitsListParams) WithWhitespaceAndPunctuationIsnull(whitespaceAndPunctuationIsnull *string) *CommitsListParams {
	o.SetWhitespaceAndPunctuationIsnull(whitespaceAndPunctuationIsnull)
	return o
}

// SetWhitespaceAndPunctuationIsnull adds the whitespaceAndPunctuationIsnull to the commits list params
func (o *CommitsListParams) SetWhitespaceAndPunctuationIsnull(whitespaceAndPunctuationIsnull *string) {
	o.WhitespaceAndPunctuationIsnull = whitespaceAndPunctuationIsnull
}

// WithWhitespaceAndPunctuationLt adds the whitespaceAndPunctuationLt to the commits list params
func (o *CommitsListParams) WithWhitespaceAndPunctuationLt(whitespaceAndPunctuationLt *float64) *CommitsListParams {
	o.SetWhitespaceAndPunctuationLt(whitespaceAndPunctuationLt)
	return o
}

// SetWhitespaceAndPunctuationLt adds the whitespaceAndPunctuationLt to the commits list params
func (o *CommitsListParams) SetWhitespaceAndPunctuationLt(whitespaceAndPunctuationLt *float64) {
	o.WhitespaceAndPunctuationLt = whitespaceAndPunctuationLt
}

// WithWhitespaceAndPunctuationLte adds the whitespaceAndPunctuationLte to the commits list params
func (o *CommitsListParams) WithWhitespaceAndPunctuationLte(whitespaceAndPunctuationLte *float64) *CommitsListParams {
	o.SetWhitespaceAndPunctuationLte(whitespaceAndPunctuationLte)
	return o
}

// SetWhitespaceAndPunctuationLte adds the whitespaceAndPunctuationLte to the commits list params
func (o *CommitsListParams) SetWhitespaceAndPunctuationLte(whitespaceAndPunctuationLte *float64) {
	o.WhitespaceAndPunctuationLte = whitespaceAndPunctuationLte
}

// WriteToRequest writes these params to a swagger request
func (o *CommitsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActivatePartitioning != nil {

		// query param activate_partitioning
		var qrActivatePartitioning string
		if o.ActivatePartitioning != nil {
			qrActivatePartitioning = *o.ActivatePartitioning
		}
		qActivatePartitioning := qrActivatePartitioning
		if qActivatePartitioning != "" {
			if err := r.SetQueryParam("activate_partitioning", qActivatePartitioning); err != nil {
				return err
			}
		}

	}

	if o.ApexUserID != nil {

		// query param apex_user_id
		var qrApexUserID string
		if o.ApexUserID != nil {
			qrApexUserID = *o.ApexUserID
		}
		qApexUserID := qrApexUserID
		if qApexUserID != "" {
			if err := r.SetQueryParam("apex_user_id", qApexUserID); err != nil {
				return err
			}
		}

	}

	if o.ApexUserIDIn != nil {

		// query param apex_user_id__in
		var qrApexUserIDIn string
		if o.ApexUserIDIn != nil {
			qrApexUserIDIn = *o.ApexUserIDIn
		}
		qApexUserIDIn := qrApexUserIDIn
		if qApexUserIDIn != "" {
			if err := r.SetQueryParam("apex_user_id__in", qApexUserIDIn); err != nil {
				return err
			}
		}

	}

	if o.ApplyDefaultFilters != nil {

		// query param apply_default_filters
		var qrApplyDefaultFilters string
		if o.ApplyDefaultFilters != nil {
			qrApplyDefaultFilters = *o.ApplyDefaultFilters
		}
		qApplyDefaultFilters := qrApplyDefaultFilters
		if qApplyDefaultFilters != "" {
			if err := r.SetQueryParam("apply_default_filters", qApplyDefaultFilters); err != nil {
				return err
			}
		}

	}

	if o.AuthorDate != nil {

		// query param author_date
		var qrAuthorDate string
		if o.AuthorDate != nil {
			qrAuthorDate = *o.AuthorDate
		}
		qAuthorDate := qrAuthorDate
		if qAuthorDate != "" {
			if err := r.SetQueryParam("author_date", qAuthorDate); err != nil {
				return err
			}
		}

	}

	if o.AuthorDateGt != nil {

		// query param author_date__gt
		var qrAuthorDateGt string
		if o.AuthorDateGt != nil {
			qrAuthorDateGt = *o.AuthorDateGt
		}
		qAuthorDateGt := qrAuthorDateGt
		if qAuthorDateGt != "" {
			if err := r.SetQueryParam("author_date__gt", qAuthorDateGt); err != nil {
				return err
			}
		}

	}

	if o.AuthorDateGte != nil {

		// query param author_date__gte
		var qrAuthorDateGte string
		if o.AuthorDateGte != nil {
			qrAuthorDateGte = *o.AuthorDateGte
		}
		qAuthorDateGte := qrAuthorDateGte
		if qAuthorDateGte != "" {
			if err := r.SetQueryParam("author_date__gte", qAuthorDateGte); err != nil {
				return err
			}
		}

	}

	if o.AuthorDateLt != nil {

		// query param author_date__lt
		var qrAuthorDateLt string
		if o.AuthorDateLt != nil {
			qrAuthorDateLt = *o.AuthorDateLt
		}
		qAuthorDateLt := qrAuthorDateLt
		if qAuthorDateLt != "" {
			if err := r.SetQueryParam("author_date__lt", qAuthorDateLt); err != nil {
				return err
			}
		}

	}

	if o.AuthorDateLte != nil {

		// query param author_date__lte
		var qrAuthorDateLte string
		if o.AuthorDateLte != nil {
			qrAuthorDateLte = *o.AuthorDateLte
		}
		qAuthorDateLte := qrAuthorDateLte
		if qAuthorDateLte != "" {
			if err := r.SetQueryParam("author_date__lte", qAuthorDateLte); err != nil {
				return err
			}
		}

	}

	if o.AuthorLocalDate != nil {

		// query param author_local_date
		var qrAuthorLocalDate string
		if o.AuthorLocalDate != nil {
			qrAuthorLocalDate = *o.AuthorLocalDate
		}
		qAuthorLocalDate := qrAuthorLocalDate
		if qAuthorLocalDate != "" {
			if err := r.SetQueryParam("author_local_date", qAuthorLocalDate); err != nil {
				return err
			}
		}

	}

	if o.AuthorLocalDateGt != nil {

		// query param author_local_date__gt
		var qrAuthorLocalDateGt string
		if o.AuthorLocalDateGt != nil {
			qrAuthorLocalDateGt = *o.AuthorLocalDateGt
		}
		qAuthorLocalDateGt := qrAuthorLocalDateGt
		if qAuthorLocalDateGt != "" {
			if err := r.SetQueryParam("author_local_date__gt", qAuthorLocalDateGt); err != nil {
				return err
			}
		}

	}

	if o.AuthorLocalDateGte != nil {

		// query param author_local_date__gte
		var qrAuthorLocalDateGte string
		if o.AuthorLocalDateGte != nil {
			qrAuthorLocalDateGte = *o.AuthorLocalDateGte
		}
		qAuthorLocalDateGte := qrAuthorLocalDateGte
		if qAuthorLocalDateGte != "" {
			if err := r.SetQueryParam("author_local_date__gte", qAuthorLocalDateGte); err != nil {
				return err
			}
		}

	}

	if o.AuthorLocalDateLt != nil {

		// query param author_local_date__lt
		var qrAuthorLocalDateLt string
		if o.AuthorLocalDateLt != nil {
			qrAuthorLocalDateLt = *o.AuthorLocalDateLt
		}
		qAuthorLocalDateLt := qrAuthorLocalDateLt
		if qAuthorLocalDateLt != "" {
			if err := r.SetQueryParam("author_local_date__lt", qAuthorLocalDateLt); err != nil {
				return err
			}
		}

	}

	if o.AuthorLocalDateLte != nil {

		// query param author_local_date__lte
		var qrAuthorLocalDateLte string
		if o.AuthorLocalDateLte != nil {
			qrAuthorLocalDateLte = *o.AuthorLocalDateLte
		}
		qAuthorLocalDateLte := qrAuthorLocalDateLte
		if qAuthorLocalDateLte != "" {
			if err := r.SetQueryParam("author_local_date__lte", qAuthorLocalDateLte); err != nil {
				return err
			}
		}

	}

	if o.AuthorTzoffset != nil {

		// query param author_tzoffset
		var qrAuthorTzoffset float64
		if o.AuthorTzoffset != nil {
			qrAuthorTzoffset = *o.AuthorTzoffset
		}
		qAuthorTzoffset := swag.FormatFloat64(qrAuthorTzoffset)
		if qAuthorTzoffset != "" {
			if err := r.SetQueryParam("author_tzoffset", qAuthorTzoffset); err != nil {
				return err
			}
		}

	}

	if o.Churn != nil {

		// query param churn
		var qrChurn float64
		if o.Churn != nil {
			qrChurn = *o.Churn
		}
		qChurn := swag.FormatFloat64(qrChurn)
		if qChurn != "" {
			if err := r.SetQueryParam("churn", qChurn); err != nil {
				return err
			}
		}

	}

	if o.ChurnGt != nil {

		// query param churn__gt
		var qrChurnGt float64
		if o.ChurnGt != nil {
			qrChurnGt = *o.ChurnGt
		}
		qChurnGt := swag.FormatFloat64(qrChurnGt)
		if qChurnGt != "" {
			if err := r.SetQueryParam("churn__gt", qChurnGt); err != nil {
				return err
			}
		}

	}

	if o.ChurnGte != nil {

		// query param churn__gte
		var qrChurnGte float64
		if o.ChurnGte != nil {
			qrChurnGte = *o.ChurnGte
		}
		qChurnGte := swag.FormatFloat64(qrChurnGte)
		if qChurnGte != "" {
			if err := r.SetQueryParam("churn__gte", qChurnGte); err != nil {
				return err
			}
		}

	}

	if o.ChurnLt != nil {

		// query param churn__lt
		var qrChurnLt float64
		if o.ChurnLt != nil {
			qrChurnLt = *o.ChurnLt
		}
		qChurnLt := swag.FormatFloat64(qrChurnLt)
		if qChurnLt != "" {
			if err := r.SetQueryParam("churn__lt", qChurnLt); err != nil {
				return err
			}
		}

	}

	if o.ChurnLte != nil {

		// query param churn__lte
		var qrChurnLte float64
		if o.ChurnLte != nil {
			qrChurnLte = *o.ChurnLte
		}
		qChurnLte := swag.FormatFloat64(qrChurnLte)
		if qChurnLte != "" {
			if err := r.SetQueryParam("churn__lte", qChurnLte); err != nil {
				return err
			}
		}

	}

	if o.CommitterDate != nil {

		// query param committer_date
		var qrCommitterDate string
		if o.CommitterDate != nil {
			qrCommitterDate = *o.CommitterDate
		}
		qCommitterDate := qrCommitterDate
		if qCommitterDate != "" {
			if err := r.SetQueryParam("committer_date", qCommitterDate); err != nil {
				return err
			}
		}

	}

	if o.CommitterDateGt != nil {

		// query param committer_date__gt
		var qrCommitterDateGt string
		if o.CommitterDateGt != nil {
			qrCommitterDateGt = *o.CommitterDateGt
		}
		qCommitterDateGt := qrCommitterDateGt
		if qCommitterDateGt != "" {
			if err := r.SetQueryParam("committer_date__gt", qCommitterDateGt); err != nil {
				return err
			}
		}

	}

	if o.CommitterDateGte != nil {

		// query param committer_date__gte
		var qrCommitterDateGte string
		if o.CommitterDateGte != nil {
			qrCommitterDateGte = *o.CommitterDateGte
		}
		qCommitterDateGte := qrCommitterDateGte
		if qCommitterDateGte != "" {
			if err := r.SetQueryParam("committer_date__gte", qCommitterDateGte); err != nil {
				return err
			}
		}

	}

	if o.CommitterDateLt != nil {

		// query param committer_date__lt
		var qrCommitterDateLt string
		if o.CommitterDateLt != nil {
			qrCommitterDateLt = *o.CommitterDateLt
		}
		qCommitterDateLt := qrCommitterDateLt
		if qCommitterDateLt != "" {
			if err := r.SetQueryParam("committer_date__lt", qCommitterDateLt); err != nil {
				return err
			}
		}

	}

	if o.CommitterDateLte != nil {

		// query param committer_date__lte
		var qrCommitterDateLte string
		if o.CommitterDateLte != nil {
			qrCommitterDateLte = *o.CommitterDateLte
		}
		qCommitterDateLte := qrCommitterDateLte
		if qCommitterDateLte != "" {
			if err := r.SetQueryParam("committer_date__lte", qCommitterDateLte); err != nil {
				return err
			}
		}

	}

	if o.CommitterLocalDate != nil {

		// query param committer_local_date
		var qrCommitterLocalDate string
		if o.CommitterLocalDate != nil {
			qrCommitterLocalDate = *o.CommitterLocalDate
		}
		qCommitterLocalDate := qrCommitterLocalDate
		if qCommitterLocalDate != "" {
			if err := r.SetQueryParam("committer_local_date", qCommitterLocalDate); err != nil {
				return err
			}
		}

	}

	if o.CommitterLocalDateGt != nil {

		// query param committer_local_date__gt
		var qrCommitterLocalDateGt string
		if o.CommitterLocalDateGt != nil {
			qrCommitterLocalDateGt = *o.CommitterLocalDateGt
		}
		qCommitterLocalDateGt := qrCommitterLocalDateGt
		if qCommitterLocalDateGt != "" {
			if err := r.SetQueryParam("committer_local_date__gt", qCommitterLocalDateGt); err != nil {
				return err
			}
		}

	}

	if o.CommitterLocalDateGte != nil {

		// query param committer_local_date__gte
		var qrCommitterLocalDateGte string
		if o.CommitterLocalDateGte != nil {
			qrCommitterLocalDateGte = *o.CommitterLocalDateGte
		}
		qCommitterLocalDateGte := qrCommitterLocalDateGte
		if qCommitterLocalDateGte != "" {
			if err := r.SetQueryParam("committer_local_date__gte", qCommitterLocalDateGte); err != nil {
				return err
			}
		}

	}

	if o.CommitterLocalDateLt != nil {

		// query param committer_local_date__lt
		var qrCommitterLocalDateLt string
		if o.CommitterLocalDateLt != nil {
			qrCommitterLocalDateLt = *o.CommitterLocalDateLt
		}
		qCommitterLocalDateLt := qrCommitterLocalDateLt
		if qCommitterLocalDateLt != "" {
			if err := r.SetQueryParam("committer_local_date__lt", qCommitterLocalDateLt); err != nil {
				return err
			}
		}

	}

	if o.CommitterLocalDateLte != nil {

		// query param committer_local_date__lte
		var qrCommitterLocalDateLte string
		if o.CommitterLocalDateLte != nil {
			qrCommitterLocalDateLte = *o.CommitterLocalDateLte
		}
		qCommitterLocalDateLte := qrCommitterLocalDateLte
		if qCommitterLocalDateLte != "" {
			if err := r.SetQueryParam("committer_local_date__lte", qCommitterLocalDateLte); err != nil {
				return err
			}
		}

	}

	if o.CommitterTzoffset != nil {

		// query param committer_tzoffset
		var qrCommitterTzoffset float64
		if o.CommitterTzoffset != nil {
			qrCommitterTzoffset = *o.CommitterTzoffset
		}
		qCommitterTzoffset := swag.FormatFloat64(qrCommitterTzoffset)
		if qCommitterTzoffset != "" {
			if err := r.SetQueryParam("committer_tzoffset", qCommitterTzoffset); err != nil {
				return err
			}
		}

	}

	if o.Deletions != nil {

		// query param deletions
		var qrDeletions float64
		if o.Deletions != nil {
			qrDeletions = *o.Deletions
		}
		qDeletions := swag.FormatFloat64(qrDeletions)
		if qDeletions != "" {
			if err := r.SetQueryParam("deletions", qDeletions); err != nil {
				return err
			}
		}

	}

	if o.DeletionsGt != nil {

		// query param deletions__gt
		var qrDeletionsGt float64
		if o.DeletionsGt != nil {
			qrDeletionsGt = *o.DeletionsGt
		}
		qDeletionsGt := swag.FormatFloat64(qrDeletionsGt)
		if qDeletionsGt != "" {
			if err := r.SetQueryParam("deletions__gt", qDeletionsGt); err != nil {
				return err
			}
		}

	}

	if o.DeletionsGte != nil {

		// query param deletions__gte
		var qrDeletionsGte float64
		if o.DeletionsGte != nil {
			qrDeletionsGte = *o.DeletionsGte
		}
		qDeletionsGte := swag.FormatFloat64(qrDeletionsGte)
		if qDeletionsGte != "" {
			if err := r.SetQueryParam("deletions__gte", qDeletionsGte); err != nil {
				return err
			}
		}

	}

	if o.DeletionsLt != nil {

		// query param deletions__lt
		var qrDeletionsLt float64
		if o.DeletionsLt != nil {
			qrDeletionsLt = *o.DeletionsLt
		}
		qDeletionsLt := swag.FormatFloat64(qrDeletionsLt)
		if qDeletionsLt != "" {
			if err := r.SetQueryParam("deletions__lt", qDeletionsLt); err != nil {
				return err
			}
		}

	}

	if o.DeletionsLte != nil {

		// query param deletions__lte
		var qrDeletionsLte float64
		if o.DeletionsLte != nil {
			qrDeletionsLte = *o.DeletionsLte
		}
		qDeletionsLte := swag.FormatFloat64(qrDeletionsLte)
		if qDeletionsLte != "" {
			if err := r.SetQueryParam("deletions__lte", qDeletionsLte); err != nil {
				return err
			}
		}

	}

	if o.ExcludeBlocked != nil {

		// query param exclude_blocked
		var qrExcludeBlocked string
		if o.ExcludeBlocked != nil {
			qrExcludeBlocked = *o.ExcludeBlocked
		}
		qExcludeBlocked := qrExcludeBlocked
		if qExcludeBlocked != "" {
			if err := r.SetQueryParam("exclude_blocked", qExcludeBlocked); err != nil {
				return err
			}
		}

	}

	if o.ExcludeOutliers != nil {

		// query param exclude_outliers
		var qrExcludeOutliers string
		if o.ExcludeOutliers != nil {
			qrExcludeOutliers = *o.ExcludeOutliers
		}
		qExcludeOutliers := qrExcludeOutliers
		if qExcludeOutliers != "" {
			if err := r.SetQueryParam("exclude_outliers", qExcludeOutliers); err != nil {
				return err
			}
		}

	}

	if o.ExcludeWeekends != nil {

		// query param exclude_weekends
		var qrExcludeWeekends string
		if o.ExcludeWeekends != nil {
			qrExcludeWeekends = *o.ExcludeWeekends
		}
		qExcludeWeekends := qrExcludeWeekends
		if qExcludeWeekends != "" {
			if err := r.SetQueryParam("exclude_weekends", qExcludeWeekends); err != nil {
				return err
			}
		}

	}

	if o.ExtractedTags != nil {

		// query param extracted_tags
		var qrExtractedTags string
		if o.ExtractedTags != nil {
			qrExtractedTags = *o.ExtractedTags
		}
		qExtractedTags := qrExtractedTags
		if qExtractedTags != "" {
			if err := r.SetQueryParam("extracted_tags", qExtractedTags); err != nil {
				return err
			}
		}

	}

	if o.ExtractedTagsIcontains != nil {

		// query param extracted_tags__icontains
		var qrExtractedTagsIcontains string
		if o.ExtractedTagsIcontains != nil {
			qrExtractedTagsIcontains = *o.ExtractedTagsIcontains
		}
		qExtractedTagsIcontains := qrExtractedTagsIcontains
		if qExtractedTagsIcontains != "" {
			if err := r.SetQueryParam("extracted_tags__icontains", qExtractedTagsIcontains); err != nil {
				return err
			}
		}

	}

	if o.Files != nil {

		// query param files
		var qrFiles float64
		if o.Files != nil {
			qrFiles = *o.Files
		}
		qFiles := swag.FormatFloat64(qrFiles)
		if qFiles != "" {
			if err := r.SetQueryParam("files", qFiles); err != nil {
				return err
			}
		}

	}

	if o.FilesGt != nil {

		// query param files__gt
		var qrFilesGt float64
		if o.FilesGt != nil {
			qrFilesGt = *o.FilesGt
		}
		qFilesGt := swag.FormatFloat64(qrFilesGt)
		if qFilesGt != "" {
			if err := r.SetQueryParam("files__gt", qFilesGt); err != nil {
				return err
			}
		}

	}

	if o.FilesGte != nil {

		// query param files__gte
		var qrFilesGte float64
		if o.FilesGte != nil {
			qrFilesGte = *o.FilesGte
		}
		qFilesGte := swag.FormatFloat64(qrFilesGte)
		if qFilesGte != "" {
			if err := r.SetQueryParam("files__gte", qFilesGte); err != nil {
				return err
			}
		}

	}

	if o.FilesLt != nil {

		// query param files__lt
		var qrFilesLt float64
		if o.FilesLt != nil {
			qrFilesLt = *o.FilesLt
		}
		qFilesLt := swag.FormatFloat64(qrFilesLt)
		if qFilesLt != "" {
			if err := r.SetQueryParam("files__lt", qFilesLt); err != nil {
				return err
			}
		}

	}

	if o.FilesLte != nil {

		// query param files__lte
		var qrFilesLte float64
		if o.FilesLte != nil {
			qrFilesLte = *o.FilesLte
		}
		qFilesLte := swag.FormatFloat64(qrFilesLte)
		if qFilesLte != "" {
			if err := r.SetQueryParam("files__lte", qFilesLte); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.Haloc != nil {

		// query param haloc
		var qrHaloc float64
		if o.Haloc != nil {
			qrHaloc = *o.Haloc
		}
		qHaloc := swag.FormatFloat64(qrHaloc)
		if qHaloc != "" {
			if err := r.SetQueryParam("haloc", qHaloc); err != nil {
				return err
			}
		}

	}

	if o.HalocGt != nil {

		// query param haloc__gt
		var qrHalocGt float64
		if o.HalocGt != nil {
			qrHalocGt = *o.HalocGt
		}
		qHalocGt := swag.FormatFloat64(qrHalocGt)
		if qHalocGt != "" {
			if err := r.SetQueryParam("haloc__gt", qHalocGt); err != nil {
				return err
			}
		}

	}

	if o.HalocGte != nil {

		// query param haloc__gte
		var qrHalocGte float64
		if o.HalocGte != nil {
			qrHalocGte = *o.HalocGte
		}
		qHalocGte := swag.FormatFloat64(qrHalocGte)
		if qHalocGte != "" {
			if err := r.SetQueryParam("haloc__gte", qHalocGte); err != nil {
				return err
			}
		}

	}

	if o.HalocLt != nil {

		// query param haloc__lt
		var qrHalocLt float64
		if o.HalocLt != nil {
			qrHalocLt = *o.HalocLt
		}
		qHalocLt := swag.FormatFloat64(qrHalocLt)
		if qHalocLt != "" {
			if err := r.SetQueryParam("haloc__lt", qHalocLt); err != nil {
				return err
			}
		}

	}

	if o.HalocLte != nil {

		// query param haloc__lte
		var qrHalocLte float64
		if o.HalocLte != nil {
			qrHalocLte = *o.HalocLte
		}
		qHalocLte := swag.FormatFloat64(qrHalocLte)
		if qHalocLte != "" {
			if err := r.SetQueryParam("haloc__lte", qHalocLte); err != nil {
				return err
			}
		}

	}

	if o.HelpOthers != nil {

		// query param help_others
		var qrHelpOthers float64
		if o.HelpOthers != nil {
			qrHelpOthers = *o.HelpOthers
		}
		qHelpOthers := swag.FormatFloat64(qrHelpOthers)
		if qHelpOthers != "" {
			if err := r.SetQueryParam("help_others", qHelpOthers); err != nil {
				return err
			}
		}

	}

	if o.HelpOthersGt != nil {

		// query param help_others__gt
		var qrHelpOthersGt float64
		if o.HelpOthersGt != nil {
			qrHelpOthersGt = *o.HelpOthersGt
		}
		qHelpOthersGt := swag.FormatFloat64(qrHelpOthersGt)
		if qHelpOthersGt != "" {
			if err := r.SetQueryParam("help_others__gt", qHelpOthersGt); err != nil {
				return err
			}
		}

	}

	if o.HelpOthersGte != nil {

		// query param help_others__gte
		var qrHelpOthersGte float64
		if o.HelpOthersGte != nil {
			qrHelpOthersGte = *o.HelpOthersGte
		}
		qHelpOthersGte := swag.FormatFloat64(qrHelpOthersGte)
		if qHelpOthersGte != "" {
			if err := r.SetQueryParam("help_others__gte", qHelpOthersGte); err != nil {
				return err
			}
		}

	}

	if o.HelpOthersLt != nil {

		// query param help_others__lt
		var qrHelpOthersLt float64
		if o.HelpOthersLt != nil {
			qrHelpOthersLt = *o.HelpOthersLt
		}
		qHelpOthersLt := swag.FormatFloat64(qrHelpOthersLt)
		if qHelpOthersLt != "" {
			if err := r.SetQueryParam("help_others__lt", qHelpOthersLt); err != nil {
				return err
			}
		}

	}

	if o.HelpOthersLte != nil {

		// query param help_others__lte
		var qrHelpOthersLte float64
		if o.HelpOthersLte != nil {
			qrHelpOthersLte = *o.HelpOthersLte
		}
		qHelpOthersLte := swag.FormatFloat64(qrHelpOthersLte)
		if qHelpOthersLte != "" {
			if err := r.SetQueryParam("help_others__lte", qHelpOthersLte); err != nil {
				return err
			}
		}

	}

	if o.Hexsha != nil {

		// query param hexsha
		var qrHexsha string
		if o.Hexsha != nil {
			qrHexsha = *o.Hexsha
		}
		qHexsha := qrHexsha
		if qHexsha != "" {
			if err := r.SetQueryParam("hexsha", qHexsha); err != nil {
				return err
			}
		}

	}

	if o.HexshaIn != nil {

		// query param hexsha__in
		var qrHexshaIn string
		if o.HexshaIn != nil {
			qrHexshaIn = *o.HexshaIn
		}
		qHexshaIn := qrHexshaIn
		if qHexshaIn != "" {
			if err := r.SetQueryParam("hexsha__in", qHexshaIn); err != nil {
				return err
			}
		}

	}

	if o.Hunks != nil {

		// query param hunks
		var qrHunks float64
		if o.Hunks != nil {
			qrHunks = *o.Hunks
		}
		qHunks := swag.FormatFloat64(qrHunks)
		if qHunks != "" {
			if err := r.SetQueryParam("hunks", qHunks); err != nil {
				return err
			}
		}

	}

	if o.HunksGt != nil {

		// query param hunks__gt
		var qrHunksGt float64
		if o.HunksGt != nil {
			qrHunksGt = *o.HunksGt
		}
		qHunksGt := swag.FormatFloat64(qrHunksGt)
		if qHunksGt != "" {
			if err := r.SetQueryParam("hunks__gt", qHunksGt); err != nil {
				return err
			}
		}

	}

	if o.HunksGte != nil {

		// query param hunks__gte
		var qrHunksGte float64
		if o.HunksGte != nil {
			qrHunksGte = *o.HunksGte
		}
		qHunksGte := swag.FormatFloat64(qrHunksGte)
		if qHunksGte != "" {
			if err := r.SetQueryParam("hunks__gte", qHunksGte); err != nil {
				return err
			}
		}

	}

	if o.HunksLt != nil {

		// query param hunks__lt
		var qrHunksLt float64
		if o.HunksLt != nil {
			qrHunksLt = *o.HunksLt
		}
		qHunksLt := swag.FormatFloat64(qrHunksLt)
		if qHunksLt != "" {
			if err := r.SetQueryParam("hunks__lt", qHunksLt); err != nil {
				return err
			}
		}

	}

	if o.HunksLte != nil {

		// query param hunks__lte
		var qrHunksLte float64
		if o.HunksLte != nil {
			qrHunksLte = *o.HunksLte
		}
		qHunksLte := swag.FormatFloat64(qrHunksLte)
		if qHunksLte != "" {
			if err := r.SetQueryParam("hunks__lte", qHunksLte); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.IgnoreHash != nil {

		// query param ignore_hash
		var qrIgnoreHash string
		if o.IgnoreHash != nil {
			qrIgnoreHash = *o.IgnoreHash
		}
		qIgnoreHash := qrIgnoreHash
		if qIgnoreHash != "" {
			if err := r.SetQueryParam("ignore_hash", qIgnoreHash); err != nil {
				return err
			}
		}

	}

	if o.IgnoreHashIsnull != nil {

		// query param ignore_hash__isnull
		var qrIgnoreHashIsnull string
		if o.IgnoreHashIsnull != nil {
			qrIgnoreHashIsnull = *o.IgnoreHashIsnull
		}
		qIgnoreHashIsnull := qrIgnoreHashIsnull
		if qIgnoreHashIsnull != "" {
			if err := r.SetQueryParam("ignore_hash__isnull", qIgnoreHashIsnull); err != nil {
				return err
			}
		}

	}

	if o.Impact != nil {

		// query param impact
		var qrImpact float64
		if o.Impact != nil {
			qrImpact = *o.Impact
		}
		qImpact := swag.FormatFloat64(qrImpact)
		if qImpact != "" {
			if err := r.SetQueryParam("impact", qImpact); err != nil {
				return err
			}
		}

	}

	if o.ImpactGt != nil {

		// query param impact__gt
		var qrImpactGt float64
		if o.ImpactGt != nil {
			qrImpactGt = *o.ImpactGt
		}
		qImpactGt := swag.FormatFloat64(qrImpactGt)
		if qImpactGt != "" {
			if err := r.SetQueryParam("impact__gt", qImpactGt); err != nil {
				return err
			}
		}

	}

	if o.ImpactGte != nil {

		// query param impact__gte
		var qrImpactGte float64
		if o.ImpactGte != nil {
			qrImpactGte = *o.ImpactGte
		}
		qImpactGte := swag.FormatFloat64(qrImpactGte)
		if qImpactGte != "" {
			if err := r.SetQueryParam("impact__gte", qImpactGte); err != nil {
				return err
			}
		}

	}

	if o.ImpactLt != nil {

		// query param impact__lt
		var qrImpactLt float64
		if o.ImpactLt != nil {
			qrImpactLt = *o.ImpactLt
		}
		qImpactLt := swag.FormatFloat64(qrImpactLt)
		if qImpactLt != "" {
			if err := r.SetQueryParam("impact__lt", qImpactLt); err != nil {
				return err
			}
		}

	}

	if o.ImpactLte != nil {

		// query param impact__lte
		var qrImpactLte float64
		if o.ImpactLte != nil {
			qrImpactLte = *o.ImpactLte
		}
		qImpactLte := swag.FormatFloat64(qrImpactLte)
		if qImpactLte != "" {
			if err := r.SetQueryParam("impact__lte", qImpactLte); err != nil {
				return err
			}
		}

	}

	if o.InsDelRatio != nil {

		// query param ins_del_ratio
		var qrInsDelRatio float64
		if o.InsDelRatio != nil {
			qrInsDelRatio = *o.InsDelRatio
		}
		qInsDelRatio := swag.FormatFloat64(qrInsDelRatio)
		if qInsDelRatio != "" {
			if err := r.SetQueryParam("ins_del_ratio", qInsDelRatio); err != nil {
				return err
			}
		}

	}

	if o.InsDelRatioGt != nil {

		// query param ins_del_ratio__gt
		var qrInsDelRatioGt float64
		if o.InsDelRatioGt != nil {
			qrInsDelRatioGt = *o.InsDelRatioGt
		}
		qInsDelRatioGt := swag.FormatFloat64(qrInsDelRatioGt)
		if qInsDelRatioGt != "" {
			if err := r.SetQueryParam("ins_del_ratio__gt", qInsDelRatioGt); err != nil {
				return err
			}
		}

	}

	if o.InsDelRatioGte != nil {

		// query param ins_del_ratio__gte
		var qrInsDelRatioGte float64
		if o.InsDelRatioGte != nil {
			qrInsDelRatioGte = *o.InsDelRatioGte
		}
		qInsDelRatioGte := swag.FormatFloat64(qrInsDelRatioGte)
		if qInsDelRatioGte != "" {
			if err := r.SetQueryParam("ins_del_ratio__gte", qInsDelRatioGte); err != nil {
				return err
			}
		}

	}

	if o.InsDelRatioLt != nil {

		// query param ins_del_ratio__lt
		var qrInsDelRatioLt float64
		if o.InsDelRatioLt != nil {
			qrInsDelRatioLt = *o.InsDelRatioLt
		}
		qInsDelRatioLt := swag.FormatFloat64(qrInsDelRatioLt)
		if qInsDelRatioLt != "" {
			if err := r.SetQueryParam("ins_del_ratio__lt", qInsDelRatioLt); err != nil {
				return err
			}
		}

	}

	if o.InsDelRatioLte != nil {

		// query param ins_del_ratio__lte
		var qrInsDelRatioLte float64
		if o.InsDelRatioLte != nil {
			qrInsDelRatioLte = *o.InsDelRatioLte
		}
		qInsDelRatioLte := swag.FormatFloat64(qrInsDelRatioLte)
		if qInsDelRatioLte != "" {
			if err := r.SetQueryParam("ins_del_ratio__lte", qInsDelRatioLte); err != nil {
				return err
			}
		}

	}

	if o.Insertions != nil {

		// query param insertions
		var qrInsertions float64
		if o.Insertions != nil {
			qrInsertions = *o.Insertions
		}
		qInsertions := swag.FormatFloat64(qrInsertions)
		if qInsertions != "" {
			if err := r.SetQueryParam("insertions", qInsertions); err != nil {
				return err
			}
		}

	}

	if o.InsertionsGt != nil {

		// query param insertions__gt
		var qrInsertionsGt float64
		if o.InsertionsGt != nil {
			qrInsertionsGt = *o.InsertionsGt
		}
		qInsertionsGt := swag.FormatFloat64(qrInsertionsGt)
		if qInsertionsGt != "" {
			if err := r.SetQueryParam("insertions__gt", qInsertionsGt); err != nil {
				return err
			}
		}

	}

	if o.InsertionsGte != nil {

		// query param insertions__gte
		var qrInsertionsGte float64
		if o.InsertionsGte != nil {
			qrInsertionsGte = *o.InsertionsGte
		}
		qInsertionsGte := swag.FormatFloat64(qrInsertionsGte)
		if qInsertionsGte != "" {
			if err := r.SetQueryParam("insertions__gte", qInsertionsGte); err != nil {
				return err
			}
		}

	}

	if o.InsertionsLt != nil {

		// query param insertions__lt
		var qrInsertionsLt float64
		if o.InsertionsLt != nil {
			qrInsertionsLt = *o.InsertionsLt
		}
		qInsertionsLt := swag.FormatFloat64(qrInsertionsLt)
		if qInsertionsLt != "" {
			if err := r.SetQueryParam("insertions__lt", qInsertionsLt); err != nil {
				return err
			}
		}

	}

	if o.InsertionsLte != nil {

		// query param insertions__lte
		var qrInsertionsLte float64
		if o.InsertionsLte != nil {
			qrInsertionsLte = *o.InsertionsLte
		}
		qInsertionsLte := swag.FormatFloat64(qrInsertionsLte)
		if qInsertionsLte != "" {
			if err := r.SetQueryParam("insertions__lte", qInsertionsLte); err != nil {
				return err
			}
		}

	}

	if o.IsGroupCommit != nil {

		// query param is_group_commit
		var qrIsGroupCommit string
		if o.IsGroupCommit != nil {
			qrIsGroupCommit = *o.IsGroupCommit
		}
		qIsGroupCommit := qrIsGroupCommit
		if qIsGroupCommit != "" {
			if err := r.SetQueryParam("is_group_commit", qIsGroupCommit); err != nil {
				return err
			}
		}

	}

	if o.IsMerge != nil {

		// query param is_merge
		var qrIsMerge string
		if o.IsMerge != nil {
			qrIsMerge = *o.IsMerge
		}
		qIsMerge := qrIsMerge
		if qIsMerge != "" {
			if err := r.SetQueryParam("is_merge", qIsMerge); err != nil {
				return err
			}
		}

	}

	if o.IsPrOrphan != nil {

		// query param is_pr_orphan
		var qrIsPrOrphan string
		if o.IsPrOrphan != nil {
			qrIsPrOrphan = *o.IsPrOrphan
		}
		qIsPrOrphan := qrIsPrOrphan
		if qIsPrOrphan != "" {
			if err := r.SetQueryParam("is_pr_orphan", qIsPrOrphan); err != nil {
				return err
			}
		}

	}

	if o.IsTrivial != nil {

		// query param is_trivial
		var qrIsTrivial string
		if o.IsTrivial != nil {
			qrIsTrivial = *o.IsTrivial
		}
		qIsTrivial := qrIsTrivial
		if qIsTrivial != "" {
			if err := r.SetQueryParam("is_trivial", qIsTrivial); err != nil {
				return err
			}
		}

	}

	if o.LegacyRefactor != nil {

		// query param legacy_refactor
		var qrLegacyRefactor float64
		if o.LegacyRefactor != nil {
			qrLegacyRefactor = *o.LegacyRefactor
		}
		qLegacyRefactor := swag.FormatFloat64(qrLegacyRefactor)
		if qLegacyRefactor != "" {
			if err := r.SetQueryParam("legacy_refactor", qLegacyRefactor); err != nil {
				return err
			}
		}

	}

	if o.LegacyRefactorGt != nil {

		// query param legacy_refactor__gt
		var qrLegacyRefactorGt float64
		if o.LegacyRefactorGt != nil {
			qrLegacyRefactorGt = *o.LegacyRefactorGt
		}
		qLegacyRefactorGt := swag.FormatFloat64(qrLegacyRefactorGt)
		if qLegacyRefactorGt != "" {
			if err := r.SetQueryParam("legacy_refactor__gt", qLegacyRefactorGt); err != nil {
				return err
			}
		}

	}

	if o.LegacyRefactorGte != nil {

		// query param legacy_refactor__gte
		var qrLegacyRefactorGte float64
		if o.LegacyRefactorGte != nil {
			qrLegacyRefactorGte = *o.LegacyRefactorGte
		}
		qLegacyRefactorGte := swag.FormatFloat64(qrLegacyRefactorGte)
		if qLegacyRefactorGte != "" {
			if err := r.SetQueryParam("legacy_refactor__gte", qLegacyRefactorGte); err != nil {
				return err
			}
		}

	}

	if o.LegacyRefactorLt != nil {

		// query param legacy_refactor__lt
		var qrLegacyRefactorLt float64
		if o.LegacyRefactorLt != nil {
			qrLegacyRefactorLt = *o.LegacyRefactorLt
		}
		qLegacyRefactorLt := swag.FormatFloat64(qrLegacyRefactorLt)
		if qLegacyRefactorLt != "" {
			if err := r.SetQueryParam("legacy_refactor__lt", qLegacyRefactorLt); err != nil {
				return err
			}
		}

	}

	if o.LegacyRefactorLte != nil {

		// query param legacy_refactor__lte
		var qrLegacyRefactorLte float64
		if o.LegacyRefactorLte != nil {
			qrLegacyRefactorLte = *o.LegacyRefactorLte
		}
		qLegacyRefactorLte := swag.FormatFloat64(qrLegacyRefactorLte)
		if qLegacyRefactorLte != "" {
			if err := r.SetQueryParam("legacy_refactor__lte", qLegacyRefactorLte); err != nil {
				return err
			}
		}

	}

	if o.Levenshtein != nil {

		// query param levenshtein
		var qrLevenshtein float64
		if o.Levenshtein != nil {
			qrLevenshtein = *o.Levenshtein
		}
		qLevenshtein := swag.FormatFloat64(qrLevenshtein)
		if qLevenshtein != "" {
			if err := r.SetQueryParam("levenshtein", qLevenshtein); err != nil {
				return err
			}
		}

	}

	if o.LevenshteinGt != nil {

		// query param levenshtein__gt
		var qrLevenshteinGt float64
		if o.LevenshteinGt != nil {
			qrLevenshteinGt = *o.LevenshteinGt
		}
		qLevenshteinGt := swag.FormatFloat64(qrLevenshteinGt)
		if qLevenshteinGt != "" {
			if err := r.SetQueryParam("levenshtein__gt", qLevenshteinGt); err != nil {
				return err
			}
		}

	}

	if o.LevenshteinGte != nil {

		// query param levenshtein__gte
		var qrLevenshteinGte float64
		if o.LevenshteinGte != nil {
			qrLevenshteinGte = *o.LevenshteinGte
		}
		qLevenshteinGte := swag.FormatFloat64(qrLevenshteinGte)
		if qLevenshteinGte != "" {
			if err := r.SetQueryParam("levenshtein__gte", qLevenshteinGte); err != nil {
				return err
			}
		}

	}

	if o.LevenshteinLt != nil {

		// query param levenshtein__lt
		var qrLevenshteinLt float64
		if o.LevenshteinLt != nil {
			qrLevenshteinLt = *o.LevenshteinLt
		}
		qLevenshteinLt := swag.FormatFloat64(qrLevenshteinLt)
		if qLevenshteinLt != "" {
			if err := r.SetQueryParam("levenshtein__lt", qLevenshteinLt); err != nil {
				return err
			}
		}

	}

	if o.LevenshteinLte != nil {

		// query param levenshtein__lte
		var qrLevenshteinLte float64
		if o.LevenshteinLte != nil {
			qrLevenshteinLte = *o.LevenshteinLte
		}
		qLevenshteinLte := swag.FormatFloat64(qrLevenshteinLte)
		if qLevenshteinLte != "" {
			if err := r.SetQueryParam("levenshtein__lte", qLevenshteinLte); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.LogicalCode != nil {

		// query param logical_code
		var qrLogicalCode float64
		if o.LogicalCode != nil {
			qrLogicalCode = *o.LogicalCode
		}
		qLogicalCode := swag.FormatFloat64(qrLogicalCode)
		if qLogicalCode != "" {
			if err := r.SetQueryParam("logical_code", qLogicalCode); err != nil {
				return err
			}
		}

	}

	if o.LogicalCodeGt != nil {

		// query param logical_code__gt
		var qrLogicalCodeGt float64
		if o.LogicalCodeGt != nil {
			qrLogicalCodeGt = *o.LogicalCodeGt
		}
		qLogicalCodeGt := swag.FormatFloat64(qrLogicalCodeGt)
		if qLogicalCodeGt != "" {
			if err := r.SetQueryParam("logical_code__gt", qLogicalCodeGt); err != nil {
				return err
			}
		}

	}

	if o.LogicalCodeGte != nil {

		// query param logical_code__gte
		var qrLogicalCodeGte float64
		if o.LogicalCodeGte != nil {
			qrLogicalCodeGte = *o.LogicalCodeGte
		}
		qLogicalCodeGte := swag.FormatFloat64(qrLogicalCodeGte)
		if qLogicalCodeGte != "" {
			if err := r.SetQueryParam("logical_code__gte", qLogicalCodeGte); err != nil {
				return err
			}
		}

	}

	if o.LogicalCodeIsnull != nil {

		// query param logical_code__isnull
		var qrLogicalCodeIsnull string
		if o.LogicalCodeIsnull != nil {
			qrLogicalCodeIsnull = *o.LogicalCodeIsnull
		}
		qLogicalCodeIsnull := qrLogicalCodeIsnull
		if qLogicalCodeIsnull != "" {
			if err := r.SetQueryParam("logical_code__isnull", qLogicalCodeIsnull); err != nil {
				return err
			}
		}

	}

	if o.LogicalCodeLt != nil {

		// query param logical_code__lt
		var qrLogicalCodeLt float64
		if o.LogicalCodeLt != nil {
			qrLogicalCodeLt = *o.LogicalCodeLt
		}
		qLogicalCodeLt := swag.FormatFloat64(qrLogicalCodeLt)
		if qLogicalCodeLt != "" {
			if err := r.SetQueryParam("logical_code__lt", qLogicalCodeLt); err != nil {
				return err
			}
		}

	}

	if o.LogicalCodeLte != nil {

		// query param logical_code__lte
		var qrLogicalCodeLte float64
		if o.LogicalCodeLte != nil {
			qrLogicalCodeLte = *o.LogicalCodeLte
		}
		qLogicalCodeLte := swag.FormatFloat64(qrLogicalCodeLte)
		if qLogicalCodeLte != "" {
			if err := r.SetQueryParam("logical_code__lte", qLogicalCodeLte); err != nil {
				return err
			}
		}

	}

	if o.Message != nil {

		// query param message
		var qrMessage string
		if o.Message != nil {
			qrMessage = *o.Message
		}
		qMessage := qrMessage
		if qMessage != "" {
			if err := r.SetQueryParam("message", qMessage); err != nil {
				return err
			}
		}

	}

	if o.MessageIcontains != nil {

		// query param message__icontains
		var qrMessageIcontains string
		if o.MessageIcontains != nil {
			qrMessageIcontains = *o.MessageIcontains
		}
		qMessageIcontains := qrMessageIcontains
		if qMessageIcontains != "" {
			if err := r.SetQueryParam("message__icontains", qMessageIcontains); err != nil {
				return err
			}
		}

	}

	if o.MessageStartswith != nil {

		// query param message__startswith
		var qrMessageStartswith string
		if o.MessageStartswith != nil {
			qrMessageStartswith = *o.MessageStartswith
		}
		qMessageStartswith := qrMessageStartswith
		if qMessageStartswith != "" {
			if err := r.SetQueryParam("message__startswith", qMessageStartswith); err != nil {
				return err
			}
		}

	}

	if o.MultiLineComments != nil {

		// query param multi_line_comments
		var qrMultiLineComments float64
		if o.MultiLineComments != nil {
			qrMultiLineComments = *o.MultiLineComments
		}
		qMultiLineComments := swag.FormatFloat64(qrMultiLineComments)
		if qMultiLineComments != "" {
			if err := r.SetQueryParam("multi_line_comments", qMultiLineComments); err != nil {
				return err
			}
		}

	}

	if o.MultiLineCommentsGt != nil {

		// query param multi_line_comments__gt
		var qrMultiLineCommentsGt float64
		if o.MultiLineCommentsGt != nil {
			qrMultiLineCommentsGt = *o.MultiLineCommentsGt
		}
		qMultiLineCommentsGt := swag.FormatFloat64(qrMultiLineCommentsGt)
		if qMultiLineCommentsGt != "" {
			if err := r.SetQueryParam("multi_line_comments__gt", qMultiLineCommentsGt); err != nil {
				return err
			}
		}

	}

	if o.MultiLineCommentsGte != nil {

		// query param multi_line_comments__gte
		var qrMultiLineCommentsGte float64
		if o.MultiLineCommentsGte != nil {
			qrMultiLineCommentsGte = *o.MultiLineCommentsGte
		}
		qMultiLineCommentsGte := swag.FormatFloat64(qrMultiLineCommentsGte)
		if qMultiLineCommentsGte != "" {
			if err := r.SetQueryParam("multi_line_comments__gte", qMultiLineCommentsGte); err != nil {
				return err
			}
		}

	}

	if o.MultiLineCommentsIsnull != nil {

		// query param multi_line_comments__isnull
		var qrMultiLineCommentsIsnull string
		if o.MultiLineCommentsIsnull != nil {
			qrMultiLineCommentsIsnull = *o.MultiLineCommentsIsnull
		}
		qMultiLineCommentsIsnull := qrMultiLineCommentsIsnull
		if qMultiLineCommentsIsnull != "" {
			if err := r.SetQueryParam("multi_line_comments__isnull", qMultiLineCommentsIsnull); err != nil {
				return err
			}
		}

	}

	if o.MultiLineCommentsLt != nil {

		// query param multi_line_comments__lt
		var qrMultiLineCommentsLt float64
		if o.MultiLineCommentsLt != nil {
			qrMultiLineCommentsLt = *o.MultiLineCommentsLt
		}
		qMultiLineCommentsLt := swag.FormatFloat64(qrMultiLineCommentsLt)
		if qMultiLineCommentsLt != "" {
			if err := r.SetQueryParam("multi_line_comments__lt", qMultiLineCommentsLt); err != nil {
				return err
			}
		}

	}

	if o.MultiLineCommentsLte != nil {

		// query param multi_line_comments__lte
		var qrMultiLineCommentsLte float64
		if o.MultiLineCommentsLte != nil {
			qrMultiLineCommentsLte = *o.MultiLineCommentsLte
		}
		qMultiLineCommentsLte := swag.FormatFloat64(qrMultiLineCommentsLte)
		if qMultiLineCommentsLte != "" {
			if err := r.SetQueryParam("multi_line_comments__lte", qMultiLineCommentsLte); err != nil {
				return err
			}
		}

	}

	if o.NewWork != nil {

		// query param new_work
		var qrNewWork float64
		if o.NewWork != nil {
			qrNewWork = *o.NewWork
		}
		qNewWork := swag.FormatFloat64(qrNewWork)
		if qNewWork != "" {
			if err := r.SetQueryParam("new_work", qNewWork); err != nil {
				return err
			}
		}

	}

	if o.NewWorkGt != nil {

		// query param new_work__gt
		var qrNewWorkGt float64
		if o.NewWorkGt != nil {
			qrNewWorkGt = *o.NewWorkGt
		}
		qNewWorkGt := swag.FormatFloat64(qrNewWorkGt)
		if qNewWorkGt != "" {
			if err := r.SetQueryParam("new_work__gt", qNewWorkGt); err != nil {
				return err
			}
		}

	}

	if o.NewWorkGte != nil {

		// query param new_work__gte
		var qrNewWorkGte float64
		if o.NewWorkGte != nil {
			qrNewWorkGte = *o.NewWorkGte
		}
		qNewWorkGte := swag.FormatFloat64(qrNewWorkGte)
		if qNewWorkGte != "" {
			if err := r.SetQueryParam("new_work__gte", qNewWorkGte); err != nil {
				return err
			}
		}

	}

	if o.NewWorkLt != nil {

		// query param new_work__lt
		var qrNewWorkLt float64
		if o.NewWorkLt != nil {
			qrNewWorkLt = *o.NewWorkLt
		}
		qNewWorkLt := swag.FormatFloat64(qrNewWorkLt)
		if qNewWorkLt != "" {
			if err := r.SetQueryParam("new_work__lt", qNewWorkLt); err != nil {
				return err
			}
		}

	}

	if o.NewWorkLte != nil {

		// query param new_work__lte
		var qrNewWorkLte float64
		if o.NewWorkLte != nil {
			qrNewWorkLte = *o.NewWorkLte
		}
		qNewWorkLte := swag.FormatFloat64(qrNewWorkLte)
		if qNewWorkLte != "" {
			if err := r.SetQueryParam("new_work__lte", qNewWorkLte); err != nil {
				return err
			}
		}

	}

	if o.NormalizeAuthors != nil {

		// query param normalize_authors
		var qrNormalizeAuthors string
		if o.NormalizeAuthors != nil {
			qrNormalizeAuthors = *o.NormalizeAuthors
		}
		qNormalizeAuthors := qrNormalizeAuthors
		if qNormalizeAuthors != "" {
			if err := r.SetQueryParam("normalize_authors", qNormalizeAuthors); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.OutlierReason != nil {

		// query param outlier_reason
		var qrOutlierReason float64
		if o.OutlierReason != nil {
			qrOutlierReason = *o.OutlierReason
		}
		qOutlierReason := swag.FormatFloat64(qrOutlierReason)
		if qOutlierReason != "" {
			if err := r.SetQueryParam("outlier_reason", qOutlierReason); err != nil {
				return err
			}
		}

	}

	if o.OutlierReasonIn != nil {

		// query param outlier_reason__in
		var qrOutlierReasonIn float64
		if o.OutlierReasonIn != nil {
			qrOutlierReasonIn = *o.OutlierReasonIn
		}
		qOutlierReasonIn := swag.FormatFloat64(qrOutlierReasonIn)
		if qOutlierReasonIn != "" {
			if err := r.SetQueryParam("outlier_reason__in", qOutlierReasonIn); err != nil {
				return err
			}
		}

	}

	if o.OutlierReasonIsnull != nil {

		// query param outlier_reason__isnull
		var qrOutlierReasonIsnull string
		if o.OutlierReasonIsnull != nil {
			qrOutlierReasonIsnull = *o.OutlierReasonIsnull
		}
		qOutlierReasonIsnull := qrOutlierReasonIsnull
		if qOutlierReasonIsnull != "" {
			if err := r.SetQueryParam("outlier_reason__isnull", qOutlierReasonIsnull); err != nil {
				return err
			}
		}

	}

	if o.Partition != nil {

		// query param partition
		var qrPartition float64
		if o.Partition != nil {
			qrPartition = *o.Partition
		}
		qPartition := swag.FormatFloat64(qrPartition)
		if qPartition != "" {
			if err := r.SetQueryParam("partition", qPartition); err != nil {
				return err
			}
		}

	}

	if o.PartitionSize != nil {

		// query param partition_size
		var qrPartitionSize float64
		if o.PartitionSize != nil {
			qrPartitionSize = *o.PartitionSize
		}
		qPartitionSize := swag.FormatFloat64(qrPartitionSize)
		if qPartitionSize != "" {
			if err := r.SetQueryParam("partition_size", qPartitionSize); err != nil {
				return err
			}
		}

	}

	if o.PullRequestFollowOnID != nil {

		// query param pull_request_follow_on_id
		var qrPullRequestFollowOnID float64
		if o.PullRequestFollowOnID != nil {
			qrPullRequestFollowOnID = *o.PullRequestFollowOnID
		}
		qPullRequestFollowOnID := swag.FormatFloat64(qrPullRequestFollowOnID)
		if qPullRequestFollowOnID != "" {
			if err := r.SetQueryParam("pull_request_follow_on_id", qPullRequestFollowOnID); err != nil {
				return err
			}
		}

	}

	if o.PullRequestID != nil {

		// query param pull_request_id
		var qrPullRequestID float64
		if o.PullRequestID != nil {
			qrPullRequestID = *o.PullRequestID
		}
		qPullRequestID := swag.FormatFloat64(qrPullRequestID)
		if qPullRequestID != "" {
			if err := r.SetQueryParam("pull_request_id", qPullRequestID); err != nil {
				return err
			}
		}

	}

	if o.RemoveExcluded != nil {

		// query param remove_excluded
		var qrRemoveExcluded string
		if o.RemoveExcluded != nil {
			qrRemoveExcluded = *o.RemoveExcluded
		}
		qRemoveExcluded := qrRemoveExcluded
		if qRemoveExcluded != "" {
			if err := r.SetQueryParam("remove_excluded", qRemoveExcluded); err != nil {
				return err
			}
		}

	}

	if o.Repo != nil {

		// query param repo
		var qrRepo string
		if o.Repo != nil {
			qrRepo = *o.Repo
		}
		qRepo := qrRepo
		if qRepo != "" {
			if err := r.SetQueryParam("repo", qRepo); err != nil {
				return err
			}
		}

	}

	if o.RepoID != nil {

		// query param repo_id
		var qrRepoID string
		if o.RepoID != nil {
			qrRepoID = *o.RepoID
		}
		qRepoID := qrRepoID
		if qRepoID != "" {
			if err := r.SetQueryParam("repo_id", qRepoID); err != nil {
				return err
			}
		}

	}

	if o.RepoIDIn != nil {

		// query param repo_id__in
		var qrRepoIDIn string
		if o.RepoIDIn != nil {
			qrRepoIDIn = *o.RepoIDIn
		}
		qRepoIDIn := qrRepoIDIn
		if qRepoIDIn != "" {
			if err := r.SetQueryParam("repo_id__in", qRepoIDIn); err != nil {
				return err
			}
		}

	}

	if o.RepoTagsIn != nil {

		// query param repo_tags__in
		var qrRepoTagsIn string
		if o.RepoTagsIn != nil {
			qrRepoTagsIn = *o.RepoTagsIn
		}
		qRepoTagsIn := qrRepoTagsIn
		if qRepoTagsIn != "" {
			if err := r.SetQueryParam("repo_tags__in", qRepoTagsIn); err != nil {
				return err
			}
		}

	}

	if o.Risk != nil {

		// query param risk
		var qrRisk float64
		if o.Risk != nil {
			qrRisk = *o.Risk
		}
		qRisk := swag.FormatFloat64(qrRisk)
		if qRisk != "" {
			if err := r.SetQueryParam("risk", qRisk); err != nil {
				return err
			}
		}

	}

	if o.RiskGt != nil {

		// query param risk__gt
		var qrRiskGt float64
		if o.RiskGt != nil {
			qrRiskGt = *o.RiskGt
		}
		qRiskGt := swag.FormatFloat64(qrRiskGt)
		if qRiskGt != "" {
			if err := r.SetQueryParam("risk__gt", qRiskGt); err != nil {
				return err
			}
		}

	}

	if o.RiskGte != nil {

		// query param risk__gte
		var qrRiskGte float64
		if o.RiskGte != nil {
			qrRiskGte = *o.RiskGte
		}
		qRiskGte := swag.FormatFloat64(qrRiskGte)
		if qRiskGte != "" {
			if err := r.SetQueryParam("risk__gte", qRiskGte); err != nil {
				return err
			}
		}

	}

	if o.RiskLt != nil {

		// query param risk__lt
		var qrRiskLt float64
		if o.RiskLt != nil {
			qrRiskLt = *o.RiskLt
		}
		qRiskLt := swag.FormatFloat64(qrRiskLt)
		if qRiskLt != "" {
			if err := r.SetQueryParam("risk__lt", qRiskLt); err != nil {
				return err
			}
		}

	}

	if o.RiskLte != nil {

		// query param risk__lte
		var qrRiskLte float64
		if o.RiskLte != nil {
			qrRiskLte = *o.RiskLte
		}
		qRiskLte := swag.FormatFloat64(qrRiskLte)
		if qRiskLte != "" {
			if err := r.SetQueryParam("risk__lte", qRiskLte); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.SingleLineComments != nil {

		// query param single_line_comments
		var qrSingleLineComments float64
		if o.SingleLineComments != nil {
			qrSingleLineComments = *o.SingleLineComments
		}
		qSingleLineComments := swag.FormatFloat64(qrSingleLineComments)
		if qSingleLineComments != "" {
			if err := r.SetQueryParam("single_line_comments", qSingleLineComments); err != nil {
				return err
			}
		}

	}

	if o.SingleLineCommentsGt != nil {

		// query param single_line_comments__gt
		var qrSingleLineCommentsGt float64
		if o.SingleLineCommentsGt != nil {
			qrSingleLineCommentsGt = *o.SingleLineCommentsGt
		}
		qSingleLineCommentsGt := swag.FormatFloat64(qrSingleLineCommentsGt)
		if qSingleLineCommentsGt != "" {
			if err := r.SetQueryParam("single_line_comments__gt", qSingleLineCommentsGt); err != nil {
				return err
			}
		}

	}

	if o.SingleLineCommentsGte != nil {

		// query param single_line_comments__gte
		var qrSingleLineCommentsGte float64
		if o.SingleLineCommentsGte != nil {
			qrSingleLineCommentsGte = *o.SingleLineCommentsGte
		}
		qSingleLineCommentsGte := swag.FormatFloat64(qrSingleLineCommentsGte)
		if qSingleLineCommentsGte != "" {
			if err := r.SetQueryParam("single_line_comments__gte", qSingleLineCommentsGte); err != nil {
				return err
			}
		}

	}

	if o.SingleLineCommentsIsnull != nil {

		// query param single_line_comments__isnull
		var qrSingleLineCommentsIsnull string
		if o.SingleLineCommentsIsnull != nil {
			qrSingleLineCommentsIsnull = *o.SingleLineCommentsIsnull
		}
		qSingleLineCommentsIsnull := qrSingleLineCommentsIsnull
		if qSingleLineCommentsIsnull != "" {
			if err := r.SetQueryParam("single_line_comments__isnull", qSingleLineCommentsIsnull); err != nil {
				return err
			}
		}

	}

	if o.SingleLineCommentsLt != nil {

		// query param single_line_comments__lt
		var qrSingleLineCommentsLt float64
		if o.SingleLineCommentsLt != nil {
			qrSingleLineCommentsLt = *o.SingleLineCommentsLt
		}
		qSingleLineCommentsLt := swag.FormatFloat64(qrSingleLineCommentsLt)
		if qSingleLineCommentsLt != "" {
			if err := r.SetQueryParam("single_line_comments__lt", qSingleLineCommentsLt); err != nil {
				return err
			}
		}

	}

	if o.SingleLineCommentsLte != nil {

		// query param single_line_comments__lte
		var qrSingleLineCommentsLte float64
		if o.SingleLineCommentsLte != nil {
			qrSingleLineCommentsLte = *o.SingleLineCommentsLte
		}
		qSingleLineCommentsLte := swag.FormatFloat64(qrSingleLineCommentsLte)
		if qSingleLineCommentsLte != "" {
			if err := r.SetQueryParam("single_line_comments__lte", qSingleLineCommentsLte); err != nil {
				return err
			}
		}

	}

	if o.SmartDedupe != nil {

		// query param smart_dedupe
		var qrSmartDedupe string
		if o.SmartDedupe != nil {
			qrSmartDedupe = *o.SmartDedupe
		}
		qSmartDedupe := qrSmartDedupe
		if qSmartDedupe != "" {
			if err := r.SetQueryParam("smart_dedupe", qSmartDedupe); err != nil {
				return err
			}
		}

	}

	if o.TechnologyLabels != nil {

		// query param technology_labels
		var qrTechnologyLabels string
		if o.TechnologyLabels != nil {
			qrTechnologyLabels = *o.TechnologyLabels
		}
		qTechnologyLabels := qrTechnologyLabels
		if qTechnologyLabels != "" {
			if err := r.SetQueryParam("technology_labels", qTechnologyLabels); err != nil {
				return err
			}
		}

	}

	if o.UserAlias != nil {

		// query param user_alias
		var qrUserAlias float64
		if o.UserAlias != nil {
			qrUserAlias = *o.UserAlias
		}
		qUserAlias := swag.FormatFloat64(qrUserAlias)
		if qUserAlias != "" {
			if err := r.SetQueryParam("user_alias", qUserAlias); err != nil {
				return err
			}
		}

	}

	if o.UserAliasApexUserEmail != nil {

		// query param user_alias__apex_user__email
		var qrUserAliasApexUserEmail string
		if o.UserAliasApexUserEmail != nil {
			qrUserAliasApexUserEmail = *o.UserAliasApexUserEmail
		}
		qUserAliasApexUserEmail := qrUserAliasApexUserEmail
		if qUserAliasApexUserEmail != "" {
			if err := r.SetQueryParam("user_alias__apex_user__email", qUserAliasApexUserEmail); err != nil {
				return err
			}
		}

	}

	if o.UserAliasApexUserName != nil {

		// query param user_alias__apex_user__name
		var qrUserAliasApexUserName string
		if o.UserAliasApexUserName != nil {
			qrUserAliasApexUserName = *o.UserAliasApexUserName
		}
		qUserAliasApexUserName := qrUserAliasApexUserName
		if qUserAliasApexUserName != "" {
			if err := r.SetQueryParam("user_alias__apex_user__name", qUserAliasApexUserName); err != nil {
				return err
			}
		}

	}

	if o.UserAliasID != nil {

		// query param user_alias_id
		var qrUserAliasID string
		if o.UserAliasID != nil {
			qrUserAliasID = *o.UserAliasID
		}
		qUserAliasID := qrUserAliasID
		if qUserAliasID != "" {
			if err := r.SetQueryParam("user_alias_id", qUserAliasID); err != nil {
				return err
			}
		}

	}

	if o.UserAliasIDIn != nil {

		// query param user_alias_id__in
		var qrUserAliasIDIn string
		if o.UserAliasIDIn != nil {
			qrUserAliasIDIn = *o.UserAliasIDIn
		}
		qUserAliasIDIn := qrUserAliasIDIn
		if qUserAliasIDIn != "" {
			if err := r.SetQueryParam("user_alias_id__in", qUserAliasIDIn); err != nil {
				return err
			}
		}

	}

	if o.WhitespaceAndPunctuation != nil {

		// query param whitespace_and_punctuation
		var qrWhitespaceAndPunctuation float64
		if o.WhitespaceAndPunctuation != nil {
			qrWhitespaceAndPunctuation = *o.WhitespaceAndPunctuation
		}
		qWhitespaceAndPunctuation := swag.FormatFloat64(qrWhitespaceAndPunctuation)
		if qWhitespaceAndPunctuation != "" {
			if err := r.SetQueryParam("whitespace_and_punctuation", qWhitespaceAndPunctuation); err != nil {
				return err
			}
		}

	}

	if o.WhitespaceAndPunctuationGt != nil {

		// query param whitespace_and_punctuation__gt
		var qrWhitespaceAndPunctuationGt float64
		if o.WhitespaceAndPunctuationGt != nil {
			qrWhitespaceAndPunctuationGt = *o.WhitespaceAndPunctuationGt
		}
		qWhitespaceAndPunctuationGt := swag.FormatFloat64(qrWhitespaceAndPunctuationGt)
		if qWhitespaceAndPunctuationGt != "" {
			if err := r.SetQueryParam("whitespace_and_punctuation__gt", qWhitespaceAndPunctuationGt); err != nil {
				return err
			}
		}

	}

	if o.WhitespaceAndPunctuationGte != nil {

		// query param whitespace_and_punctuation__gte
		var qrWhitespaceAndPunctuationGte float64
		if o.WhitespaceAndPunctuationGte != nil {
			qrWhitespaceAndPunctuationGte = *o.WhitespaceAndPunctuationGte
		}
		qWhitespaceAndPunctuationGte := swag.FormatFloat64(qrWhitespaceAndPunctuationGte)
		if qWhitespaceAndPunctuationGte != "" {
			if err := r.SetQueryParam("whitespace_and_punctuation__gte", qWhitespaceAndPunctuationGte); err != nil {
				return err
			}
		}

	}

	if o.WhitespaceAndPunctuationIsnull != nil {

		// query param whitespace_and_punctuation__isnull
		var qrWhitespaceAndPunctuationIsnull string
		if o.WhitespaceAndPunctuationIsnull != nil {
			qrWhitespaceAndPunctuationIsnull = *o.WhitespaceAndPunctuationIsnull
		}
		qWhitespaceAndPunctuationIsnull := qrWhitespaceAndPunctuationIsnull
		if qWhitespaceAndPunctuationIsnull != "" {
			if err := r.SetQueryParam("whitespace_and_punctuation__isnull", qWhitespaceAndPunctuationIsnull); err != nil {
				return err
			}
		}

	}

	if o.WhitespaceAndPunctuationLt != nil {

		// query param whitespace_and_punctuation__lt
		var qrWhitespaceAndPunctuationLt float64
		if o.WhitespaceAndPunctuationLt != nil {
			qrWhitespaceAndPunctuationLt = *o.WhitespaceAndPunctuationLt
		}
		qWhitespaceAndPunctuationLt := swag.FormatFloat64(qrWhitespaceAndPunctuationLt)
		if qWhitespaceAndPunctuationLt != "" {
			if err := r.SetQueryParam("whitespace_and_punctuation__lt", qWhitespaceAndPunctuationLt); err != nil {
				return err
			}
		}

	}

	if o.WhitespaceAndPunctuationLte != nil {

		// query param whitespace_and_punctuation__lte
		var qrWhitespaceAndPunctuationLte float64
		if o.WhitespaceAndPunctuationLte != nil {
			qrWhitespaceAndPunctuationLte = *o.WhitespaceAndPunctuationLte
		}
		qWhitespaceAndPunctuationLte := swag.FormatFloat64(qrWhitespaceAndPunctuationLte)
		if qWhitespaceAndPunctuationLte != "" {
			if err := r.SetQueryParam("whitespace_and_punctuation__lte", qWhitespaceAndPunctuationLte); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
