// Code generated by go-swagger; DO NOT EDIT.

package tickets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTicketsListParams creates a new TicketsListParams object
// with the default values initialized.
func NewTicketsListParams() *TicketsListParams {
	var ()
	return &TicketsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTicketsListParamsWithTimeout creates a new TicketsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTicketsListParamsWithTimeout(timeout time.Duration) *TicketsListParams {
	var ()
	return &TicketsListParams{

		timeout: timeout,
	}
}

// NewTicketsListParamsWithContext creates a new TicketsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewTicketsListParamsWithContext(ctx context.Context) *TicketsListParams {
	var ()
	return &TicketsListParams{

		Context: ctx,
	}
}

// NewTicketsListParamsWithHTTPClient creates a new TicketsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTicketsListParamsWithHTTPClient(client *http.Client) *TicketsListParams {
	var ()
	return &TicketsListParams{
		HTTPClient: client,
	}
}

/*TicketsListParams contains all the parameters to send to the API endpoint
for the tickets list operation typically these are written to a http.Request
*/
type TicketsListParams struct {

	/*Assignees
	  Filter-traversable object

	*/
	Assignees *string
	/*Body
	  Records containing string in body

	*/
	Body *string
	/*BodyIcontains
	  Records containing case insensitive string in body

	*/
	BodyIcontains *string
	/*BodyStartswith
	  body starts with case sensitive value

	*/
	BodyStartswith *string
	/*ClosedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAt *string
	/*ClosedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAtGt *string
	/*ClosedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAtGte *string
	/*ClosedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAtLt *string
	/*ClosedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAtLte *string
	/*Comments
	  Filter-traversable object

	*/
	Comments *string
	/*CreatedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAt *string
	/*CreatedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGt *string
	/*CreatedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGte *string
	/*CreatedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLt *string
	/*CreatedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLte *string
	/*CreatedByID*/
	CreatedByID *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Number
	  Identifier of the ticket

	*/
	Number *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `title`, `number`, `state`, `vendor`, `closed_at`, `created_by_id`, `project_id`, `parent_number`, `created_at`, `integration__name`, `added_by__name`, `updated_at`

	*/
	Ordering *string
	/*ParentNumber
	  Parent identifier of the ticket

	*/
	ParentNumber *float64
	/*Project
	  Filter-traversable object

	*/
	Project *string
	/*ProjectID
	  Records matching the provided id

	*/
	ProjectID *float64
	/*ProjectIDIn
	  Match on project_id in a comma separated list

	*/
	ProjectIDIn *string
	/*Search
	  A search term.

	*/
	Search *string
	/*State
	  Records matching state name

	*/
	State *string
	/*StateIn
	  Records matching state name in a set

	*/
	StateIn *string
	/*Title
	  Records containing string in title

	*/
	Title *string
	/*TitleIcontains
	  Records containing case insensitive string in title

	*/
	TitleIcontains *string
	/*TitleStartswith
	  Title starts with case sensitive value

	*/
	TitleStartswith *string
	/*Vendor*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the tickets list params
func (o *TicketsListParams) WithTimeout(timeout time.Duration) *TicketsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tickets list params
func (o *TicketsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tickets list params
func (o *TicketsListParams) WithContext(ctx context.Context) *TicketsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tickets list params
func (o *TicketsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tickets list params
func (o *TicketsListParams) WithHTTPClient(client *http.Client) *TicketsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tickets list params
func (o *TicketsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssignees adds the assignees to the tickets list params
func (o *TicketsListParams) WithAssignees(assignees *string) *TicketsListParams {
	o.SetAssignees(assignees)
	return o
}

// SetAssignees adds the assignees to the tickets list params
func (o *TicketsListParams) SetAssignees(assignees *string) {
	o.Assignees = assignees
}

// WithBody adds the body to the tickets list params
func (o *TicketsListParams) WithBody(body *string) *TicketsListParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the tickets list params
func (o *TicketsListParams) SetBody(body *string) {
	o.Body = body
}

// WithBodyIcontains adds the bodyIcontains to the tickets list params
func (o *TicketsListParams) WithBodyIcontains(bodyIcontains *string) *TicketsListParams {
	o.SetBodyIcontains(bodyIcontains)
	return o
}

// SetBodyIcontains adds the bodyIcontains to the tickets list params
func (o *TicketsListParams) SetBodyIcontains(bodyIcontains *string) {
	o.BodyIcontains = bodyIcontains
}

// WithBodyStartswith adds the bodyStartswith to the tickets list params
func (o *TicketsListParams) WithBodyStartswith(bodyStartswith *string) *TicketsListParams {
	o.SetBodyStartswith(bodyStartswith)
	return o
}

// SetBodyStartswith adds the bodyStartswith to the tickets list params
func (o *TicketsListParams) SetBodyStartswith(bodyStartswith *string) {
	o.BodyStartswith = bodyStartswith
}

// WithClosedAt adds the closedAt to the tickets list params
func (o *TicketsListParams) WithClosedAt(closedAt *string) *TicketsListParams {
	o.SetClosedAt(closedAt)
	return o
}

// SetClosedAt adds the closedAt to the tickets list params
func (o *TicketsListParams) SetClosedAt(closedAt *string) {
	o.ClosedAt = closedAt
}

// WithClosedAtGt adds the closedAtGt to the tickets list params
func (o *TicketsListParams) WithClosedAtGt(closedAtGt *string) *TicketsListParams {
	o.SetClosedAtGt(closedAtGt)
	return o
}

// SetClosedAtGt adds the closedAtGt to the tickets list params
func (o *TicketsListParams) SetClosedAtGt(closedAtGt *string) {
	o.ClosedAtGt = closedAtGt
}

// WithClosedAtGte adds the closedAtGte to the tickets list params
func (o *TicketsListParams) WithClosedAtGte(closedAtGte *string) *TicketsListParams {
	o.SetClosedAtGte(closedAtGte)
	return o
}

// SetClosedAtGte adds the closedAtGte to the tickets list params
func (o *TicketsListParams) SetClosedAtGte(closedAtGte *string) {
	o.ClosedAtGte = closedAtGte
}

// WithClosedAtLt adds the closedAtLt to the tickets list params
func (o *TicketsListParams) WithClosedAtLt(closedAtLt *string) *TicketsListParams {
	o.SetClosedAtLt(closedAtLt)
	return o
}

// SetClosedAtLt adds the closedAtLt to the tickets list params
func (o *TicketsListParams) SetClosedAtLt(closedAtLt *string) {
	o.ClosedAtLt = closedAtLt
}

// WithClosedAtLte adds the closedAtLte to the tickets list params
func (o *TicketsListParams) WithClosedAtLte(closedAtLte *string) *TicketsListParams {
	o.SetClosedAtLte(closedAtLte)
	return o
}

// SetClosedAtLte adds the closedAtLte to the tickets list params
func (o *TicketsListParams) SetClosedAtLte(closedAtLte *string) {
	o.ClosedAtLte = closedAtLte
}

// WithComments adds the comments to the tickets list params
func (o *TicketsListParams) WithComments(comments *string) *TicketsListParams {
	o.SetComments(comments)
	return o
}

// SetComments adds the comments to the tickets list params
func (o *TicketsListParams) SetComments(comments *string) {
	o.Comments = comments
}

// WithCreatedAt adds the createdAt to the tickets list params
func (o *TicketsListParams) WithCreatedAt(createdAt *string) *TicketsListParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the tickets list params
func (o *TicketsListParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedAtGt adds the createdAtGt to the tickets list params
func (o *TicketsListParams) WithCreatedAtGt(createdAtGt *string) *TicketsListParams {
	o.SetCreatedAtGt(createdAtGt)
	return o
}

// SetCreatedAtGt adds the createdAtGt to the tickets list params
func (o *TicketsListParams) SetCreatedAtGt(createdAtGt *string) {
	o.CreatedAtGt = createdAtGt
}

// WithCreatedAtGte adds the createdAtGte to the tickets list params
func (o *TicketsListParams) WithCreatedAtGte(createdAtGte *string) *TicketsListParams {
	o.SetCreatedAtGte(createdAtGte)
	return o
}

// SetCreatedAtGte adds the createdAtGte to the tickets list params
func (o *TicketsListParams) SetCreatedAtGte(createdAtGte *string) {
	o.CreatedAtGte = createdAtGte
}

// WithCreatedAtLt adds the createdAtLt to the tickets list params
func (o *TicketsListParams) WithCreatedAtLt(createdAtLt *string) *TicketsListParams {
	o.SetCreatedAtLt(createdAtLt)
	return o
}

// SetCreatedAtLt adds the createdAtLt to the tickets list params
func (o *TicketsListParams) SetCreatedAtLt(createdAtLt *string) {
	o.CreatedAtLt = createdAtLt
}

// WithCreatedAtLte adds the createdAtLte to the tickets list params
func (o *TicketsListParams) WithCreatedAtLte(createdAtLte *string) *TicketsListParams {
	o.SetCreatedAtLte(createdAtLte)
	return o
}

// SetCreatedAtLte adds the createdAtLte to the tickets list params
func (o *TicketsListParams) SetCreatedAtLte(createdAtLte *string) {
	o.CreatedAtLte = createdAtLte
}

// WithCreatedByID adds the createdByID to the tickets list params
func (o *TicketsListParams) WithCreatedByID(createdByID *string) *TicketsListParams {
	o.SetCreatedByID(createdByID)
	return o
}

// SetCreatedByID adds the createdById to the tickets list params
func (o *TicketsListParams) SetCreatedByID(createdByID *string) {
	o.CreatedByID = createdByID
}

// WithFilters adds the filters to the tickets list params
func (o *TicketsListParams) WithFilters(filters *string) *TicketsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the tickets list params
func (o *TicketsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the tickets list params
func (o *TicketsListParams) WithID(id *float64) *TicketsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the tickets list params
func (o *TicketsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the tickets list params
func (o *TicketsListParams) WithIDIn(iDIn *float64) *TicketsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the tickets list params
func (o *TicketsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithLimit adds the limit to the tickets list params
func (o *TicketsListParams) WithLimit(limit *int64) *TicketsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the tickets list params
func (o *TicketsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNumber adds the number to the tickets list params
func (o *TicketsListParams) WithNumber(number *string) *TicketsListParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the tickets list params
func (o *TicketsListParams) SetNumber(number *string) {
	o.Number = number
}

// WithOffset adds the offset to the tickets list params
func (o *TicketsListParams) WithOffset(offset *int64) *TicketsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the tickets list params
func (o *TicketsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the tickets list params
func (o *TicketsListParams) WithOrdering(ordering *string) *TicketsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the tickets list params
func (o *TicketsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithParentNumber adds the parentNumber to the tickets list params
func (o *TicketsListParams) WithParentNumber(parentNumber *float64) *TicketsListParams {
	o.SetParentNumber(parentNumber)
	return o
}

// SetParentNumber adds the parentNumber to the tickets list params
func (o *TicketsListParams) SetParentNumber(parentNumber *float64) {
	o.ParentNumber = parentNumber
}

// WithProject adds the project to the tickets list params
func (o *TicketsListParams) WithProject(project *string) *TicketsListParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the tickets list params
func (o *TicketsListParams) SetProject(project *string) {
	o.Project = project
}

// WithProjectID adds the projectID to the tickets list params
func (o *TicketsListParams) WithProjectID(projectID *float64) *TicketsListParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the tickets list params
func (o *TicketsListParams) SetProjectID(projectID *float64) {
	o.ProjectID = projectID
}

// WithProjectIDIn adds the projectIDIn to the tickets list params
func (o *TicketsListParams) WithProjectIDIn(projectIDIn *string) *TicketsListParams {
	o.SetProjectIDIn(projectIDIn)
	return o
}

// SetProjectIDIn adds the projectIdIn to the tickets list params
func (o *TicketsListParams) SetProjectIDIn(projectIDIn *string) {
	o.ProjectIDIn = projectIDIn
}

// WithSearch adds the search to the tickets list params
func (o *TicketsListParams) WithSearch(search *string) *TicketsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the tickets list params
func (o *TicketsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithState adds the state to the tickets list params
func (o *TicketsListParams) WithState(state *string) *TicketsListParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the tickets list params
func (o *TicketsListParams) SetState(state *string) {
	o.State = state
}

// WithStateIn adds the stateIn to the tickets list params
func (o *TicketsListParams) WithStateIn(stateIn *string) *TicketsListParams {
	o.SetStateIn(stateIn)
	return o
}

// SetStateIn adds the stateIn to the tickets list params
func (o *TicketsListParams) SetStateIn(stateIn *string) {
	o.StateIn = stateIn
}

// WithTitle adds the title to the tickets list params
func (o *TicketsListParams) WithTitle(title *string) *TicketsListParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the tickets list params
func (o *TicketsListParams) SetTitle(title *string) {
	o.Title = title
}

// WithTitleIcontains adds the titleIcontains to the tickets list params
func (o *TicketsListParams) WithTitleIcontains(titleIcontains *string) *TicketsListParams {
	o.SetTitleIcontains(titleIcontains)
	return o
}

// SetTitleIcontains adds the titleIcontains to the tickets list params
func (o *TicketsListParams) SetTitleIcontains(titleIcontains *string) {
	o.TitleIcontains = titleIcontains
}

// WithTitleStartswith adds the titleStartswith to the tickets list params
func (o *TicketsListParams) WithTitleStartswith(titleStartswith *string) *TicketsListParams {
	o.SetTitleStartswith(titleStartswith)
	return o
}

// SetTitleStartswith adds the titleStartswith to the tickets list params
func (o *TicketsListParams) SetTitleStartswith(titleStartswith *string) {
	o.TitleStartswith = titleStartswith
}

// WithVendor adds the vendor to the tickets list params
func (o *TicketsListParams) WithVendor(vendor *string) *TicketsListParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the tickets list params
func (o *TicketsListParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *TicketsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Assignees != nil {

		// query param assignees
		var qrAssignees string
		if o.Assignees != nil {
			qrAssignees = *o.Assignees
		}
		qAssignees := qrAssignees
		if qAssignees != "" {
			if err := r.SetQueryParam("assignees", qAssignees); err != nil {
				return err
			}
		}

	}

	if o.Body != nil {

		// query param body
		var qrBody string
		if o.Body != nil {
			qrBody = *o.Body
		}
		qBody := qrBody
		if qBody != "" {
			if err := r.SetQueryParam("body", qBody); err != nil {
				return err
			}
		}

	}

	if o.BodyIcontains != nil {

		// query param body__icontains
		var qrBodyIcontains string
		if o.BodyIcontains != nil {
			qrBodyIcontains = *o.BodyIcontains
		}
		qBodyIcontains := qrBodyIcontains
		if qBodyIcontains != "" {
			if err := r.SetQueryParam("body__icontains", qBodyIcontains); err != nil {
				return err
			}
		}

	}

	if o.BodyStartswith != nil {

		// query param body__startswith
		var qrBodyStartswith string
		if o.BodyStartswith != nil {
			qrBodyStartswith = *o.BodyStartswith
		}
		qBodyStartswith := qrBodyStartswith
		if qBodyStartswith != "" {
			if err := r.SetQueryParam("body__startswith", qBodyStartswith); err != nil {
				return err
			}
		}

	}

	if o.ClosedAt != nil {

		// query param closed_at
		var qrClosedAt string
		if o.ClosedAt != nil {
			qrClosedAt = *o.ClosedAt
		}
		qClosedAt := qrClosedAt
		if qClosedAt != "" {
			if err := r.SetQueryParam("closed_at", qClosedAt); err != nil {
				return err
			}
		}

	}

	if o.ClosedAtGt != nil {

		// query param closed_at__gt
		var qrClosedAtGt string
		if o.ClosedAtGt != nil {
			qrClosedAtGt = *o.ClosedAtGt
		}
		qClosedAtGt := qrClosedAtGt
		if qClosedAtGt != "" {
			if err := r.SetQueryParam("closed_at__gt", qClosedAtGt); err != nil {
				return err
			}
		}

	}

	if o.ClosedAtGte != nil {

		// query param closed_at__gte
		var qrClosedAtGte string
		if o.ClosedAtGte != nil {
			qrClosedAtGte = *o.ClosedAtGte
		}
		qClosedAtGte := qrClosedAtGte
		if qClosedAtGte != "" {
			if err := r.SetQueryParam("closed_at__gte", qClosedAtGte); err != nil {
				return err
			}
		}

	}

	if o.ClosedAtLt != nil {

		// query param closed_at__lt
		var qrClosedAtLt string
		if o.ClosedAtLt != nil {
			qrClosedAtLt = *o.ClosedAtLt
		}
		qClosedAtLt := qrClosedAtLt
		if qClosedAtLt != "" {
			if err := r.SetQueryParam("closed_at__lt", qClosedAtLt); err != nil {
				return err
			}
		}

	}

	if o.ClosedAtLte != nil {

		// query param closed_at__lte
		var qrClosedAtLte string
		if o.ClosedAtLte != nil {
			qrClosedAtLte = *o.ClosedAtLte
		}
		qClosedAtLte := qrClosedAtLte
		if qClosedAtLte != "" {
			if err := r.SetQueryParam("closed_at__lte", qClosedAtLte); err != nil {
				return err
			}
		}

	}

	if o.Comments != nil {

		// query param comments
		var qrComments string
		if o.Comments != nil {
			qrComments = *o.Comments
		}
		qComments := qrComments
		if qComments != "" {
			if err := r.SetQueryParam("comments", qComments); err != nil {
				return err
			}
		}

	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string
		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {
			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGt != nil {

		// query param created_at__gt
		var qrCreatedAtGt string
		if o.CreatedAtGt != nil {
			qrCreatedAtGt = *o.CreatedAtGt
		}
		qCreatedAtGt := qrCreatedAtGt
		if qCreatedAtGt != "" {
			if err := r.SetQueryParam("created_at__gt", qCreatedAtGt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGte != nil {

		// query param created_at__gte
		var qrCreatedAtGte string
		if o.CreatedAtGte != nil {
			qrCreatedAtGte = *o.CreatedAtGte
		}
		qCreatedAtGte := qrCreatedAtGte
		if qCreatedAtGte != "" {
			if err := r.SetQueryParam("created_at__gte", qCreatedAtGte); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLt != nil {

		// query param created_at__lt
		var qrCreatedAtLt string
		if o.CreatedAtLt != nil {
			qrCreatedAtLt = *o.CreatedAtLt
		}
		qCreatedAtLt := qrCreatedAtLt
		if qCreatedAtLt != "" {
			if err := r.SetQueryParam("created_at__lt", qCreatedAtLt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLte != nil {

		// query param created_at__lte
		var qrCreatedAtLte string
		if o.CreatedAtLte != nil {
			qrCreatedAtLte = *o.CreatedAtLte
		}
		qCreatedAtLte := qrCreatedAtLte
		if qCreatedAtLte != "" {
			if err := r.SetQueryParam("created_at__lte", qCreatedAtLte); err != nil {
				return err
			}
		}

	}

	if o.CreatedByID != nil {

		// query param created_by_id
		var qrCreatedByID string
		if o.CreatedByID != nil {
			qrCreatedByID = *o.CreatedByID
		}
		qCreatedByID := qrCreatedByID
		if qCreatedByID != "" {
			if err := r.SetQueryParam("created_by_id", qCreatedByID); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Number != nil {

		// query param number
		var qrNumber string
		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := qrNumber
		if qNumber != "" {
			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.ParentNumber != nil {

		// query param parent_number
		var qrParentNumber float64
		if o.ParentNumber != nil {
			qrParentNumber = *o.ParentNumber
		}
		qParentNumber := swag.FormatFloat64(qrParentNumber)
		if qParentNumber != "" {
			if err := r.SetQueryParam("parent_number", qParentNumber); err != nil {
				return err
			}
		}

	}

	if o.Project != nil {

		// query param project
		var qrProject string
		if o.Project != nil {
			qrProject = *o.Project
		}
		qProject := qrProject
		if qProject != "" {
			if err := r.SetQueryParam("project", qProject); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param project_id
		var qrProjectID float64
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := swag.FormatFloat64(qrProjectID)
		if qProjectID != "" {
			if err := r.SetQueryParam("project_id", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.ProjectIDIn != nil {

		// query param project_id__in
		var qrProjectIDIn string
		if o.ProjectIDIn != nil {
			qrProjectIDIn = *o.ProjectIDIn
		}
		qProjectIDIn := qrProjectIDIn
		if qProjectIDIn != "" {
			if err := r.SetQueryParam("project_id__in", qProjectIDIn); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if o.StateIn != nil {

		// query param state__in
		var qrStateIn string
		if o.StateIn != nil {
			qrStateIn = *o.StateIn
		}
		qStateIn := qrStateIn
		if qStateIn != "" {
			if err := r.SetQueryParam("state__in", qStateIn); err != nil {
				return err
			}
		}

	}

	if o.Title != nil {

		// query param title
		var qrTitle string
		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {
			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}

	}

	if o.TitleIcontains != nil {

		// query param title__icontains
		var qrTitleIcontains string
		if o.TitleIcontains != nil {
			qrTitleIcontains = *o.TitleIcontains
		}
		qTitleIcontains := qrTitleIcontains
		if qTitleIcontains != "" {
			if err := r.SetQueryParam("title__icontains", qTitleIcontains); err != nil {
				return err
			}
		}

	}

	if o.TitleStartswith != nil {

		// query param title__startswith
		var qrTitleStartswith string
		if o.TitleStartswith != nil {
			qrTitleStartswith = *o.TitleStartswith
		}
		qTitleStartswith := qrTitleStartswith
		if qTitleStartswith != "" {
			if err := r.SetQueryParam("title__startswith", qTitleStartswith); err != nil {
				return err
			}
		}

	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string
		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {
			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
