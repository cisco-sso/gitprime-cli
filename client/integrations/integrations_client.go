// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	IntegrationsConnectionStatus(params *IntegrationsConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsConnectionStatusOK, error)

	IntegrationsCreateWithVendor(params *IntegrationsCreateWithVendorParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsCreateWithVendorCreated, error)

	IntegrationsDelete(params *IntegrationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsDeleteNoContent, error)

	IntegrationsList(params *IntegrationsListParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsListOK, error)

	IntegrationsManualHTTPSCreate(params *IntegrationsManualHTTPSCreateParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsManualHTTPSCreateCreated, error)

	IntegrationsPartialUpdate(params *IntegrationsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsPartialUpdateOK, error)

	IntegrationsRead(params *IntegrationsReadParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  IntegrationsConnectionStatus gets the connection status of existing integration

  get the connection status of existing integration

:param request:
:param pk:
:return:
*/
func (a *Client) IntegrationsConnectionStatus(params *IntegrationsConnectionStatusParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsConnectionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsConnectionStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "integrations_connection_status",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/integrations/{id}/connection_status/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsConnectionStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsConnectionStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations_connection_status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsCreateWithVendor creates a new integration with parameter values

  Create a new integration with parameter values

Create integration via Oauth, username/password, or access token.
Use keywords 'access_token', 'oauth', or 'userpass' to define the type of connection under 'auth_type',
only the relevent fields to the auth type must be given.

Use     "enabled_services": ["repo", "ticket", "pull_request"]
to select the default enabled services for the integrations.

Refer to Example Value
*/
func (a *Client) IntegrationsCreateWithVendor(params *IntegrationsCreateWithVendorParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsCreateWithVendorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsCreateWithVendorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "integrations_create_with_vendor",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/integrations/create_with_vendor/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsCreateWithVendorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsCreateWithVendorCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations_create_with_vendor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsDelete removes specific entity by id value

  Remove specific entity by id value
*/
func (a *Client) IntegrationsDelete(params *IntegrationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "integrations_delete",
		Method:             "DELETE",
		PathPattern:        "/v3/customer/core/integrations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsList lists integration entities

  List Integration entities

--- Integration ---

An Integration is a representation of a connection between a user and a vendor like Github, Bitbucket, etc.

--- General ---

All objects can be traversed to related objects. This can be achieved by using the double-underscore syntax.
For instance, query all Author records with a specific Team name like so:

"?team\_\_name=Bobs%20Team".

You can easily traverse multiple levels of relationships by connecting related objects. For example:

"?foo\_\_bar\_\_baz\_\_name=Bob"

All available relationships are defined in the filter documentation with the note "filter-traversable object."
Additionally, you can limit the properties returned in an object by using the `fields` or `omit`
keywords as follows:

"?fields=foo,bar,bad" will return only these fields

or

"?omit=foo,bar,baz" will return all but the specified fields
*/
func (a *Client) IntegrationsList(params *IntegrationsListParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "integrations_list",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/integrations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsManualHTTPSCreate creates a manual integration

  Create a manual integration

If it is a public repository, the username and password do not have to be provided.
If the username and password are provided, it is assumed the repo is private.

The only service available for this integration type is enabled_services: ["Repos"]
*/
func (a *Client) IntegrationsManualHTTPSCreate(params *IntegrationsManualHTTPSCreateParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsManualHTTPSCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsManualHTTPSCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "integrations_manual_https_create",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/integrations/manual_https_create/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsManualHTTPSCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsManualHTTPSCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations_manual_https_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsPartialUpdate updates a specific entity by id value

  Update a specific entity by id value

Changing your connection may remove all data associated with this integration.

If the integration is a manual or ssh connection, you may edit the name but not the authData or connection type.

If the integration is by vendor, you may alter and update the authData and name.
*/
func (a *Client) IntegrationsPartialUpdate(params *IntegrationsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "integrations_partial_update",
		Method:             "PATCH",
		PathPattern:        "/v3/customer/core/integrations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntegrationsRead gets a specific integration entity by id value

  Get a specific integration entity by id value
*/
func (a *Client) IntegrationsRead(params *IntegrationsReadParams, authInfo runtime.ClientAuthInfoWriter) (*IntegrationsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "integrations_read",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/integrations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IntegrationsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for integrations_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
