// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIntegrationsListParams creates a new IntegrationsListParams object
// with the default values initialized.
func NewIntegrationsListParams() *IntegrationsListParams {
	var ()
	return &IntegrationsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIntegrationsListParamsWithTimeout creates a new IntegrationsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIntegrationsListParamsWithTimeout(timeout time.Duration) *IntegrationsListParams {
	var ()
	return &IntegrationsListParams{

		timeout: timeout,
	}
}

// NewIntegrationsListParamsWithContext creates a new IntegrationsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewIntegrationsListParamsWithContext(ctx context.Context) *IntegrationsListParams {
	var ()
	return &IntegrationsListParams{

		Context: ctx,
	}
}

// NewIntegrationsListParamsWithHTTPClient creates a new IntegrationsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIntegrationsListParamsWithHTTPClient(client *http.Client) *IntegrationsListParams {
	var ()
	return &IntegrationsListParams{
		HTTPClient: client,
	}
}

/*IntegrationsListParams contains all the parameters to send to the API endpoint
for the integrations list operation typically these are written to a http.Request
*/
type IntegrationsListParams struct {

	/*AuditCreatedBy
	  Filter-traversable object

	*/
	AuditCreatedBy *string
	/*EnabledSourceTypes*/
	EnabledSourceTypes *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*IntegrationType*/
	IntegrationType *string
	/*IntegrationTypeIn
	  Multiple values may be separated by commas.

	*/
	IntegrationTypeIn *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Name*/
	Name *string
	/*NameIcontains*/
	NameIcontains *string
	/*NameStartswith*/
	NameStartswith *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `name`, `vendor_type`, `audit_created_by__name`

	*/
	Ordering *string
	/*Search
	  A search term.

	*/
	Search *string
	/*SourceProjectsLastUpdated
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	SourceProjectsLastUpdated *string
	/*SourceProjectsLastUpdatedGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	SourceProjectsLastUpdatedGt *string
	/*SourceProjectsLastUpdatedGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	SourceProjectsLastUpdatedGte *string
	/*SourceProjectsLastUpdatedLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	SourceProjectsLastUpdatedLt *string
	/*SourceProjectsLastUpdatedLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	SourceProjectsLastUpdatedLte *string
	/*VendorType*/
	VendorType *string
	/*VendorTypeIcontains*/
	VendorTypeIcontains *string
	/*VendorTypeIn
	  Multiple values may be separated by commas.

	*/
	VendorTypeIn *string
	/*VendorTypeStartswith*/
	VendorTypeStartswith *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the integrations list params
func (o *IntegrationsListParams) WithTimeout(timeout time.Duration) *IntegrationsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the integrations list params
func (o *IntegrationsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the integrations list params
func (o *IntegrationsListParams) WithContext(ctx context.Context) *IntegrationsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the integrations list params
func (o *IntegrationsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the integrations list params
func (o *IntegrationsListParams) WithHTTPClient(client *http.Client) *IntegrationsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the integrations list params
func (o *IntegrationsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuditCreatedBy adds the auditCreatedBy to the integrations list params
func (o *IntegrationsListParams) WithAuditCreatedBy(auditCreatedBy *string) *IntegrationsListParams {
	o.SetAuditCreatedBy(auditCreatedBy)
	return o
}

// SetAuditCreatedBy adds the auditCreatedBy to the integrations list params
func (o *IntegrationsListParams) SetAuditCreatedBy(auditCreatedBy *string) {
	o.AuditCreatedBy = auditCreatedBy
}

// WithEnabledSourceTypes adds the enabledSourceTypes to the integrations list params
func (o *IntegrationsListParams) WithEnabledSourceTypes(enabledSourceTypes *string) *IntegrationsListParams {
	o.SetEnabledSourceTypes(enabledSourceTypes)
	return o
}

// SetEnabledSourceTypes adds the enabledSourceTypes to the integrations list params
func (o *IntegrationsListParams) SetEnabledSourceTypes(enabledSourceTypes *string) {
	o.EnabledSourceTypes = enabledSourceTypes
}

// WithFilters adds the filters to the integrations list params
func (o *IntegrationsListParams) WithFilters(filters *string) *IntegrationsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the integrations list params
func (o *IntegrationsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the integrations list params
func (o *IntegrationsListParams) WithID(id *float64) *IntegrationsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the integrations list params
func (o *IntegrationsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the integrations list params
func (o *IntegrationsListParams) WithIDIn(iDIn *float64) *IntegrationsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the integrations list params
func (o *IntegrationsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithIntegrationType adds the integrationType to the integrations list params
func (o *IntegrationsListParams) WithIntegrationType(integrationType *string) *IntegrationsListParams {
	o.SetIntegrationType(integrationType)
	return o
}

// SetIntegrationType adds the integrationType to the integrations list params
func (o *IntegrationsListParams) SetIntegrationType(integrationType *string) {
	o.IntegrationType = integrationType
}

// WithIntegrationTypeIn adds the integrationTypeIn to the integrations list params
func (o *IntegrationsListParams) WithIntegrationTypeIn(integrationTypeIn *string) *IntegrationsListParams {
	o.SetIntegrationTypeIn(integrationTypeIn)
	return o
}

// SetIntegrationTypeIn adds the integrationTypeIn to the integrations list params
func (o *IntegrationsListParams) SetIntegrationTypeIn(integrationTypeIn *string) {
	o.IntegrationTypeIn = integrationTypeIn
}

// WithLimit adds the limit to the integrations list params
func (o *IntegrationsListParams) WithLimit(limit *int64) *IntegrationsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the integrations list params
func (o *IntegrationsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the integrations list params
func (o *IntegrationsListParams) WithName(name *string) *IntegrationsListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the integrations list params
func (o *IntegrationsListParams) SetName(name *string) {
	o.Name = name
}

// WithNameIcontains adds the nameIcontains to the integrations list params
func (o *IntegrationsListParams) WithNameIcontains(nameIcontains *string) *IntegrationsListParams {
	o.SetNameIcontains(nameIcontains)
	return o
}

// SetNameIcontains adds the nameIcontains to the integrations list params
func (o *IntegrationsListParams) SetNameIcontains(nameIcontains *string) {
	o.NameIcontains = nameIcontains
}

// WithNameStartswith adds the nameStartswith to the integrations list params
func (o *IntegrationsListParams) WithNameStartswith(nameStartswith *string) *IntegrationsListParams {
	o.SetNameStartswith(nameStartswith)
	return o
}

// SetNameStartswith adds the nameStartswith to the integrations list params
func (o *IntegrationsListParams) SetNameStartswith(nameStartswith *string) {
	o.NameStartswith = nameStartswith
}

// WithOffset adds the offset to the integrations list params
func (o *IntegrationsListParams) WithOffset(offset *int64) *IntegrationsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the integrations list params
func (o *IntegrationsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the integrations list params
func (o *IntegrationsListParams) WithOrdering(ordering *string) *IntegrationsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the integrations list params
func (o *IntegrationsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithSearch adds the search to the integrations list params
func (o *IntegrationsListParams) WithSearch(search *string) *IntegrationsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the integrations list params
func (o *IntegrationsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithSourceProjectsLastUpdated adds the sourceProjectsLastUpdated to the integrations list params
func (o *IntegrationsListParams) WithSourceProjectsLastUpdated(sourceProjectsLastUpdated *string) *IntegrationsListParams {
	o.SetSourceProjectsLastUpdated(sourceProjectsLastUpdated)
	return o
}

// SetSourceProjectsLastUpdated adds the sourceProjectsLastUpdated to the integrations list params
func (o *IntegrationsListParams) SetSourceProjectsLastUpdated(sourceProjectsLastUpdated *string) {
	o.SourceProjectsLastUpdated = sourceProjectsLastUpdated
}

// WithSourceProjectsLastUpdatedGt adds the sourceProjectsLastUpdatedGt to the integrations list params
func (o *IntegrationsListParams) WithSourceProjectsLastUpdatedGt(sourceProjectsLastUpdatedGt *string) *IntegrationsListParams {
	o.SetSourceProjectsLastUpdatedGt(sourceProjectsLastUpdatedGt)
	return o
}

// SetSourceProjectsLastUpdatedGt adds the sourceProjectsLastUpdatedGt to the integrations list params
func (o *IntegrationsListParams) SetSourceProjectsLastUpdatedGt(sourceProjectsLastUpdatedGt *string) {
	o.SourceProjectsLastUpdatedGt = sourceProjectsLastUpdatedGt
}

// WithSourceProjectsLastUpdatedGte adds the sourceProjectsLastUpdatedGte to the integrations list params
func (o *IntegrationsListParams) WithSourceProjectsLastUpdatedGte(sourceProjectsLastUpdatedGte *string) *IntegrationsListParams {
	o.SetSourceProjectsLastUpdatedGte(sourceProjectsLastUpdatedGte)
	return o
}

// SetSourceProjectsLastUpdatedGte adds the sourceProjectsLastUpdatedGte to the integrations list params
func (o *IntegrationsListParams) SetSourceProjectsLastUpdatedGte(sourceProjectsLastUpdatedGte *string) {
	o.SourceProjectsLastUpdatedGte = sourceProjectsLastUpdatedGte
}

// WithSourceProjectsLastUpdatedLt adds the sourceProjectsLastUpdatedLt to the integrations list params
func (o *IntegrationsListParams) WithSourceProjectsLastUpdatedLt(sourceProjectsLastUpdatedLt *string) *IntegrationsListParams {
	o.SetSourceProjectsLastUpdatedLt(sourceProjectsLastUpdatedLt)
	return o
}

// SetSourceProjectsLastUpdatedLt adds the sourceProjectsLastUpdatedLt to the integrations list params
func (o *IntegrationsListParams) SetSourceProjectsLastUpdatedLt(sourceProjectsLastUpdatedLt *string) {
	o.SourceProjectsLastUpdatedLt = sourceProjectsLastUpdatedLt
}

// WithSourceProjectsLastUpdatedLte adds the sourceProjectsLastUpdatedLte to the integrations list params
func (o *IntegrationsListParams) WithSourceProjectsLastUpdatedLte(sourceProjectsLastUpdatedLte *string) *IntegrationsListParams {
	o.SetSourceProjectsLastUpdatedLte(sourceProjectsLastUpdatedLte)
	return o
}

// SetSourceProjectsLastUpdatedLte adds the sourceProjectsLastUpdatedLte to the integrations list params
func (o *IntegrationsListParams) SetSourceProjectsLastUpdatedLte(sourceProjectsLastUpdatedLte *string) {
	o.SourceProjectsLastUpdatedLte = sourceProjectsLastUpdatedLte
}

// WithVendorType adds the vendorType to the integrations list params
func (o *IntegrationsListParams) WithVendorType(vendorType *string) *IntegrationsListParams {
	o.SetVendorType(vendorType)
	return o
}

// SetVendorType adds the vendorType to the integrations list params
func (o *IntegrationsListParams) SetVendorType(vendorType *string) {
	o.VendorType = vendorType
}

// WithVendorTypeIcontains adds the vendorTypeIcontains to the integrations list params
func (o *IntegrationsListParams) WithVendorTypeIcontains(vendorTypeIcontains *string) *IntegrationsListParams {
	o.SetVendorTypeIcontains(vendorTypeIcontains)
	return o
}

// SetVendorTypeIcontains adds the vendorTypeIcontains to the integrations list params
func (o *IntegrationsListParams) SetVendorTypeIcontains(vendorTypeIcontains *string) {
	o.VendorTypeIcontains = vendorTypeIcontains
}

// WithVendorTypeIn adds the vendorTypeIn to the integrations list params
func (o *IntegrationsListParams) WithVendorTypeIn(vendorTypeIn *string) *IntegrationsListParams {
	o.SetVendorTypeIn(vendorTypeIn)
	return o
}

// SetVendorTypeIn adds the vendorTypeIn to the integrations list params
func (o *IntegrationsListParams) SetVendorTypeIn(vendorTypeIn *string) {
	o.VendorTypeIn = vendorTypeIn
}

// WithVendorTypeStartswith adds the vendorTypeStartswith to the integrations list params
func (o *IntegrationsListParams) WithVendorTypeStartswith(vendorTypeStartswith *string) *IntegrationsListParams {
	o.SetVendorTypeStartswith(vendorTypeStartswith)
	return o
}

// SetVendorTypeStartswith adds the vendorTypeStartswith to the integrations list params
func (o *IntegrationsListParams) SetVendorTypeStartswith(vendorTypeStartswith *string) {
	o.VendorTypeStartswith = vendorTypeStartswith
}

// WriteToRequest writes these params to a swagger request
func (o *IntegrationsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuditCreatedBy != nil {

		// query param audit_created_by
		var qrAuditCreatedBy string
		if o.AuditCreatedBy != nil {
			qrAuditCreatedBy = *o.AuditCreatedBy
		}
		qAuditCreatedBy := qrAuditCreatedBy
		if qAuditCreatedBy != "" {
			if err := r.SetQueryParam("audit_created_by", qAuditCreatedBy); err != nil {
				return err
			}
		}

	}

	if o.EnabledSourceTypes != nil {

		// query param enabled_source_types
		var qrEnabledSourceTypes string
		if o.EnabledSourceTypes != nil {
			qrEnabledSourceTypes = *o.EnabledSourceTypes
		}
		qEnabledSourceTypes := qrEnabledSourceTypes
		if qEnabledSourceTypes != "" {
			if err := r.SetQueryParam("enabled_source_types", qEnabledSourceTypes); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.IntegrationType != nil {

		// query param integration_type
		var qrIntegrationType string
		if o.IntegrationType != nil {
			qrIntegrationType = *o.IntegrationType
		}
		qIntegrationType := qrIntegrationType
		if qIntegrationType != "" {
			if err := r.SetQueryParam("integration_type", qIntegrationType); err != nil {
				return err
			}
		}

	}

	if o.IntegrationTypeIn != nil {

		// query param integration_type__in
		var qrIntegrationTypeIn string
		if o.IntegrationTypeIn != nil {
			qrIntegrationTypeIn = *o.IntegrationTypeIn
		}
		qIntegrationTypeIn := qrIntegrationTypeIn
		if qIntegrationTypeIn != "" {
			if err := r.SetQueryParam("integration_type__in", qIntegrationTypeIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NameIcontains != nil {

		// query param name__icontains
		var qrNameIcontains string
		if o.NameIcontains != nil {
			qrNameIcontains = *o.NameIcontains
		}
		qNameIcontains := qrNameIcontains
		if qNameIcontains != "" {
			if err := r.SetQueryParam("name__icontains", qNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.NameStartswith != nil {

		// query param name__startswith
		var qrNameStartswith string
		if o.NameStartswith != nil {
			qrNameStartswith = *o.NameStartswith
		}
		qNameStartswith := qrNameStartswith
		if qNameStartswith != "" {
			if err := r.SetQueryParam("name__startswith", qNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.SourceProjectsLastUpdated != nil {

		// query param source_projects_last_updated
		var qrSourceProjectsLastUpdated string
		if o.SourceProjectsLastUpdated != nil {
			qrSourceProjectsLastUpdated = *o.SourceProjectsLastUpdated
		}
		qSourceProjectsLastUpdated := qrSourceProjectsLastUpdated
		if qSourceProjectsLastUpdated != "" {
			if err := r.SetQueryParam("source_projects_last_updated", qSourceProjectsLastUpdated); err != nil {
				return err
			}
		}

	}

	if o.SourceProjectsLastUpdatedGt != nil {

		// query param source_projects_last_updated__gt
		var qrSourceProjectsLastUpdatedGt string
		if o.SourceProjectsLastUpdatedGt != nil {
			qrSourceProjectsLastUpdatedGt = *o.SourceProjectsLastUpdatedGt
		}
		qSourceProjectsLastUpdatedGt := qrSourceProjectsLastUpdatedGt
		if qSourceProjectsLastUpdatedGt != "" {
			if err := r.SetQueryParam("source_projects_last_updated__gt", qSourceProjectsLastUpdatedGt); err != nil {
				return err
			}
		}

	}

	if o.SourceProjectsLastUpdatedGte != nil {

		// query param source_projects_last_updated__gte
		var qrSourceProjectsLastUpdatedGte string
		if o.SourceProjectsLastUpdatedGte != nil {
			qrSourceProjectsLastUpdatedGte = *o.SourceProjectsLastUpdatedGte
		}
		qSourceProjectsLastUpdatedGte := qrSourceProjectsLastUpdatedGte
		if qSourceProjectsLastUpdatedGte != "" {
			if err := r.SetQueryParam("source_projects_last_updated__gte", qSourceProjectsLastUpdatedGte); err != nil {
				return err
			}
		}

	}

	if o.SourceProjectsLastUpdatedLt != nil {

		// query param source_projects_last_updated__lt
		var qrSourceProjectsLastUpdatedLt string
		if o.SourceProjectsLastUpdatedLt != nil {
			qrSourceProjectsLastUpdatedLt = *o.SourceProjectsLastUpdatedLt
		}
		qSourceProjectsLastUpdatedLt := qrSourceProjectsLastUpdatedLt
		if qSourceProjectsLastUpdatedLt != "" {
			if err := r.SetQueryParam("source_projects_last_updated__lt", qSourceProjectsLastUpdatedLt); err != nil {
				return err
			}
		}

	}

	if o.SourceProjectsLastUpdatedLte != nil {

		// query param source_projects_last_updated__lte
		var qrSourceProjectsLastUpdatedLte string
		if o.SourceProjectsLastUpdatedLte != nil {
			qrSourceProjectsLastUpdatedLte = *o.SourceProjectsLastUpdatedLte
		}
		qSourceProjectsLastUpdatedLte := qrSourceProjectsLastUpdatedLte
		if qSourceProjectsLastUpdatedLte != "" {
			if err := r.SetQueryParam("source_projects_last_updated__lte", qSourceProjectsLastUpdatedLte); err != nil {
				return err
			}
		}

	}

	if o.VendorType != nil {

		// query param vendor_type
		var qrVendorType string
		if o.VendorType != nil {
			qrVendorType = *o.VendorType
		}
		qVendorType := qrVendorType
		if qVendorType != "" {
			if err := r.SetQueryParam("vendor_type", qVendorType); err != nil {
				return err
			}
		}

	}

	if o.VendorTypeIcontains != nil {

		// query param vendor_type__icontains
		var qrVendorTypeIcontains string
		if o.VendorTypeIcontains != nil {
			qrVendorTypeIcontains = *o.VendorTypeIcontains
		}
		qVendorTypeIcontains := qrVendorTypeIcontains
		if qVendorTypeIcontains != "" {
			if err := r.SetQueryParam("vendor_type__icontains", qVendorTypeIcontains); err != nil {
				return err
			}
		}

	}

	if o.VendorTypeIn != nil {

		// query param vendor_type__in
		var qrVendorTypeIn string
		if o.VendorTypeIn != nil {
			qrVendorTypeIn = *o.VendorTypeIn
		}
		qVendorTypeIn := qrVendorTypeIn
		if qVendorTypeIn != "" {
			if err := r.SetQueryParam("vendor_type__in", qVendorTypeIn); err != nil {
				return err
			}
		}

	}

	if o.VendorTypeStartswith != nil {

		// query param vendor_type__startswith
		var qrVendorTypeStartswith string
		if o.VendorTypeStartswith != nil {
			qrVendorTypeStartswith = *o.VendorTypeStartswith
		}
		qVendorTypeStartswith := qrVendorTypeStartswith
		if qVendorTypeStartswith != "" {
			if err := r.SetQueryParam("vendor_type__startswith", qVendorTypeStartswith); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
