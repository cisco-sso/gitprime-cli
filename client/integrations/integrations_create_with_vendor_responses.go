// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationsCreateWithVendorReader is a Reader for the IntegrationsCreateWithVendor structure.
type IntegrationsCreateWithVendorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IntegrationsCreateWithVendorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewIntegrationsCreateWithVendorCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIntegrationsCreateWithVendorCreated creates a IntegrationsCreateWithVendorCreated with default headers values
func NewIntegrationsCreateWithVendorCreated() *IntegrationsCreateWithVendorCreated {
	return &IntegrationsCreateWithVendorCreated{}
}

/*IntegrationsCreateWithVendorCreated handles this case with default header values.

IntegrationsCreateWithVendorCreated integrations create with vendor created
*/
type IntegrationsCreateWithVendorCreated struct {
	Payload interface{}
}

func (o *IntegrationsCreateWithVendorCreated) Error() string {
	return fmt.Sprintf("[POST /v3/customer/core/integrations/create_with_vendor/][%d] integrationsCreateWithVendorCreated  %+v", 201, o.Payload)
}

func (o *IntegrationsCreateWithVendorCreated) GetPayload() interface{} {
	return o.Payload
}

func (o *IntegrationsCreateWithVendorCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*IntegrationsCreateWithVendorBody integrations create with vendor body
swagger:model IntegrationsCreateWithVendorBody
*/
type IntegrationsCreateWithVendorBody struct {

	// auth type
	// Required: true
	AuthType *string `json:"auth_type"`

	// enabled services
	// Required: true
	EnabledServices []string `json:"enabled_services"`

	// name
	// Required: true
	Name *string `json:"name"`

	// password
	Password string `json:"password,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// vendor
	// Required: true
	Vendor *string `json:"vendor"`
}

// Validate validates this integrations create with vendor body
func (o *IntegrationsCreateWithVendorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabledServices(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IntegrationsCreateWithVendorBody) validateAuthType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"auth_type", "body", o.AuthType); err != nil {
		return err
	}

	return nil
}

func (o *IntegrationsCreateWithVendorBody) validateEnabledServices(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"enabled_services", "body", o.EnabledServices); err != nil {
		return err
	}

	return nil
}

func (o *IntegrationsCreateWithVendorBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *IntegrationsCreateWithVendorBody) validateVendor(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"vendor", "body", o.Vendor); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IntegrationsCreateWithVendorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IntegrationsCreateWithVendorBody) UnmarshalBinary(b []byte) error {
	var res IntegrationsCreateWithVendorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
