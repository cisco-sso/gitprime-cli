// Code generated by go-swagger; DO NOT EDIT.

package available_ticket_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAvailableTicketProjectsListParams creates a new AvailableTicketProjectsListParams object
// with the default values initialized.
func NewAvailableTicketProjectsListParams() *AvailableTicketProjectsListParams {
	var ()
	return &AvailableTicketProjectsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAvailableTicketProjectsListParamsWithTimeout creates a new AvailableTicketProjectsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAvailableTicketProjectsListParamsWithTimeout(timeout time.Duration) *AvailableTicketProjectsListParams {
	var ()
	return &AvailableTicketProjectsListParams{

		timeout: timeout,
	}
}

// NewAvailableTicketProjectsListParamsWithContext creates a new AvailableTicketProjectsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewAvailableTicketProjectsListParamsWithContext(ctx context.Context) *AvailableTicketProjectsListParams {
	var ()
	return &AvailableTicketProjectsListParams{

		Context: ctx,
	}
}

// NewAvailableTicketProjectsListParamsWithHTTPClient creates a new AvailableTicketProjectsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAvailableTicketProjectsListParamsWithHTTPClient(client *http.Client) *AvailableTicketProjectsListParams {
	var ()
	return &AvailableTicketProjectsListParams{
		HTTPClient: client,
	}
}

/*AvailableTicketProjectsListParams contains all the parameters to send to the API endpoint
for the available ticket projects list operation typically these are written to a http.Request
*/
type AvailableTicketProjectsListParams struct {

	/*AddedBy
	  Filter-traversable object

	*/
	AddedBy *string
	/*Excluded*/
	Excluded *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*GroupIndex
	  Group filter

	*/
	GroupIndex *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Imported*/
	Imported *string
	/*Integration
	  Filter-traversable object

	*/
	Integration *string
	/*Name*/
	Name *string
	/*NameIcontains*/
	NameIcontains *string
	/*NameStartswith*/
	NameStartswith *string
	/*Ordering
	  Valid ordering fields are: `id`, `user_id`, `vendor_type`, `owner_vendor_id`, `integration_id`, `integration__name`, `name`, `updated_at`, `owner_name`, `show_in_repos_page`, `auto_import_enabled`

	*/
	Ordering *string
	/*OwnerName*/
	OwnerName *string
	/*OwnerNameIcontains*/
	OwnerNameIcontains *string
	/*OwnerNameStartswith*/
	OwnerNameStartswith *string
	/*OwnerVendorID*/
	OwnerVendorID *string
	/*Page
	  A page number within the paginated result set.

	*/
	Page *int64
	/*PageSize
	  Number of results to return per page.

	*/
	PageSize *int64
	/*Search
	  A search term.

	*/
	Search *string
	/*ShowForks*/
	ShowForks *string
	/*SourceType*/
	SourceType *string
	/*UpdatedAt*/
	UpdatedAt *string
	/*UpdatedAtGt*/
	UpdatedAtGt *string
	/*UpdatedAtGte*/
	UpdatedAtGte *string
	/*UpdatedAtLt*/
	UpdatedAtLt *string
	/*UpdatedAtLte*/
	UpdatedAtLte *string
	/*VendorType*/
	VendorType *string
	/*VendorTypeIcontains*/
	VendorTypeIcontains *string
	/*VendorTypeStartswith*/
	VendorTypeStartswith *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithTimeout(timeout time.Duration) *AvailableTicketProjectsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithContext(ctx context.Context) *AvailableTicketProjectsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithHTTPClient(client *http.Client) *AvailableTicketProjectsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddedBy adds the addedBy to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithAddedBy(addedBy *string) *AvailableTicketProjectsListParams {
	o.SetAddedBy(addedBy)
	return o
}

// SetAddedBy adds the addedBy to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetAddedBy(addedBy *string) {
	o.AddedBy = addedBy
}

// WithExcluded adds the excluded to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithExcluded(excluded *string) *AvailableTicketProjectsListParams {
	o.SetExcluded(excluded)
	return o
}

// SetExcluded adds the excluded to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetExcluded(excluded *string) {
	o.Excluded = excluded
}

// WithFilters adds the filters to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithFilters(filters *string) *AvailableTicketProjectsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithGroupIndex adds the groupIndex to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithGroupIndex(groupIndex *string) *AvailableTicketProjectsListParams {
	o.SetGroupIndex(groupIndex)
	return o
}

// SetGroupIndex adds the groupIndex to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetGroupIndex(groupIndex *string) {
	o.GroupIndex = groupIndex
}

// WithID adds the id to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithID(id *float64) *AvailableTicketProjectsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithIDIn(iDIn *float64) *AvailableTicketProjectsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithImported adds the imported to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithImported(imported *string) *AvailableTicketProjectsListParams {
	o.SetImported(imported)
	return o
}

// SetImported adds the imported to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetImported(imported *string) {
	o.Imported = imported
}

// WithIntegration adds the integration to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithIntegration(integration *string) *AvailableTicketProjectsListParams {
	o.SetIntegration(integration)
	return o
}

// SetIntegration adds the integration to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetIntegration(integration *string) {
	o.Integration = integration
}

// WithName adds the name to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithName(name *string) *AvailableTicketProjectsListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetName(name *string) {
	o.Name = name
}

// WithNameIcontains adds the nameIcontains to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithNameIcontains(nameIcontains *string) *AvailableTicketProjectsListParams {
	o.SetNameIcontains(nameIcontains)
	return o
}

// SetNameIcontains adds the nameIcontains to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetNameIcontains(nameIcontains *string) {
	o.NameIcontains = nameIcontains
}

// WithNameStartswith adds the nameStartswith to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithNameStartswith(nameStartswith *string) *AvailableTicketProjectsListParams {
	o.SetNameStartswith(nameStartswith)
	return o
}

// SetNameStartswith adds the nameStartswith to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetNameStartswith(nameStartswith *string) {
	o.NameStartswith = nameStartswith
}

// WithOrdering adds the ordering to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithOrdering(ordering *string) *AvailableTicketProjectsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithOwnerName adds the ownerName to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithOwnerName(ownerName *string) *AvailableTicketProjectsListParams {
	o.SetOwnerName(ownerName)
	return o
}

// SetOwnerName adds the ownerName to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetOwnerName(ownerName *string) {
	o.OwnerName = ownerName
}

// WithOwnerNameIcontains adds the ownerNameIcontains to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithOwnerNameIcontains(ownerNameIcontains *string) *AvailableTicketProjectsListParams {
	o.SetOwnerNameIcontains(ownerNameIcontains)
	return o
}

// SetOwnerNameIcontains adds the ownerNameIcontains to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetOwnerNameIcontains(ownerNameIcontains *string) {
	o.OwnerNameIcontains = ownerNameIcontains
}

// WithOwnerNameStartswith adds the ownerNameStartswith to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithOwnerNameStartswith(ownerNameStartswith *string) *AvailableTicketProjectsListParams {
	o.SetOwnerNameStartswith(ownerNameStartswith)
	return o
}

// SetOwnerNameStartswith adds the ownerNameStartswith to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetOwnerNameStartswith(ownerNameStartswith *string) {
	o.OwnerNameStartswith = ownerNameStartswith
}

// WithOwnerVendorID adds the ownerVendorID to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithOwnerVendorID(ownerVendorID *string) *AvailableTicketProjectsListParams {
	o.SetOwnerVendorID(ownerVendorID)
	return o
}

// SetOwnerVendorID adds the ownerVendorId to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetOwnerVendorID(ownerVendorID *string) {
	o.OwnerVendorID = ownerVendorID
}

// WithPage adds the page to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithPage(page *int64) *AvailableTicketProjectsListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithPageSize(pageSize *int64) *AvailableTicketProjectsListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithSearch adds the search to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithSearch(search *string) *AvailableTicketProjectsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithShowForks adds the showForks to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithShowForks(showForks *string) *AvailableTicketProjectsListParams {
	o.SetShowForks(showForks)
	return o
}

// SetShowForks adds the showForks to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetShowForks(showForks *string) {
	o.ShowForks = showForks
}

// WithSourceType adds the sourceType to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithSourceType(sourceType *string) *AvailableTicketProjectsListParams {
	o.SetSourceType(sourceType)
	return o
}

// SetSourceType adds the sourceType to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetSourceType(sourceType *string) {
	o.SourceType = sourceType
}

// WithUpdatedAt adds the updatedAt to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithUpdatedAt(updatedAt *string) *AvailableTicketProjectsListParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUpdatedAtGt adds the updatedAtGt to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithUpdatedAtGt(updatedAtGt *string) *AvailableTicketProjectsListParams {
	o.SetUpdatedAtGt(updatedAtGt)
	return o
}

// SetUpdatedAtGt adds the updatedAtGt to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetUpdatedAtGt(updatedAtGt *string) {
	o.UpdatedAtGt = updatedAtGt
}

// WithUpdatedAtGte adds the updatedAtGte to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithUpdatedAtGte(updatedAtGte *string) *AvailableTicketProjectsListParams {
	o.SetUpdatedAtGte(updatedAtGte)
	return o
}

// SetUpdatedAtGte adds the updatedAtGte to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetUpdatedAtGte(updatedAtGte *string) {
	o.UpdatedAtGte = updatedAtGte
}

// WithUpdatedAtLt adds the updatedAtLt to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithUpdatedAtLt(updatedAtLt *string) *AvailableTicketProjectsListParams {
	o.SetUpdatedAtLt(updatedAtLt)
	return o
}

// SetUpdatedAtLt adds the updatedAtLt to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetUpdatedAtLt(updatedAtLt *string) {
	o.UpdatedAtLt = updatedAtLt
}

// WithUpdatedAtLte adds the updatedAtLte to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithUpdatedAtLte(updatedAtLte *string) *AvailableTicketProjectsListParams {
	o.SetUpdatedAtLte(updatedAtLte)
	return o
}

// SetUpdatedAtLte adds the updatedAtLte to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetUpdatedAtLte(updatedAtLte *string) {
	o.UpdatedAtLte = updatedAtLte
}

// WithVendorType adds the vendorType to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithVendorType(vendorType *string) *AvailableTicketProjectsListParams {
	o.SetVendorType(vendorType)
	return o
}

// SetVendorType adds the vendorType to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetVendorType(vendorType *string) {
	o.VendorType = vendorType
}

// WithVendorTypeIcontains adds the vendorTypeIcontains to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithVendorTypeIcontains(vendorTypeIcontains *string) *AvailableTicketProjectsListParams {
	o.SetVendorTypeIcontains(vendorTypeIcontains)
	return o
}

// SetVendorTypeIcontains adds the vendorTypeIcontains to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetVendorTypeIcontains(vendorTypeIcontains *string) {
	o.VendorTypeIcontains = vendorTypeIcontains
}

// WithVendorTypeStartswith adds the vendorTypeStartswith to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) WithVendorTypeStartswith(vendorTypeStartswith *string) *AvailableTicketProjectsListParams {
	o.SetVendorTypeStartswith(vendorTypeStartswith)
	return o
}

// SetVendorTypeStartswith adds the vendorTypeStartswith to the available ticket projects list params
func (o *AvailableTicketProjectsListParams) SetVendorTypeStartswith(vendorTypeStartswith *string) {
	o.VendorTypeStartswith = vendorTypeStartswith
}

// WriteToRequest writes these params to a swagger request
func (o *AvailableTicketProjectsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddedBy != nil {

		// query param added_by
		var qrAddedBy string
		if o.AddedBy != nil {
			qrAddedBy = *o.AddedBy
		}
		qAddedBy := qrAddedBy
		if qAddedBy != "" {
			if err := r.SetQueryParam("added_by", qAddedBy); err != nil {
				return err
			}
		}

	}

	if o.Excluded != nil {

		// query param excluded
		var qrExcluded string
		if o.Excluded != nil {
			qrExcluded = *o.Excluded
		}
		qExcluded := qrExcluded
		if qExcluded != "" {
			if err := r.SetQueryParam("excluded", qExcluded); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.GroupIndex != nil {

		// query param groupIndex
		var qrGroupIndex string
		if o.GroupIndex != nil {
			qrGroupIndex = *o.GroupIndex
		}
		qGroupIndex := qrGroupIndex
		if qGroupIndex != "" {
			if err := r.SetQueryParam("groupIndex", qGroupIndex); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Imported != nil {

		// query param imported
		var qrImported string
		if o.Imported != nil {
			qrImported = *o.Imported
		}
		qImported := qrImported
		if qImported != "" {
			if err := r.SetQueryParam("imported", qImported); err != nil {
				return err
			}
		}

	}

	if o.Integration != nil {

		// query param integration
		var qrIntegration string
		if o.Integration != nil {
			qrIntegration = *o.Integration
		}
		qIntegration := qrIntegration
		if qIntegration != "" {
			if err := r.SetQueryParam("integration", qIntegration); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NameIcontains != nil {

		// query param name__icontains
		var qrNameIcontains string
		if o.NameIcontains != nil {
			qrNameIcontains = *o.NameIcontains
		}
		qNameIcontains := qrNameIcontains
		if qNameIcontains != "" {
			if err := r.SetQueryParam("name__icontains", qNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.NameStartswith != nil {

		// query param name__startswith
		var qrNameStartswith string
		if o.NameStartswith != nil {
			qrNameStartswith = *o.NameStartswith
		}
		qNameStartswith := qrNameStartswith
		if qNameStartswith != "" {
			if err := r.SetQueryParam("name__startswith", qNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.OwnerName != nil {

		// query param owner_name
		var qrOwnerName string
		if o.OwnerName != nil {
			qrOwnerName = *o.OwnerName
		}
		qOwnerName := qrOwnerName
		if qOwnerName != "" {
			if err := r.SetQueryParam("owner_name", qOwnerName); err != nil {
				return err
			}
		}

	}

	if o.OwnerNameIcontains != nil {

		// query param owner_name__icontains
		var qrOwnerNameIcontains string
		if o.OwnerNameIcontains != nil {
			qrOwnerNameIcontains = *o.OwnerNameIcontains
		}
		qOwnerNameIcontains := qrOwnerNameIcontains
		if qOwnerNameIcontains != "" {
			if err := r.SetQueryParam("owner_name__icontains", qOwnerNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.OwnerNameStartswith != nil {

		// query param owner_name__startswith
		var qrOwnerNameStartswith string
		if o.OwnerNameStartswith != nil {
			qrOwnerNameStartswith = *o.OwnerNameStartswith
		}
		qOwnerNameStartswith := qrOwnerNameStartswith
		if qOwnerNameStartswith != "" {
			if err := r.SetQueryParam("owner_name__startswith", qOwnerNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.OwnerVendorID != nil {

		// query param owner_vendor_id
		var qrOwnerVendorID string
		if o.OwnerVendorID != nil {
			qrOwnerVendorID = *o.OwnerVendorID
		}
		qOwnerVendorID := qrOwnerVendorID
		if qOwnerVendorID != "" {
			if err := r.SetQueryParam("owner_vendor_id", qOwnerVendorID); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.ShowForks != nil {

		// query param show_forks
		var qrShowForks string
		if o.ShowForks != nil {
			qrShowForks = *o.ShowForks
		}
		qShowForks := qrShowForks
		if qShowForks != "" {
			if err := r.SetQueryParam("show_forks", qShowForks); err != nil {
				return err
			}
		}

	}

	if o.SourceType != nil {

		// query param source_type
		var qrSourceType string
		if o.SourceType != nil {
			qrSourceType = *o.SourceType
		}
		qSourceType := qrSourceType
		if qSourceType != "" {
			if err := r.SetQueryParam("source_type", qSourceType); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAt != nil {

		// query param updated_at
		var qrUpdatedAt string
		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {
			if err := r.SetQueryParam("updated_at", qUpdatedAt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtGt != nil {

		// query param updated_at__gt
		var qrUpdatedAtGt string
		if o.UpdatedAtGt != nil {
			qrUpdatedAtGt = *o.UpdatedAtGt
		}
		qUpdatedAtGt := qrUpdatedAtGt
		if qUpdatedAtGt != "" {
			if err := r.SetQueryParam("updated_at__gt", qUpdatedAtGt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtGte != nil {

		// query param updated_at__gte
		var qrUpdatedAtGte string
		if o.UpdatedAtGte != nil {
			qrUpdatedAtGte = *o.UpdatedAtGte
		}
		qUpdatedAtGte := qrUpdatedAtGte
		if qUpdatedAtGte != "" {
			if err := r.SetQueryParam("updated_at__gte", qUpdatedAtGte); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtLt != nil {

		// query param updated_at__lt
		var qrUpdatedAtLt string
		if o.UpdatedAtLt != nil {
			qrUpdatedAtLt = *o.UpdatedAtLt
		}
		qUpdatedAtLt := qrUpdatedAtLt
		if qUpdatedAtLt != "" {
			if err := r.SetQueryParam("updated_at__lt", qUpdatedAtLt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtLte != nil {

		// query param updated_at__lte
		var qrUpdatedAtLte string
		if o.UpdatedAtLte != nil {
			qrUpdatedAtLte = *o.UpdatedAtLte
		}
		qUpdatedAtLte := qrUpdatedAtLte
		if qUpdatedAtLte != "" {
			if err := r.SetQueryParam("updated_at__lte", qUpdatedAtLte); err != nil {
				return err
			}
		}

	}

	if o.VendorType != nil {

		// query param vendor_type
		var qrVendorType string
		if o.VendorType != nil {
			qrVendorType = *o.VendorType
		}
		qVendorType := qrVendorType
		if qVendorType != "" {
			if err := r.SetQueryParam("vendor_type", qVendorType); err != nil {
				return err
			}
		}

	}

	if o.VendorTypeIcontains != nil {

		// query param vendor_type__icontains
		var qrVendorTypeIcontains string
		if o.VendorTypeIcontains != nil {
			qrVendorTypeIcontains = *o.VendorTypeIcontains
		}
		qVendorTypeIcontains := qrVendorTypeIcontains
		if qVendorTypeIcontains != "" {
			if err := r.SetQueryParam("vendor_type__icontains", qVendorTypeIcontains); err != nil {
				return err
			}
		}

	}

	if o.VendorTypeStartswith != nil {

		// query param vendor_type__startswith
		var qrVendorTypeStartswith string
		if o.VendorTypeStartswith != nil {
			qrVendorTypeStartswith = *o.VendorTypeStartswith
		}
		qVendorTypeStartswith := qrVendorTypeStartswith
		if qVendorTypeStartswith != "" {
			if err := r.SetQueryParam("vendor_type__startswith", qVendorTypeStartswith); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
