// Code generated by go-swagger; DO NOT EDIT.

package repos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReposListParams creates a new ReposListParams object
// with the default values initialized.
func NewReposListParams() *ReposListParams {
	var ()
	return &ReposListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReposListParamsWithTimeout creates a new ReposListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReposListParamsWithTimeout(timeout time.Duration) *ReposListParams {
	var ()
	return &ReposListParams{

		timeout: timeout,
	}
}

// NewReposListParamsWithContext creates a new ReposListParams object
// with the default values initialized, and the ability to set a context for a request
func NewReposListParamsWithContext(ctx context.Context) *ReposListParams {
	var ()
	return &ReposListParams{

		Context: ctx,
	}
}

// NewReposListParamsWithHTTPClient creates a new ReposListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReposListParamsWithHTTPClient(client *http.Client) *ReposListParams {
	var ()
	return &ReposListParams{
		HTTPClient: client,
	}
}

/*ReposListParams contains all the parameters to send to the API endpoint
for the repos list operation typically these are written to a http.Request
*/
type ReposListParams struct {

	/*AddedBy
	  Filter-traversable object

	*/
	AddedBy *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*Integration
	  Filter-traversable object

	*/
	Integration *string
	/*IntegrationName*/
	IntegrationName *string
	/*IntegrationNameIcontains*/
	IntegrationNameIcontains *string
	/*IntegrationNameStartswith*/
	IntegrationNameStartswith *string
	/*LastFailureOrSuccessAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastFailureOrSuccessAt *string
	/*LastFailureOrSuccessAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastFailureOrSuccessAtGt *string
	/*LastFailureOrSuccessAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastFailureOrSuccessAtGte *string
	/*LastFailureOrSuccessAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastFailureOrSuccessAtLt *string
	/*LastFailureOrSuccessAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastFailureOrSuccessAtLte *string
	/*LastProcessingSuccessAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastProcessingSuccessAt *string
	/*LastProcessingSuccessAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastProcessingSuccessAtGt *string
	/*LastProcessingSuccessAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastProcessingSuccessAtGte *string
	/*LastProcessingSuccessAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastProcessingSuccessAtLt *string
	/*LastProcessingSuccessAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastProcessingSuccessAtLte *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*OldestCommitDate
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	OldestCommitDate *string
	/*OldestCommitDateGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	OldestCommitDateGt *string
	/*OldestCommitDateGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	OldestCommitDateGte *string
	/*OldestCommitDateLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	OldestCommitDateLt *string
	/*OldestCommitDateLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	OldestCommitDateLte *string
	/*Ordering
	  Valid ordering fields are: `project_id`, `youngest_commit_date`, `oldest_commit_date`, `project__processing__last_processing_success_at`, `project__name`, `vendor_type`, `project__integration__name`, `project__processing__updated_at`, `sortable_state`, `owner_name`, `last_failure_or_success_at`

	*/
	Ordering *string
	/*OwnerName*/
	OwnerName *string
	/*OwnerNameIcontains*/
	OwnerNameIcontains *string
	/*OwnerNameStartswith*/
	OwnerNameStartswith *string
	/*ProjectName*/
	ProjectName *string
	/*ProjectNameIcontains*/
	ProjectNameIcontains *string
	/*ProjectNameStartswith*/
	ProjectNameStartswith *string
	/*ProjectURL*/
	ProjectURL *string
	/*ProjectURLIcontains*/
	ProjectURLIcontains *string
	/*ProjectURLStartswith*/
	ProjectURLStartswith *string
	/*ProjectVendorType*/
	ProjectVendorType *string
	/*ProjectVendorTypeIcontains*/
	ProjectVendorTypeIcontains *string
	/*ProjectVendorTypeStartswith*/
	ProjectVendorTypeStartswith *string
	/*ProjectID*/
	ProjectID *string
	/*ProjectIDIn
	  Multiple values may be separated by commas.

	*/
	ProjectIDIn *string
	/*Search
	  A search term.

	*/
	Search *string
	/*Tags
	  Filter-traversable object

	*/
	Tags *string
	/*UpdatedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAt *string
	/*UpdatedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAtGt *string
	/*UpdatedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAtGte *string
	/*UpdatedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAtLt *string
	/*UpdatedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAtLte *string
	/*YoungestCommitDate
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	YoungestCommitDate *string
	/*YoungestCommitDateGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	YoungestCommitDateGt *string
	/*YoungestCommitDateGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	YoungestCommitDateGte *string
	/*YoungestCommitDateLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	YoungestCommitDateLt *string
	/*YoungestCommitDateLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	YoungestCommitDateLte *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repos list params
func (o *ReposListParams) WithTimeout(timeout time.Duration) *ReposListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repos list params
func (o *ReposListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repos list params
func (o *ReposListParams) WithContext(ctx context.Context) *ReposListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repos list params
func (o *ReposListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repos list params
func (o *ReposListParams) WithHTTPClient(client *http.Client) *ReposListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repos list params
func (o *ReposListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddedBy adds the addedBy to the repos list params
func (o *ReposListParams) WithAddedBy(addedBy *string) *ReposListParams {
	o.SetAddedBy(addedBy)
	return o
}

// SetAddedBy adds the addedBy to the repos list params
func (o *ReposListParams) SetAddedBy(addedBy *string) {
	o.AddedBy = addedBy
}

// WithFilters adds the filters to the repos list params
func (o *ReposListParams) WithFilters(filters *string) *ReposListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the repos list params
func (o *ReposListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithIntegration adds the integration to the repos list params
func (o *ReposListParams) WithIntegration(integration *string) *ReposListParams {
	o.SetIntegration(integration)
	return o
}

// SetIntegration adds the integration to the repos list params
func (o *ReposListParams) SetIntegration(integration *string) {
	o.Integration = integration
}

// WithIntegrationName adds the integrationName to the repos list params
func (o *ReposListParams) WithIntegrationName(integrationName *string) *ReposListParams {
	o.SetIntegrationName(integrationName)
	return o
}

// SetIntegrationName adds the integrationName to the repos list params
func (o *ReposListParams) SetIntegrationName(integrationName *string) {
	o.IntegrationName = integrationName
}

// WithIntegrationNameIcontains adds the integrationNameIcontains to the repos list params
func (o *ReposListParams) WithIntegrationNameIcontains(integrationNameIcontains *string) *ReposListParams {
	o.SetIntegrationNameIcontains(integrationNameIcontains)
	return o
}

// SetIntegrationNameIcontains adds the integrationNameIcontains to the repos list params
func (o *ReposListParams) SetIntegrationNameIcontains(integrationNameIcontains *string) {
	o.IntegrationNameIcontains = integrationNameIcontains
}

// WithIntegrationNameStartswith adds the integrationNameStartswith to the repos list params
func (o *ReposListParams) WithIntegrationNameStartswith(integrationNameStartswith *string) *ReposListParams {
	o.SetIntegrationNameStartswith(integrationNameStartswith)
	return o
}

// SetIntegrationNameStartswith adds the integrationNameStartswith to the repos list params
func (o *ReposListParams) SetIntegrationNameStartswith(integrationNameStartswith *string) {
	o.IntegrationNameStartswith = integrationNameStartswith
}

// WithLastFailureOrSuccessAt adds the lastFailureOrSuccessAt to the repos list params
func (o *ReposListParams) WithLastFailureOrSuccessAt(lastFailureOrSuccessAt *string) *ReposListParams {
	o.SetLastFailureOrSuccessAt(lastFailureOrSuccessAt)
	return o
}

// SetLastFailureOrSuccessAt adds the lastFailureOrSuccessAt to the repos list params
func (o *ReposListParams) SetLastFailureOrSuccessAt(lastFailureOrSuccessAt *string) {
	o.LastFailureOrSuccessAt = lastFailureOrSuccessAt
}

// WithLastFailureOrSuccessAtGt adds the lastFailureOrSuccessAtGt to the repos list params
func (o *ReposListParams) WithLastFailureOrSuccessAtGt(lastFailureOrSuccessAtGt *string) *ReposListParams {
	o.SetLastFailureOrSuccessAtGt(lastFailureOrSuccessAtGt)
	return o
}

// SetLastFailureOrSuccessAtGt adds the lastFailureOrSuccessAtGt to the repos list params
func (o *ReposListParams) SetLastFailureOrSuccessAtGt(lastFailureOrSuccessAtGt *string) {
	o.LastFailureOrSuccessAtGt = lastFailureOrSuccessAtGt
}

// WithLastFailureOrSuccessAtGte adds the lastFailureOrSuccessAtGte to the repos list params
func (o *ReposListParams) WithLastFailureOrSuccessAtGte(lastFailureOrSuccessAtGte *string) *ReposListParams {
	o.SetLastFailureOrSuccessAtGte(lastFailureOrSuccessAtGte)
	return o
}

// SetLastFailureOrSuccessAtGte adds the lastFailureOrSuccessAtGte to the repos list params
func (o *ReposListParams) SetLastFailureOrSuccessAtGte(lastFailureOrSuccessAtGte *string) {
	o.LastFailureOrSuccessAtGte = lastFailureOrSuccessAtGte
}

// WithLastFailureOrSuccessAtLt adds the lastFailureOrSuccessAtLt to the repos list params
func (o *ReposListParams) WithLastFailureOrSuccessAtLt(lastFailureOrSuccessAtLt *string) *ReposListParams {
	o.SetLastFailureOrSuccessAtLt(lastFailureOrSuccessAtLt)
	return o
}

// SetLastFailureOrSuccessAtLt adds the lastFailureOrSuccessAtLt to the repos list params
func (o *ReposListParams) SetLastFailureOrSuccessAtLt(lastFailureOrSuccessAtLt *string) {
	o.LastFailureOrSuccessAtLt = lastFailureOrSuccessAtLt
}

// WithLastFailureOrSuccessAtLte adds the lastFailureOrSuccessAtLte to the repos list params
func (o *ReposListParams) WithLastFailureOrSuccessAtLte(lastFailureOrSuccessAtLte *string) *ReposListParams {
	o.SetLastFailureOrSuccessAtLte(lastFailureOrSuccessAtLte)
	return o
}

// SetLastFailureOrSuccessAtLte adds the lastFailureOrSuccessAtLte to the repos list params
func (o *ReposListParams) SetLastFailureOrSuccessAtLte(lastFailureOrSuccessAtLte *string) {
	o.LastFailureOrSuccessAtLte = lastFailureOrSuccessAtLte
}

// WithLastProcessingSuccessAt adds the lastProcessingSuccessAt to the repos list params
func (o *ReposListParams) WithLastProcessingSuccessAt(lastProcessingSuccessAt *string) *ReposListParams {
	o.SetLastProcessingSuccessAt(lastProcessingSuccessAt)
	return o
}

// SetLastProcessingSuccessAt adds the lastProcessingSuccessAt to the repos list params
func (o *ReposListParams) SetLastProcessingSuccessAt(lastProcessingSuccessAt *string) {
	o.LastProcessingSuccessAt = lastProcessingSuccessAt
}

// WithLastProcessingSuccessAtGt adds the lastProcessingSuccessAtGt to the repos list params
func (o *ReposListParams) WithLastProcessingSuccessAtGt(lastProcessingSuccessAtGt *string) *ReposListParams {
	o.SetLastProcessingSuccessAtGt(lastProcessingSuccessAtGt)
	return o
}

// SetLastProcessingSuccessAtGt adds the lastProcessingSuccessAtGt to the repos list params
func (o *ReposListParams) SetLastProcessingSuccessAtGt(lastProcessingSuccessAtGt *string) {
	o.LastProcessingSuccessAtGt = lastProcessingSuccessAtGt
}

// WithLastProcessingSuccessAtGte adds the lastProcessingSuccessAtGte to the repos list params
func (o *ReposListParams) WithLastProcessingSuccessAtGte(lastProcessingSuccessAtGte *string) *ReposListParams {
	o.SetLastProcessingSuccessAtGte(lastProcessingSuccessAtGte)
	return o
}

// SetLastProcessingSuccessAtGte adds the lastProcessingSuccessAtGte to the repos list params
func (o *ReposListParams) SetLastProcessingSuccessAtGte(lastProcessingSuccessAtGte *string) {
	o.LastProcessingSuccessAtGte = lastProcessingSuccessAtGte
}

// WithLastProcessingSuccessAtLt adds the lastProcessingSuccessAtLt to the repos list params
func (o *ReposListParams) WithLastProcessingSuccessAtLt(lastProcessingSuccessAtLt *string) *ReposListParams {
	o.SetLastProcessingSuccessAtLt(lastProcessingSuccessAtLt)
	return o
}

// SetLastProcessingSuccessAtLt adds the lastProcessingSuccessAtLt to the repos list params
func (o *ReposListParams) SetLastProcessingSuccessAtLt(lastProcessingSuccessAtLt *string) {
	o.LastProcessingSuccessAtLt = lastProcessingSuccessAtLt
}

// WithLastProcessingSuccessAtLte adds the lastProcessingSuccessAtLte to the repos list params
func (o *ReposListParams) WithLastProcessingSuccessAtLte(lastProcessingSuccessAtLte *string) *ReposListParams {
	o.SetLastProcessingSuccessAtLte(lastProcessingSuccessAtLte)
	return o
}

// SetLastProcessingSuccessAtLte adds the lastProcessingSuccessAtLte to the repos list params
func (o *ReposListParams) SetLastProcessingSuccessAtLte(lastProcessingSuccessAtLte *string) {
	o.LastProcessingSuccessAtLte = lastProcessingSuccessAtLte
}

// WithLimit adds the limit to the repos list params
func (o *ReposListParams) WithLimit(limit *int64) *ReposListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the repos list params
func (o *ReposListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the repos list params
func (o *ReposListParams) WithOffset(offset *int64) *ReposListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the repos list params
func (o *ReposListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOldestCommitDate adds the oldestCommitDate to the repos list params
func (o *ReposListParams) WithOldestCommitDate(oldestCommitDate *string) *ReposListParams {
	o.SetOldestCommitDate(oldestCommitDate)
	return o
}

// SetOldestCommitDate adds the oldestCommitDate to the repos list params
func (o *ReposListParams) SetOldestCommitDate(oldestCommitDate *string) {
	o.OldestCommitDate = oldestCommitDate
}

// WithOldestCommitDateGt adds the oldestCommitDateGt to the repos list params
func (o *ReposListParams) WithOldestCommitDateGt(oldestCommitDateGt *string) *ReposListParams {
	o.SetOldestCommitDateGt(oldestCommitDateGt)
	return o
}

// SetOldestCommitDateGt adds the oldestCommitDateGt to the repos list params
func (o *ReposListParams) SetOldestCommitDateGt(oldestCommitDateGt *string) {
	o.OldestCommitDateGt = oldestCommitDateGt
}

// WithOldestCommitDateGte adds the oldestCommitDateGte to the repos list params
func (o *ReposListParams) WithOldestCommitDateGte(oldestCommitDateGte *string) *ReposListParams {
	o.SetOldestCommitDateGte(oldestCommitDateGte)
	return o
}

// SetOldestCommitDateGte adds the oldestCommitDateGte to the repos list params
func (o *ReposListParams) SetOldestCommitDateGte(oldestCommitDateGte *string) {
	o.OldestCommitDateGte = oldestCommitDateGte
}

// WithOldestCommitDateLt adds the oldestCommitDateLt to the repos list params
func (o *ReposListParams) WithOldestCommitDateLt(oldestCommitDateLt *string) *ReposListParams {
	o.SetOldestCommitDateLt(oldestCommitDateLt)
	return o
}

// SetOldestCommitDateLt adds the oldestCommitDateLt to the repos list params
func (o *ReposListParams) SetOldestCommitDateLt(oldestCommitDateLt *string) {
	o.OldestCommitDateLt = oldestCommitDateLt
}

// WithOldestCommitDateLte adds the oldestCommitDateLte to the repos list params
func (o *ReposListParams) WithOldestCommitDateLte(oldestCommitDateLte *string) *ReposListParams {
	o.SetOldestCommitDateLte(oldestCommitDateLte)
	return o
}

// SetOldestCommitDateLte adds the oldestCommitDateLte to the repos list params
func (o *ReposListParams) SetOldestCommitDateLte(oldestCommitDateLte *string) {
	o.OldestCommitDateLte = oldestCommitDateLte
}

// WithOrdering adds the ordering to the repos list params
func (o *ReposListParams) WithOrdering(ordering *string) *ReposListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the repos list params
func (o *ReposListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithOwnerName adds the ownerName to the repos list params
func (o *ReposListParams) WithOwnerName(ownerName *string) *ReposListParams {
	o.SetOwnerName(ownerName)
	return o
}

// SetOwnerName adds the ownerName to the repos list params
func (o *ReposListParams) SetOwnerName(ownerName *string) {
	o.OwnerName = ownerName
}

// WithOwnerNameIcontains adds the ownerNameIcontains to the repos list params
func (o *ReposListParams) WithOwnerNameIcontains(ownerNameIcontains *string) *ReposListParams {
	o.SetOwnerNameIcontains(ownerNameIcontains)
	return o
}

// SetOwnerNameIcontains adds the ownerNameIcontains to the repos list params
func (o *ReposListParams) SetOwnerNameIcontains(ownerNameIcontains *string) {
	o.OwnerNameIcontains = ownerNameIcontains
}

// WithOwnerNameStartswith adds the ownerNameStartswith to the repos list params
func (o *ReposListParams) WithOwnerNameStartswith(ownerNameStartswith *string) *ReposListParams {
	o.SetOwnerNameStartswith(ownerNameStartswith)
	return o
}

// SetOwnerNameStartswith adds the ownerNameStartswith to the repos list params
func (o *ReposListParams) SetOwnerNameStartswith(ownerNameStartswith *string) {
	o.OwnerNameStartswith = ownerNameStartswith
}

// WithProjectName adds the projectName to the repos list params
func (o *ReposListParams) WithProjectName(projectName *string) *ReposListParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the repos list params
func (o *ReposListParams) SetProjectName(projectName *string) {
	o.ProjectName = projectName
}

// WithProjectNameIcontains adds the projectNameIcontains to the repos list params
func (o *ReposListParams) WithProjectNameIcontains(projectNameIcontains *string) *ReposListParams {
	o.SetProjectNameIcontains(projectNameIcontains)
	return o
}

// SetProjectNameIcontains adds the projectNameIcontains to the repos list params
func (o *ReposListParams) SetProjectNameIcontains(projectNameIcontains *string) {
	o.ProjectNameIcontains = projectNameIcontains
}

// WithProjectNameStartswith adds the projectNameStartswith to the repos list params
func (o *ReposListParams) WithProjectNameStartswith(projectNameStartswith *string) *ReposListParams {
	o.SetProjectNameStartswith(projectNameStartswith)
	return o
}

// SetProjectNameStartswith adds the projectNameStartswith to the repos list params
func (o *ReposListParams) SetProjectNameStartswith(projectNameStartswith *string) {
	o.ProjectNameStartswith = projectNameStartswith
}

// WithProjectURL adds the projectURL to the repos list params
func (o *ReposListParams) WithProjectURL(projectURL *string) *ReposListParams {
	o.SetProjectURL(projectURL)
	return o
}

// SetProjectURL adds the projectUrl to the repos list params
func (o *ReposListParams) SetProjectURL(projectURL *string) {
	o.ProjectURL = projectURL
}

// WithProjectURLIcontains adds the projectURLIcontains to the repos list params
func (o *ReposListParams) WithProjectURLIcontains(projectURLIcontains *string) *ReposListParams {
	o.SetProjectURLIcontains(projectURLIcontains)
	return o
}

// SetProjectURLIcontains adds the projectUrlIcontains to the repos list params
func (o *ReposListParams) SetProjectURLIcontains(projectURLIcontains *string) {
	o.ProjectURLIcontains = projectURLIcontains
}

// WithProjectURLStartswith adds the projectURLStartswith to the repos list params
func (o *ReposListParams) WithProjectURLStartswith(projectURLStartswith *string) *ReposListParams {
	o.SetProjectURLStartswith(projectURLStartswith)
	return o
}

// SetProjectURLStartswith adds the projectUrlStartswith to the repos list params
func (o *ReposListParams) SetProjectURLStartswith(projectURLStartswith *string) {
	o.ProjectURLStartswith = projectURLStartswith
}

// WithProjectVendorType adds the projectVendorType to the repos list params
func (o *ReposListParams) WithProjectVendorType(projectVendorType *string) *ReposListParams {
	o.SetProjectVendorType(projectVendorType)
	return o
}

// SetProjectVendorType adds the projectVendorType to the repos list params
func (o *ReposListParams) SetProjectVendorType(projectVendorType *string) {
	o.ProjectVendorType = projectVendorType
}

// WithProjectVendorTypeIcontains adds the projectVendorTypeIcontains to the repos list params
func (o *ReposListParams) WithProjectVendorTypeIcontains(projectVendorTypeIcontains *string) *ReposListParams {
	o.SetProjectVendorTypeIcontains(projectVendorTypeIcontains)
	return o
}

// SetProjectVendorTypeIcontains adds the projectVendorTypeIcontains to the repos list params
func (o *ReposListParams) SetProjectVendorTypeIcontains(projectVendorTypeIcontains *string) {
	o.ProjectVendorTypeIcontains = projectVendorTypeIcontains
}

// WithProjectVendorTypeStartswith adds the projectVendorTypeStartswith to the repos list params
func (o *ReposListParams) WithProjectVendorTypeStartswith(projectVendorTypeStartswith *string) *ReposListParams {
	o.SetProjectVendorTypeStartswith(projectVendorTypeStartswith)
	return o
}

// SetProjectVendorTypeStartswith adds the projectVendorTypeStartswith to the repos list params
func (o *ReposListParams) SetProjectVendorTypeStartswith(projectVendorTypeStartswith *string) {
	o.ProjectVendorTypeStartswith = projectVendorTypeStartswith
}

// WithProjectID adds the projectID to the repos list params
func (o *ReposListParams) WithProjectID(projectID *string) *ReposListParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the repos list params
func (o *ReposListParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithProjectIDIn adds the projectIDIn to the repos list params
func (o *ReposListParams) WithProjectIDIn(projectIDIn *string) *ReposListParams {
	o.SetProjectIDIn(projectIDIn)
	return o
}

// SetProjectIDIn adds the projectIdIn to the repos list params
func (o *ReposListParams) SetProjectIDIn(projectIDIn *string) {
	o.ProjectIDIn = projectIDIn
}

// WithSearch adds the search to the repos list params
func (o *ReposListParams) WithSearch(search *string) *ReposListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the repos list params
func (o *ReposListParams) SetSearch(search *string) {
	o.Search = search
}

// WithTags adds the tags to the repos list params
func (o *ReposListParams) WithTags(tags *string) *ReposListParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the repos list params
func (o *ReposListParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithUpdatedAt adds the updatedAt to the repos list params
func (o *ReposListParams) WithUpdatedAt(updatedAt *string) *ReposListParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the repos list params
func (o *ReposListParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUpdatedAtGt adds the updatedAtGt to the repos list params
func (o *ReposListParams) WithUpdatedAtGt(updatedAtGt *string) *ReposListParams {
	o.SetUpdatedAtGt(updatedAtGt)
	return o
}

// SetUpdatedAtGt adds the updatedAtGt to the repos list params
func (o *ReposListParams) SetUpdatedAtGt(updatedAtGt *string) {
	o.UpdatedAtGt = updatedAtGt
}

// WithUpdatedAtGte adds the updatedAtGte to the repos list params
func (o *ReposListParams) WithUpdatedAtGte(updatedAtGte *string) *ReposListParams {
	o.SetUpdatedAtGte(updatedAtGte)
	return o
}

// SetUpdatedAtGte adds the updatedAtGte to the repos list params
func (o *ReposListParams) SetUpdatedAtGte(updatedAtGte *string) {
	o.UpdatedAtGte = updatedAtGte
}

// WithUpdatedAtLt adds the updatedAtLt to the repos list params
func (o *ReposListParams) WithUpdatedAtLt(updatedAtLt *string) *ReposListParams {
	o.SetUpdatedAtLt(updatedAtLt)
	return o
}

// SetUpdatedAtLt adds the updatedAtLt to the repos list params
func (o *ReposListParams) SetUpdatedAtLt(updatedAtLt *string) {
	o.UpdatedAtLt = updatedAtLt
}

// WithUpdatedAtLte adds the updatedAtLte to the repos list params
func (o *ReposListParams) WithUpdatedAtLte(updatedAtLte *string) *ReposListParams {
	o.SetUpdatedAtLte(updatedAtLte)
	return o
}

// SetUpdatedAtLte adds the updatedAtLte to the repos list params
func (o *ReposListParams) SetUpdatedAtLte(updatedAtLte *string) {
	o.UpdatedAtLte = updatedAtLte
}

// WithYoungestCommitDate adds the youngestCommitDate to the repos list params
func (o *ReposListParams) WithYoungestCommitDate(youngestCommitDate *string) *ReposListParams {
	o.SetYoungestCommitDate(youngestCommitDate)
	return o
}

// SetYoungestCommitDate adds the youngestCommitDate to the repos list params
func (o *ReposListParams) SetYoungestCommitDate(youngestCommitDate *string) {
	o.YoungestCommitDate = youngestCommitDate
}

// WithYoungestCommitDateGt adds the youngestCommitDateGt to the repos list params
func (o *ReposListParams) WithYoungestCommitDateGt(youngestCommitDateGt *string) *ReposListParams {
	o.SetYoungestCommitDateGt(youngestCommitDateGt)
	return o
}

// SetYoungestCommitDateGt adds the youngestCommitDateGt to the repos list params
func (o *ReposListParams) SetYoungestCommitDateGt(youngestCommitDateGt *string) {
	o.YoungestCommitDateGt = youngestCommitDateGt
}

// WithYoungestCommitDateGte adds the youngestCommitDateGte to the repos list params
func (o *ReposListParams) WithYoungestCommitDateGte(youngestCommitDateGte *string) *ReposListParams {
	o.SetYoungestCommitDateGte(youngestCommitDateGte)
	return o
}

// SetYoungestCommitDateGte adds the youngestCommitDateGte to the repos list params
func (o *ReposListParams) SetYoungestCommitDateGte(youngestCommitDateGte *string) {
	o.YoungestCommitDateGte = youngestCommitDateGte
}

// WithYoungestCommitDateLt adds the youngestCommitDateLt to the repos list params
func (o *ReposListParams) WithYoungestCommitDateLt(youngestCommitDateLt *string) *ReposListParams {
	o.SetYoungestCommitDateLt(youngestCommitDateLt)
	return o
}

// SetYoungestCommitDateLt adds the youngestCommitDateLt to the repos list params
func (o *ReposListParams) SetYoungestCommitDateLt(youngestCommitDateLt *string) {
	o.YoungestCommitDateLt = youngestCommitDateLt
}

// WithYoungestCommitDateLte adds the youngestCommitDateLte to the repos list params
func (o *ReposListParams) WithYoungestCommitDateLte(youngestCommitDateLte *string) *ReposListParams {
	o.SetYoungestCommitDateLte(youngestCommitDateLte)
	return o
}

// SetYoungestCommitDateLte adds the youngestCommitDateLte to the repos list params
func (o *ReposListParams) SetYoungestCommitDateLte(youngestCommitDateLte *string) {
	o.YoungestCommitDateLte = youngestCommitDateLte
}

// WriteToRequest writes these params to a swagger request
func (o *ReposListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddedBy != nil {

		// query param added_by
		var qrAddedBy string
		if o.AddedBy != nil {
			qrAddedBy = *o.AddedBy
		}
		qAddedBy := qrAddedBy
		if qAddedBy != "" {
			if err := r.SetQueryParam("added_by", qAddedBy); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.Integration != nil {

		// query param integration
		var qrIntegration string
		if o.Integration != nil {
			qrIntegration = *o.Integration
		}
		qIntegration := qrIntegration
		if qIntegration != "" {
			if err := r.SetQueryParam("integration", qIntegration); err != nil {
				return err
			}
		}

	}

	if o.IntegrationName != nil {

		// query param integration__name
		var qrIntegrationName string
		if o.IntegrationName != nil {
			qrIntegrationName = *o.IntegrationName
		}
		qIntegrationName := qrIntegrationName
		if qIntegrationName != "" {
			if err := r.SetQueryParam("integration__name", qIntegrationName); err != nil {
				return err
			}
		}

	}

	if o.IntegrationNameIcontains != nil {

		// query param integration__name__icontains
		var qrIntegrationNameIcontains string
		if o.IntegrationNameIcontains != nil {
			qrIntegrationNameIcontains = *o.IntegrationNameIcontains
		}
		qIntegrationNameIcontains := qrIntegrationNameIcontains
		if qIntegrationNameIcontains != "" {
			if err := r.SetQueryParam("integration__name__icontains", qIntegrationNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.IntegrationNameStartswith != nil {

		// query param integration__name__startswith
		var qrIntegrationNameStartswith string
		if o.IntegrationNameStartswith != nil {
			qrIntegrationNameStartswith = *o.IntegrationNameStartswith
		}
		qIntegrationNameStartswith := qrIntegrationNameStartswith
		if qIntegrationNameStartswith != "" {
			if err := r.SetQueryParam("integration__name__startswith", qIntegrationNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.LastFailureOrSuccessAt != nil {

		// query param last_failure_or_success_at
		var qrLastFailureOrSuccessAt string
		if o.LastFailureOrSuccessAt != nil {
			qrLastFailureOrSuccessAt = *o.LastFailureOrSuccessAt
		}
		qLastFailureOrSuccessAt := qrLastFailureOrSuccessAt
		if qLastFailureOrSuccessAt != "" {
			if err := r.SetQueryParam("last_failure_or_success_at", qLastFailureOrSuccessAt); err != nil {
				return err
			}
		}

	}

	if o.LastFailureOrSuccessAtGt != nil {

		// query param last_failure_or_success_at__gt
		var qrLastFailureOrSuccessAtGt string
		if o.LastFailureOrSuccessAtGt != nil {
			qrLastFailureOrSuccessAtGt = *o.LastFailureOrSuccessAtGt
		}
		qLastFailureOrSuccessAtGt := qrLastFailureOrSuccessAtGt
		if qLastFailureOrSuccessAtGt != "" {
			if err := r.SetQueryParam("last_failure_or_success_at__gt", qLastFailureOrSuccessAtGt); err != nil {
				return err
			}
		}

	}

	if o.LastFailureOrSuccessAtGte != nil {

		// query param last_failure_or_success_at__gte
		var qrLastFailureOrSuccessAtGte string
		if o.LastFailureOrSuccessAtGte != nil {
			qrLastFailureOrSuccessAtGte = *o.LastFailureOrSuccessAtGte
		}
		qLastFailureOrSuccessAtGte := qrLastFailureOrSuccessAtGte
		if qLastFailureOrSuccessAtGte != "" {
			if err := r.SetQueryParam("last_failure_or_success_at__gte", qLastFailureOrSuccessAtGte); err != nil {
				return err
			}
		}

	}

	if o.LastFailureOrSuccessAtLt != nil {

		// query param last_failure_or_success_at__lt
		var qrLastFailureOrSuccessAtLt string
		if o.LastFailureOrSuccessAtLt != nil {
			qrLastFailureOrSuccessAtLt = *o.LastFailureOrSuccessAtLt
		}
		qLastFailureOrSuccessAtLt := qrLastFailureOrSuccessAtLt
		if qLastFailureOrSuccessAtLt != "" {
			if err := r.SetQueryParam("last_failure_or_success_at__lt", qLastFailureOrSuccessAtLt); err != nil {
				return err
			}
		}

	}

	if o.LastFailureOrSuccessAtLte != nil {

		// query param last_failure_or_success_at__lte
		var qrLastFailureOrSuccessAtLte string
		if o.LastFailureOrSuccessAtLte != nil {
			qrLastFailureOrSuccessAtLte = *o.LastFailureOrSuccessAtLte
		}
		qLastFailureOrSuccessAtLte := qrLastFailureOrSuccessAtLte
		if qLastFailureOrSuccessAtLte != "" {
			if err := r.SetQueryParam("last_failure_or_success_at__lte", qLastFailureOrSuccessAtLte); err != nil {
				return err
			}
		}

	}

	if o.LastProcessingSuccessAt != nil {

		// query param last_processing_success_at
		var qrLastProcessingSuccessAt string
		if o.LastProcessingSuccessAt != nil {
			qrLastProcessingSuccessAt = *o.LastProcessingSuccessAt
		}
		qLastProcessingSuccessAt := qrLastProcessingSuccessAt
		if qLastProcessingSuccessAt != "" {
			if err := r.SetQueryParam("last_processing_success_at", qLastProcessingSuccessAt); err != nil {
				return err
			}
		}

	}

	if o.LastProcessingSuccessAtGt != nil {

		// query param last_processing_success_at__gt
		var qrLastProcessingSuccessAtGt string
		if o.LastProcessingSuccessAtGt != nil {
			qrLastProcessingSuccessAtGt = *o.LastProcessingSuccessAtGt
		}
		qLastProcessingSuccessAtGt := qrLastProcessingSuccessAtGt
		if qLastProcessingSuccessAtGt != "" {
			if err := r.SetQueryParam("last_processing_success_at__gt", qLastProcessingSuccessAtGt); err != nil {
				return err
			}
		}

	}

	if o.LastProcessingSuccessAtGte != nil {

		// query param last_processing_success_at__gte
		var qrLastProcessingSuccessAtGte string
		if o.LastProcessingSuccessAtGte != nil {
			qrLastProcessingSuccessAtGte = *o.LastProcessingSuccessAtGte
		}
		qLastProcessingSuccessAtGte := qrLastProcessingSuccessAtGte
		if qLastProcessingSuccessAtGte != "" {
			if err := r.SetQueryParam("last_processing_success_at__gte", qLastProcessingSuccessAtGte); err != nil {
				return err
			}
		}

	}

	if o.LastProcessingSuccessAtLt != nil {

		// query param last_processing_success_at__lt
		var qrLastProcessingSuccessAtLt string
		if o.LastProcessingSuccessAtLt != nil {
			qrLastProcessingSuccessAtLt = *o.LastProcessingSuccessAtLt
		}
		qLastProcessingSuccessAtLt := qrLastProcessingSuccessAtLt
		if qLastProcessingSuccessAtLt != "" {
			if err := r.SetQueryParam("last_processing_success_at__lt", qLastProcessingSuccessAtLt); err != nil {
				return err
			}
		}

	}

	if o.LastProcessingSuccessAtLte != nil {

		// query param last_processing_success_at__lte
		var qrLastProcessingSuccessAtLte string
		if o.LastProcessingSuccessAtLte != nil {
			qrLastProcessingSuccessAtLte = *o.LastProcessingSuccessAtLte
		}
		qLastProcessingSuccessAtLte := qrLastProcessingSuccessAtLte
		if qLastProcessingSuccessAtLte != "" {
			if err := r.SetQueryParam("last_processing_success_at__lte", qLastProcessingSuccessAtLte); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.OldestCommitDate != nil {

		// query param oldest_commit_date
		var qrOldestCommitDate string
		if o.OldestCommitDate != nil {
			qrOldestCommitDate = *o.OldestCommitDate
		}
		qOldestCommitDate := qrOldestCommitDate
		if qOldestCommitDate != "" {
			if err := r.SetQueryParam("oldest_commit_date", qOldestCommitDate); err != nil {
				return err
			}
		}

	}

	if o.OldestCommitDateGt != nil {

		// query param oldest_commit_date__gt
		var qrOldestCommitDateGt string
		if o.OldestCommitDateGt != nil {
			qrOldestCommitDateGt = *o.OldestCommitDateGt
		}
		qOldestCommitDateGt := qrOldestCommitDateGt
		if qOldestCommitDateGt != "" {
			if err := r.SetQueryParam("oldest_commit_date__gt", qOldestCommitDateGt); err != nil {
				return err
			}
		}

	}

	if o.OldestCommitDateGte != nil {

		// query param oldest_commit_date__gte
		var qrOldestCommitDateGte string
		if o.OldestCommitDateGte != nil {
			qrOldestCommitDateGte = *o.OldestCommitDateGte
		}
		qOldestCommitDateGte := qrOldestCommitDateGte
		if qOldestCommitDateGte != "" {
			if err := r.SetQueryParam("oldest_commit_date__gte", qOldestCommitDateGte); err != nil {
				return err
			}
		}

	}

	if o.OldestCommitDateLt != nil {

		// query param oldest_commit_date__lt
		var qrOldestCommitDateLt string
		if o.OldestCommitDateLt != nil {
			qrOldestCommitDateLt = *o.OldestCommitDateLt
		}
		qOldestCommitDateLt := qrOldestCommitDateLt
		if qOldestCommitDateLt != "" {
			if err := r.SetQueryParam("oldest_commit_date__lt", qOldestCommitDateLt); err != nil {
				return err
			}
		}

	}

	if o.OldestCommitDateLte != nil {

		// query param oldest_commit_date__lte
		var qrOldestCommitDateLte string
		if o.OldestCommitDateLte != nil {
			qrOldestCommitDateLte = *o.OldestCommitDateLte
		}
		qOldestCommitDateLte := qrOldestCommitDateLte
		if qOldestCommitDateLte != "" {
			if err := r.SetQueryParam("oldest_commit_date__lte", qOldestCommitDateLte); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.OwnerName != nil {

		// query param owner_name
		var qrOwnerName string
		if o.OwnerName != nil {
			qrOwnerName = *o.OwnerName
		}
		qOwnerName := qrOwnerName
		if qOwnerName != "" {
			if err := r.SetQueryParam("owner_name", qOwnerName); err != nil {
				return err
			}
		}

	}

	if o.OwnerNameIcontains != nil {

		// query param owner_name__icontains
		var qrOwnerNameIcontains string
		if o.OwnerNameIcontains != nil {
			qrOwnerNameIcontains = *o.OwnerNameIcontains
		}
		qOwnerNameIcontains := qrOwnerNameIcontains
		if qOwnerNameIcontains != "" {
			if err := r.SetQueryParam("owner_name__icontains", qOwnerNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.OwnerNameStartswith != nil {

		// query param owner_name__startswith
		var qrOwnerNameStartswith string
		if o.OwnerNameStartswith != nil {
			qrOwnerNameStartswith = *o.OwnerNameStartswith
		}
		qOwnerNameStartswith := qrOwnerNameStartswith
		if qOwnerNameStartswith != "" {
			if err := r.SetQueryParam("owner_name__startswith", qOwnerNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.ProjectName != nil {

		// query param project__name
		var qrProjectName string
		if o.ProjectName != nil {
			qrProjectName = *o.ProjectName
		}
		qProjectName := qrProjectName
		if qProjectName != "" {
			if err := r.SetQueryParam("project__name", qProjectName); err != nil {
				return err
			}
		}

	}

	if o.ProjectNameIcontains != nil {

		// query param project__name__icontains
		var qrProjectNameIcontains string
		if o.ProjectNameIcontains != nil {
			qrProjectNameIcontains = *o.ProjectNameIcontains
		}
		qProjectNameIcontains := qrProjectNameIcontains
		if qProjectNameIcontains != "" {
			if err := r.SetQueryParam("project__name__icontains", qProjectNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.ProjectNameStartswith != nil {

		// query param project__name__startswith
		var qrProjectNameStartswith string
		if o.ProjectNameStartswith != nil {
			qrProjectNameStartswith = *o.ProjectNameStartswith
		}
		qProjectNameStartswith := qrProjectNameStartswith
		if qProjectNameStartswith != "" {
			if err := r.SetQueryParam("project__name__startswith", qProjectNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.ProjectURL != nil {

		// query param project__url
		var qrProjectURL string
		if o.ProjectURL != nil {
			qrProjectURL = *o.ProjectURL
		}
		qProjectURL := qrProjectURL
		if qProjectURL != "" {
			if err := r.SetQueryParam("project__url", qProjectURL); err != nil {
				return err
			}
		}

	}

	if o.ProjectURLIcontains != nil {

		// query param project__url__icontains
		var qrProjectURLIcontains string
		if o.ProjectURLIcontains != nil {
			qrProjectURLIcontains = *o.ProjectURLIcontains
		}
		qProjectURLIcontains := qrProjectURLIcontains
		if qProjectURLIcontains != "" {
			if err := r.SetQueryParam("project__url__icontains", qProjectURLIcontains); err != nil {
				return err
			}
		}

	}

	if o.ProjectURLStartswith != nil {

		// query param project__url__startswith
		var qrProjectURLStartswith string
		if o.ProjectURLStartswith != nil {
			qrProjectURLStartswith = *o.ProjectURLStartswith
		}
		qProjectURLStartswith := qrProjectURLStartswith
		if qProjectURLStartswith != "" {
			if err := r.SetQueryParam("project__url__startswith", qProjectURLStartswith); err != nil {
				return err
			}
		}

	}

	if o.ProjectVendorType != nil {

		// query param project__vendor_type
		var qrProjectVendorType string
		if o.ProjectVendorType != nil {
			qrProjectVendorType = *o.ProjectVendorType
		}
		qProjectVendorType := qrProjectVendorType
		if qProjectVendorType != "" {
			if err := r.SetQueryParam("project__vendor_type", qProjectVendorType); err != nil {
				return err
			}
		}

	}

	if o.ProjectVendorTypeIcontains != nil {

		// query param project__vendor_type__icontains
		var qrProjectVendorTypeIcontains string
		if o.ProjectVendorTypeIcontains != nil {
			qrProjectVendorTypeIcontains = *o.ProjectVendorTypeIcontains
		}
		qProjectVendorTypeIcontains := qrProjectVendorTypeIcontains
		if qProjectVendorTypeIcontains != "" {
			if err := r.SetQueryParam("project__vendor_type__icontains", qProjectVendorTypeIcontains); err != nil {
				return err
			}
		}

	}

	if o.ProjectVendorTypeStartswith != nil {

		// query param project__vendor_type__startswith
		var qrProjectVendorTypeStartswith string
		if o.ProjectVendorTypeStartswith != nil {
			qrProjectVendorTypeStartswith = *o.ProjectVendorTypeStartswith
		}
		qProjectVendorTypeStartswith := qrProjectVendorTypeStartswith
		if qProjectVendorTypeStartswith != "" {
			if err := r.SetQueryParam("project__vendor_type__startswith", qProjectVendorTypeStartswith); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param project_id
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("project_id", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.ProjectIDIn != nil {

		// query param project_id__in
		var qrProjectIDIn string
		if o.ProjectIDIn != nil {
			qrProjectIDIn = *o.ProjectIDIn
		}
		qProjectIDIn := qrProjectIDIn
		if qProjectIDIn != "" {
			if err := r.SetQueryParam("project_id__in", qProjectIDIn); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.Tags != nil {

		// query param tags
		var qrTags string
		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {
			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAt != nil {

		// query param updated_at
		var qrUpdatedAt string
		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {
			if err := r.SetQueryParam("updated_at", qUpdatedAt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtGt != nil {

		// query param updated_at__gt
		var qrUpdatedAtGt string
		if o.UpdatedAtGt != nil {
			qrUpdatedAtGt = *o.UpdatedAtGt
		}
		qUpdatedAtGt := qrUpdatedAtGt
		if qUpdatedAtGt != "" {
			if err := r.SetQueryParam("updated_at__gt", qUpdatedAtGt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtGte != nil {

		// query param updated_at__gte
		var qrUpdatedAtGte string
		if o.UpdatedAtGte != nil {
			qrUpdatedAtGte = *o.UpdatedAtGte
		}
		qUpdatedAtGte := qrUpdatedAtGte
		if qUpdatedAtGte != "" {
			if err := r.SetQueryParam("updated_at__gte", qUpdatedAtGte); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtLt != nil {

		// query param updated_at__lt
		var qrUpdatedAtLt string
		if o.UpdatedAtLt != nil {
			qrUpdatedAtLt = *o.UpdatedAtLt
		}
		qUpdatedAtLt := qrUpdatedAtLt
		if qUpdatedAtLt != "" {
			if err := r.SetQueryParam("updated_at__lt", qUpdatedAtLt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtLte != nil {

		// query param updated_at__lte
		var qrUpdatedAtLte string
		if o.UpdatedAtLte != nil {
			qrUpdatedAtLte = *o.UpdatedAtLte
		}
		qUpdatedAtLte := qrUpdatedAtLte
		if qUpdatedAtLte != "" {
			if err := r.SetQueryParam("updated_at__lte", qUpdatedAtLte); err != nil {
				return err
			}
		}

	}

	if o.YoungestCommitDate != nil {

		// query param youngest_commit_date
		var qrYoungestCommitDate string
		if o.YoungestCommitDate != nil {
			qrYoungestCommitDate = *o.YoungestCommitDate
		}
		qYoungestCommitDate := qrYoungestCommitDate
		if qYoungestCommitDate != "" {
			if err := r.SetQueryParam("youngest_commit_date", qYoungestCommitDate); err != nil {
				return err
			}
		}

	}

	if o.YoungestCommitDateGt != nil {

		// query param youngest_commit_date__gt
		var qrYoungestCommitDateGt string
		if o.YoungestCommitDateGt != nil {
			qrYoungestCommitDateGt = *o.YoungestCommitDateGt
		}
		qYoungestCommitDateGt := qrYoungestCommitDateGt
		if qYoungestCommitDateGt != "" {
			if err := r.SetQueryParam("youngest_commit_date__gt", qYoungestCommitDateGt); err != nil {
				return err
			}
		}

	}

	if o.YoungestCommitDateGte != nil {

		// query param youngest_commit_date__gte
		var qrYoungestCommitDateGte string
		if o.YoungestCommitDateGte != nil {
			qrYoungestCommitDateGte = *o.YoungestCommitDateGte
		}
		qYoungestCommitDateGte := qrYoungestCommitDateGte
		if qYoungestCommitDateGte != "" {
			if err := r.SetQueryParam("youngest_commit_date__gte", qYoungestCommitDateGte); err != nil {
				return err
			}
		}

	}

	if o.YoungestCommitDateLt != nil {

		// query param youngest_commit_date__lt
		var qrYoungestCommitDateLt string
		if o.YoungestCommitDateLt != nil {
			qrYoungestCommitDateLt = *o.YoungestCommitDateLt
		}
		qYoungestCommitDateLt := qrYoungestCommitDateLt
		if qYoungestCommitDateLt != "" {
			if err := r.SetQueryParam("youngest_commit_date__lt", qYoungestCommitDateLt); err != nil {
				return err
			}
		}

	}

	if o.YoungestCommitDateLte != nil {

		// query param youngest_commit_date__lte
		var qrYoungestCommitDateLte string
		if o.YoungestCommitDateLte != nil {
			qrYoungestCommitDateLte = *o.YoungestCommitDateLte
		}
		qYoungestCommitDateLte := qrYoungestCommitDateLte
		if qYoungestCommitDateLte != "" {
			if err := r.SetQueryParam("youngest_commit_date__lte", qYoungestCommitDateLte); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
