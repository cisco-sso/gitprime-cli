// Code generated by go-swagger; DO NOT EDIT.

package repos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewReposPartialUpdateParams creates a new ReposPartialUpdateParams object
// with the default values initialized.
func NewReposPartialUpdateParams() *ReposPartialUpdateParams {
	var ()
	return &ReposPartialUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReposPartialUpdateParamsWithTimeout creates a new ReposPartialUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReposPartialUpdateParamsWithTimeout(timeout time.Duration) *ReposPartialUpdateParams {
	var ()
	return &ReposPartialUpdateParams{

		timeout: timeout,
	}
}

// NewReposPartialUpdateParamsWithContext creates a new ReposPartialUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewReposPartialUpdateParamsWithContext(ctx context.Context) *ReposPartialUpdateParams {
	var ()
	return &ReposPartialUpdateParams{

		Context: ctx,
	}
}

// NewReposPartialUpdateParamsWithHTTPClient creates a new ReposPartialUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReposPartialUpdateParamsWithHTTPClient(client *http.Client) *ReposPartialUpdateParams {
	var ()
	return &ReposPartialUpdateParams{
		HTTPClient: client,
	}
}

/*ReposPartialUpdateParams contains all the parameters to send to the API endpoint
for the repos partial update operation typically these are written to a http.Request
*/
type ReposPartialUpdateParams struct {

	/*Data*/
	Data ReposPartialUpdateBody
	/*Project
	  A unique value identifying this project repo.

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repos partial update params
func (o *ReposPartialUpdateParams) WithTimeout(timeout time.Duration) *ReposPartialUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repos partial update params
func (o *ReposPartialUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repos partial update params
func (o *ReposPartialUpdateParams) WithContext(ctx context.Context) *ReposPartialUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repos partial update params
func (o *ReposPartialUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repos partial update params
func (o *ReposPartialUpdateParams) WithHTTPClient(client *http.Client) *ReposPartialUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repos partial update params
func (o *ReposPartialUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the repos partial update params
func (o *ReposPartialUpdateParams) WithData(data ReposPartialUpdateBody) *ReposPartialUpdateParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the repos partial update params
func (o *ReposPartialUpdateParams) SetData(data ReposPartialUpdateBody) {
	o.Data = data
}

// WithProject adds the project to the repos partial update params
func (o *ReposPartialUpdateParams) WithProject(project string) *ReposPartialUpdateParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the repos partial update params
func (o *ReposPartialUpdateParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *ReposPartialUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Data); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
