// Code generated by go-swagger; DO NOT EDIT.

package repos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReposPartialUpdateReader is a Reader for the ReposPartialUpdate structure.
type ReposPartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReposPartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReposPartialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReposPartialUpdateOK creates a ReposPartialUpdateOK with default headers values
func NewReposPartialUpdateOK() *ReposPartialUpdateOK {
	return &ReposPartialUpdateOK{}
}

/*ReposPartialUpdateOK handles this case with default header values.

ReposPartialUpdateOK repos partial update o k
*/
type ReposPartialUpdateOK struct {
	Payload interface{}
}

func (o *ReposPartialUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /v3/customer/core/repos/{project}/][%d] reposPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *ReposPartialUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ReposPartialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ReposPartialUpdateBody repos partial update body
swagger:model ReposPartialUpdateBody
*/
type ReposPartialUpdateBody struct {

	// audit created at
	AuditCreatedAt string `json:"audit_created_at,omitempty"`

	// blocked
	Blocked bool `json:"blocked,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fetches failing since
	FetchesFailingSince string `json:"fetches_failing_since,omitempty"`

	// ignore list
	IgnoreList string `json:"ignore_list,omitempty"`

	// integration
	Integration interface{} `json:"integration,omitempty"`

	// is private
	IsPrivate bool `json:"is_private,omitempty"`

	// last fetch failure reason
	LastFetchFailureReason string `json:"last_fetch_failure_reason,omitempty"`

	// last fully updated at
	LastFullyUpdatedAt string `json:"last_fully_updated_at,omitempty"`

	// last processing success at
	LastProcessingSuccessAt string `json:"last_processing_success_at,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// oldest commit date
	OldestCommitDate string `json:"oldest_commit_date,omitempty"`

	// owner name
	OwnerName string `json:"owner_name,omitempty"`

	// owner vendor id
	OwnerVendorID string `json:"owner_vendor_id,omitempty"`

	// public key
	PublicKey string `json:"public_key,omitempty"`

	// skip hexshas
	SkipHexshas []string `json:"skip_hexshas"`

	// staff access expires at
	StaffAccessExpiresAt string `json:"staff_access_expires_at,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// vendor type
	VendorType string `json:"vendor_type,omitempty"`

	// youngest commit date
	YoungestCommitDate string `json:"youngest_commit_date,omitempty"`
}

// Validate validates this repos partial update body
func (o *ReposPartialUpdateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReposPartialUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReposPartialUpdateBody) UnmarshalBinary(b []byte) error {
	var res ReposPartialUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
