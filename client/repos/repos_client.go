// Code generated by go-swagger; DO NOT EDIT.

package repos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new repos API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repos API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ReposDelete(params *ReposDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ReposDeleteNoContent, error)

	ReposImportRepo(params *ReposImportRepoParams, authInfo runtime.ClientAuthInfoWriter) (*ReposImportRepoCreated, error)

	ReposList(params *ReposListParams, authInfo runtime.ClientAuthInfoWriter) (*ReposListOK, error)

	ReposPartialUpdate(params *ReposPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ReposPartialUpdateOK, error)

	ReposRead(params *ReposReadParams, authInfo runtime.ClientAuthInfoWriter) (*ReposReadOK, error)

	ReposUpdateRepo(params *ReposUpdateRepoParams, authInfo runtime.ClientAuthInfoWriter) (*ReposUpdateRepoCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ReposDelete removes specific entity by id value

  Remove specific entity by id value
*/
func (a *Client) ReposDelete(params *ReposDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ReposDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReposDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repos_delete",
		Method:             "DELETE",
		PathPattern:        "/v3/customer/core/repos/{project}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReposDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReposDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repos_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReposImportRepo imports single repo

  Import single repo

Select the repo by its available_repo_id. This can by found using the available_repo list.
*/
func (a *Client) ReposImportRepo(params *ReposImportRepoParams, authInfo runtime.ClientAuthInfoWriter) (*ReposImportRepoCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReposImportRepoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repos_import_repo",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/repos/import_repo/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReposImportRepoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReposImportRepoCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repos_import_repo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReposList lists imported repository entities

  List Imported Repository entities

To search for all available repos use: available_repos

--- Repository ---

A Repository is a representation of a source control repository that has been discovered by our system
using a set of user credentials. This Repository, once discovered, is then tied to a pull request project.

--- General ---

All objects can be traversed to related objects. This can be achieved by using the double-underscore syntax.
For instance, query all Author records with a specific Team name like so:

"?team\_\_name=Bobs%20Team".

You can easily traverse multiple levels of relationships by connecting related objects. For example:

"?foo\_\_bar\_\_baz\_\_name=Bob"

All available relationships are defined in the filter documentation with the note "filter-traversable object."
Additionally, you can limit the properties returned in an object by using the `fields` or `omit`
keywords as follows:

"?fields=foo,bar,bad" will return only these fields

or

"?omit=foo,bar,baz" will return all but the specified fields
*/
func (a *Client) ReposList(params *ReposListParams, authInfo runtime.ClientAuthInfoWriter) (*ReposListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReposListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repos_list",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/repos/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReposListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReposListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repos_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReposPartialUpdate updates fields of a repo by id value

  Update fields of a repo by id value

Change the name of the repo and the ignore_list

ignore_list is a string of the paths you wish to ignore when processing a repo. Use GET method to view the
current default ignored paths for a repo.
*/
func (a *Client) ReposPartialUpdate(params *ReposPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ReposPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReposPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repos_partial_update",
		Method:             "PATCH",
		PathPattern:        "/v3/customer/core/repos/{project}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReposPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReposPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repos_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReposRead gets a specific repository entity by id value

  Get a specific Repository entity by id value
*/
func (a *Client) ReposRead(params *ReposReadParams, authInfo runtime.ClientAuthInfoWriter) (*ReposReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReposReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repos_read",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/repos/{project}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReposReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReposReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repos_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReposUpdateRepo queues a repo to update by id value

  Queue a repo to update by id value
*/
func (a *Client) ReposUpdateRepo(params *ReposUpdateRepoParams, authInfo runtime.ClientAuthInfoWriter) (*ReposUpdateRepoCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReposUpdateRepoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repos_update_repo",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/repos/{project}/update_repo/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReposUpdateRepoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReposUpdateRepoCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for repos_update_repo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
