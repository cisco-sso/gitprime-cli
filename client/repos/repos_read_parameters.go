// Code generated by go-swagger; DO NOT EDIT.

package repos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewReposReadParams creates a new ReposReadParams object
// with the default values initialized.
func NewReposReadParams() *ReposReadParams {
	var ()
	return &ReposReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReposReadParamsWithTimeout creates a new ReposReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReposReadParamsWithTimeout(timeout time.Duration) *ReposReadParams {
	var ()
	return &ReposReadParams{

		timeout: timeout,
	}
}

// NewReposReadParamsWithContext creates a new ReposReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewReposReadParamsWithContext(ctx context.Context) *ReposReadParams {
	var ()
	return &ReposReadParams{

		Context: ctx,
	}
}

// NewReposReadParamsWithHTTPClient creates a new ReposReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReposReadParamsWithHTTPClient(client *http.Client) *ReposReadParams {
	var ()
	return &ReposReadParams{
		HTTPClient: client,
	}
}

/*ReposReadParams contains all the parameters to send to the API endpoint
for the repos read operation typically these are written to a http.Request
*/
type ReposReadParams struct {

	/*Project
	  A unique value identifying this project repo.

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repos read params
func (o *ReposReadParams) WithTimeout(timeout time.Duration) *ReposReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repos read params
func (o *ReposReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repos read params
func (o *ReposReadParams) WithContext(ctx context.Context) *ReposReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repos read params
func (o *ReposReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repos read params
func (o *ReposReadParams) WithHTTPClient(client *http.Client) *ReposReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repos read params
func (o *ReposReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProject adds the project to the repos read params
func (o *ReposReadParams) WithProject(project string) *ReposReadParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the repos read params
func (o *ReposReadParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *ReposReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
