// Code generated by go-swagger; DO NOT EDIT.

package pull_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPullRequestsListParams creates a new PullRequestsListParams object
// with the default values initialized.
func NewPullRequestsListParams() *PullRequestsListParams {
	var ()
	return &PullRequestsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPullRequestsListParamsWithTimeout creates a new PullRequestsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPullRequestsListParamsWithTimeout(timeout time.Duration) *PullRequestsListParams {
	var ()
	return &PullRequestsListParams{

		timeout: timeout,
	}
}

// NewPullRequestsListParamsWithContext creates a new PullRequestsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewPullRequestsListParamsWithContext(ctx context.Context) *PullRequestsListParams {
	var ()
	return &PullRequestsListParams{

		Context: ctx,
	}
}

// NewPullRequestsListParamsWithHTTPClient creates a new PullRequestsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPullRequestsListParamsWithHTTPClient(client *http.Client) *PullRequestsListParams {
	var ()
	return &PullRequestsListParams{
		HTTPClient: client,
	}
}

/*PullRequestsListParams contains all the parameters to send to the API endpoint
for the pull requests list operation typically these are written to a http.Request
*/
type PullRequestsListParams struct {

	/*ApexApproversIDIn
	  Match on apex approver_id (PR approver id) in a comma separated list

	*/
	ApexApproversIDIn *string
	/*ApexAssigneesIDIn
	  Match on apex assignee_id (reviewer assigned id) in a comma separated list

	*/
	ApexAssigneesIDIn *string
	/*ApexReviewerIDIn
	  Match on apex reviewer_id (comment author id) in a comma separated list

	*/
	ApexReviewerIDIn *string
	/*ApexUserID
	  Match on apex_user_id (pr creator)

	*/
	ApexUserID *float64
	/*ApexUserIDIn
	  Match on apex_user_id (pr creator) in a comma separated list

	*/
	ApexUserIDIn *string
	/*Approvers
	  Filter-traversable object

	*/
	Approvers *string
	/*Assignees
	  Filter-traversable object

	*/
	Assignees *string
	/*Body
	  Records containing string in body

	*/
	Body *string
	/*BodyIcontains
	  Records containing case insensitive string in body

	*/
	BodyIcontains *string
	/*BodyStartswith
	  body starts with case sensitive value

	*/
	BodyStartswith *string
	/*ClosedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAt *string
	/*ClosedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAtGt *string
	/*ClosedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAtGte *string
	/*ClosedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAtLt *string
	/*ClosedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	ClosedAtLte *string
	/*CodingTime
	  Records with coding_time == value

	*/
	CodingTime *float64
	/*CodingTimeGt
	  Records with coding_time > value

	*/
	CodingTimeGt *float64
	/*CodingTimeGte
	  Records with coding_time >= value

	*/
	CodingTimeGte *float64
	/*CodingTimeLt
	  Records with coding_time < value

	*/
	CodingTimeLt *float64
	/*CodingTimeLte
	  Records with coding_time <= value

	*/
	CodingTimeLte *float64
	/*Comments
	  Filter-traversable object

	*/
	Comments *string
	/*CommitShas
	  Pull requests containing provided hexsha

	*/
	CommitShas *string
	/*CommitShasContains
	  Pull requests containing provided hexsha

	*/
	CommitShasContains *string
	/*CreatedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAt *string
	/*CreatedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGt *string
	/*CreatedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGte *string
	/*CreatedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLt *string
	/*CreatedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLte *string
	/*ExtractedTags
	  Comma-separated list of included tags

	*/
	ExtractedTags *string
	/*ExtractedTagsIcontains
	  Comma-separated list of included tags

	*/
	ExtractedTagsIcontains *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*FollowOnCommitCount
	  Records with follow_on_commit_count == value

	*/
	FollowOnCommitCount *float64
	/*FollowOnCommitCountGt
	  Records with follow_on_commit_count > value

	*/
	FollowOnCommitCountGt *float64
	/*FollowOnCommitCountGte
	  Records with follow_on_commit_count >= value

	*/
	FollowOnCommitCountGte *float64
	/*FollowOnCommitCountLt
	  Records with follow_on_commit_count < value

	*/
	FollowOnCommitCountLt *float64
	/*FollowOnCommitCountLte
	  Records with follow_on_commit_count <= value

	*/
	FollowOnCommitCountLte *float64
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*NumberExact*/
	NumberExact *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `project_id`, `number`, `vendor`, `state`, `created_at`, `closed_at`, `title`

	*/
	Ordering *string
	/*Project
	  Filter-traversable object

	*/
	Project *string
	/*ProjectID
	  Records matching the provided id

	*/
	ProjectID *float64
	/*ProjectIDIn
	  Match on project_id in a comma separated list

	*/
	ProjectIDIn *string
	/*ReviewTime
	  Records with review_time == value

	*/
	ReviewTime *float64
	/*ReviewTimeGt
	  Records with review_time > value

	*/
	ReviewTimeGt *float64
	/*ReviewTimeGte
	  Records with review_time >= value

	*/
	ReviewTimeGte *float64
	/*ReviewTimeLt
	  Records with review_time < value

	*/
	ReviewTimeLt *float64
	/*ReviewTimeLte
	  Records with review_time <= value

	*/
	ReviewTimeLte *float64
	/*ReviewerCommentCount
	  Records with reviewer_comment_count == value

	*/
	ReviewerCommentCount *float64
	/*ReviewerCommentCountGt
	  Records with reviewer_comment_count > value

	*/
	ReviewerCommentCountGt *float64
	/*ReviewerCommentCountGte
	  Records with reviewer_comment_count >= value

	*/
	ReviewerCommentCountGte *float64
	/*ReviewerCommentCountLt
	  Records with reviewer_comment_count < value

	*/
	ReviewerCommentCountLt *float64
	/*ReviewerCommentCountLte
	  Records with reviewer_comment_count <= value

	*/
	ReviewerCommentCountLte *float64
	/*Reviewers
	  Filter-traversable object

	*/
	Reviewers *string
	/*Search
	  A search term.

	*/
	Search *string
	/*State
	  Records matching state name

	*/
	State *string
	/*StateIn
	  Records matching state name in a set

	*/
	StateIn *string
	/*Title
	  Records containing string in title

	*/
	Title *string
	/*TitleIcontains
	  Records containing case insensitive string in title

	*/
	TitleIcontains *string
	/*TitleStartswith
	  Title starts with case sensitive value

	*/
	TitleStartswith *string
	/*UserAliasID
	  Match on user_alias_id (pr creator)

	*/
	UserAliasID *float64
	/*UserAliasIDIn
	  Match on user_alias_id (pr creator) in a comma separated list

	*/
	UserAliasIDIn *string
	/*Vendor*/
	Vendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the pull requests list params
func (o *PullRequestsListParams) WithTimeout(timeout time.Duration) *PullRequestsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pull requests list params
func (o *PullRequestsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pull requests list params
func (o *PullRequestsListParams) WithContext(ctx context.Context) *PullRequestsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pull requests list params
func (o *PullRequestsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pull requests list params
func (o *PullRequestsListParams) WithHTTPClient(client *http.Client) *PullRequestsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pull requests list params
func (o *PullRequestsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApexApproversIDIn adds the apexApproversIDIn to the pull requests list params
func (o *PullRequestsListParams) WithApexApproversIDIn(apexApproversIDIn *string) *PullRequestsListParams {
	o.SetApexApproversIDIn(apexApproversIDIn)
	return o
}

// SetApexApproversIDIn adds the apexApproversIdIn to the pull requests list params
func (o *PullRequestsListParams) SetApexApproversIDIn(apexApproversIDIn *string) {
	o.ApexApproversIDIn = apexApproversIDIn
}

// WithApexAssigneesIDIn adds the apexAssigneesIDIn to the pull requests list params
func (o *PullRequestsListParams) WithApexAssigneesIDIn(apexAssigneesIDIn *string) *PullRequestsListParams {
	o.SetApexAssigneesIDIn(apexAssigneesIDIn)
	return o
}

// SetApexAssigneesIDIn adds the apexAssigneesIdIn to the pull requests list params
func (o *PullRequestsListParams) SetApexAssigneesIDIn(apexAssigneesIDIn *string) {
	o.ApexAssigneesIDIn = apexAssigneesIDIn
}

// WithApexReviewerIDIn adds the apexReviewerIDIn to the pull requests list params
func (o *PullRequestsListParams) WithApexReviewerIDIn(apexReviewerIDIn *string) *PullRequestsListParams {
	o.SetApexReviewerIDIn(apexReviewerIDIn)
	return o
}

// SetApexReviewerIDIn adds the apexReviewerIdIn to the pull requests list params
func (o *PullRequestsListParams) SetApexReviewerIDIn(apexReviewerIDIn *string) {
	o.ApexReviewerIDIn = apexReviewerIDIn
}

// WithApexUserID adds the apexUserID to the pull requests list params
func (o *PullRequestsListParams) WithApexUserID(apexUserID *float64) *PullRequestsListParams {
	o.SetApexUserID(apexUserID)
	return o
}

// SetApexUserID adds the apexUserId to the pull requests list params
func (o *PullRequestsListParams) SetApexUserID(apexUserID *float64) {
	o.ApexUserID = apexUserID
}

// WithApexUserIDIn adds the apexUserIDIn to the pull requests list params
func (o *PullRequestsListParams) WithApexUserIDIn(apexUserIDIn *string) *PullRequestsListParams {
	o.SetApexUserIDIn(apexUserIDIn)
	return o
}

// SetApexUserIDIn adds the apexUserIdIn to the pull requests list params
func (o *PullRequestsListParams) SetApexUserIDIn(apexUserIDIn *string) {
	o.ApexUserIDIn = apexUserIDIn
}

// WithApprovers adds the approvers to the pull requests list params
func (o *PullRequestsListParams) WithApprovers(approvers *string) *PullRequestsListParams {
	o.SetApprovers(approvers)
	return o
}

// SetApprovers adds the approvers to the pull requests list params
func (o *PullRequestsListParams) SetApprovers(approvers *string) {
	o.Approvers = approvers
}

// WithAssignees adds the assignees to the pull requests list params
func (o *PullRequestsListParams) WithAssignees(assignees *string) *PullRequestsListParams {
	o.SetAssignees(assignees)
	return o
}

// SetAssignees adds the assignees to the pull requests list params
func (o *PullRequestsListParams) SetAssignees(assignees *string) {
	o.Assignees = assignees
}

// WithBody adds the body to the pull requests list params
func (o *PullRequestsListParams) WithBody(body *string) *PullRequestsListParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the pull requests list params
func (o *PullRequestsListParams) SetBody(body *string) {
	o.Body = body
}

// WithBodyIcontains adds the bodyIcontains to the pull requests list params
func (o *PullRequestsListParams) WithBodyIcontains(bodyIcontains *string) *PullRequestsListParams {
	o.SetBodyIcontains(bodyIcontains)
	return o
}

// SetBodyIcontains adds the bodyIcontains to the pull requests list params
func (o *PullRequestsListParams) SetBodyIcontains(bodyIcontains *string) {
	o.BodyIcontains = bodyIcontains
}

// WithBodyStartswith adds the bodyStartswith to the pull requests list params
func (o *PullRequestsListParams) WithBodyStartswith(bodyStartswith *string) *PullRequestsListParams {
	o.SetBodyStartswith(bodyStartswith)
	return o
}

// SetBodyStartswith adds the bodyStartswith to the pull requests list params
func (o *PullRequestsListParams) SetBodyStartswith(bodyStartswith *string) {
	o.BodyStartswith = bodyStartswith
}

// WithClosedAt adds the closedAt to the pull requests list params
func (o *PullRequestsListParams) WithClosedAt(closedAt *string) *PullRequestsListParams {
	o.SetClosedAt(closedAt)
	return o
}

// SetClosedAt adds the closedAt to the pull requests list params
func (o *PullRequestsListParams) SetClosedAt(closedAt *string) {
	o.ClosedAt = closedAt
}

// WithClosedAtGt adds the closedAtGt to the pull requests list params
func (o *PullRequestsListParams) WithClosedAtGt(closedAtGt *string) *PullRequestsListParams {
	o.SetClosedAtGt(closedAtGt)
	return o
}

// SetClosedAtGt adds the closedAtGt to the pull requests list params
func (o *PullRequestsListParams) SetClosedAtGt(closedAtGt *string) {
	o.ClosedAtGt = closedAtGt
}

// WithClosedAtGte adds the closedAtGte to the pull requests list params
func (o *PullRequestsListParams) WithClosedAtGte(closedAtGte *string) *PullRequestsListParams {
	o.SetClosedAtGte(closedAtGte)
	return o
}

// SetClosedAtGte adds the closedAtGte to the pull requests list params
func (o *PullRequestsListParams) SetClosedAtGte(closedAtGte *string) {
	o.ClosedAtGte = closedAtGte
}

// WithClosedAtLt adds the closedAtLt to the pull requests list params
func (o *PullRequestsListParams) WithClosedAtLt(closedAtLt *string) *PullRequestsListParams {
	o.SetClosedAtLt(closedAtLt)
	return o
}

// SetClosedAtLt adds the closedAtLt to the pull requests list params
func (o *PullRequestsListParams) SetClosedAtLt(closedAtLt *string) {
	o.ClosedAtLt = closedAtLt
}

// WithClosedAtLte adds the closedAtLte to the pull requests list params
func (o *PullRequestsListParams) WithClosedAtLte(closedAtLte *string) *PullRequestsListParams {
	o.SetClosedAtLte(closedAtLte)
	return o
}

// SetClosedAtLte adds the closedAtLte to the pull requests list params
func (o *PullRequestsListParams) SetClosedAtLte(closedAtLte *string) {
	o.ClosedAtLte = closedAtLte
}

// WithCodingTime adds the codingTime to the pull requests list params
func (o *PullRequestsListParams) WithCodingTime(codingTime *float64) *PullRequestsListParams {
	o.SetCodingTime(codingTime)
	return o
}

// SetCodingTime adds the codingTime to the pull requests list params
func (o *PullRequestsListParams) SetCodingTime(codingTime *float64) {
	o.CodingTime = codingTime
}

// WithCodingTimeGt adds the codingTimeGt to the pull requests list params
func (o *PullRequestsListParams) WithCodingTimeGt(codingTimeGt *float64) *PullRequestsListParams {
	o.SetCodingTimeGt(codingTimeGt)
	return o
}

// SetCodingTimeGt adds the codingTimeGt to the pull requests list params
func (o *PullRequestsListParams) SetCodingTimeGt(codingTimeGt *float64) {
	o.CodingTimeGt = codingTimeGt
}

// WithCodingTimeGte adds the codingTimeGte to the pull requests list params
func (o *PullRequestsListParams) WithCodingTimeGte(codingTimeGte *float64) *PullRequestsListParams {
	o.SetCodingTimeGte(codingTimeGte)
	return o
}

// SetCodingTimeGte adds the codingTimeGte to the pull requests list params
func (o *PullRequestsListParams) SetCodingTimeGte(codingTimeGte *float64) {
	o.CodingTimeGte = codingTimeGte
}

// WithCodingTimeLt adds the codingTimeLt to the pull requests list params
func (o *PullRequestsListParams) WithCodingTimeLt(codingTimeLt *float64) *PullRequestsListParams {
	o.SetCodingTimeLt(codingTimeLt)
	return o
}

// SetCodingTimeLt adds the codingTimeLt to the pull requests list params
func (o *PullRequestsListParams) SetCodingTimeLt(codingTimeLt *float64) {
	o.CodingTimeLt = codingTimeLt
}

// WithCodingTimeLte adds the codingTimeLte to the pull requests list params
func (o *PullRequestsListParams) WithCodingTimeLte(codingTimeLte *float64) *PullRequestsListParams {
	o.SetCodingTimeLte(codingTimeLte)
	return o
}

// SetCodingTimeLte adds the codingTimeLte to the pull requests list params
func (o *PullRequestsListParams) SetCodingTimeLte(codingTimeLte *float64) {
	o.CodingTimeLte = codingTimeLte
}

// WithComments adds the comments to the pull requests list params
func (o *PullRequestsListParams) WithComments(comments *string) *PullRequestsListParams {
	o.SetComments(comments)
	return o
}

// SetComments adds the comments to the pull requests list params
func (o *PullRequestsListParams) SetComments(comments *string) {
	o.Comments = comments
}

// WithCommitShas adds the commitShas to the pull requests list params
func (o *PullRequestsListParams) WithCommitShas(commitShas *string) *PullRequestsListParams {
	o.SetCommitShas(commitShas)
	return o
}

// SetCommitShas adds the commitShas to the pull requests list params
func (o *PullRequestsListParams) SetCommitShas(commitShas *string) {
	o.CommitShas = commitShas
}

// WithCommitShasContains adds the commitShasContains to the pull requests list params
func (o *PullRequestsListParams) WithCommitShasContains(commitShasContains *string) *PullRequestsListParams {
	o.SetCommitShasContains(commitShasContains)
	return o
}

// SetCommitShasContains adds the commitShasContains to the pull requests list params
func (o *PullRequestsListParams) SetCommitShasContains(commitShasContains *string) {
	o.CommitShasContains = commitShasContains
}

// WithCreatedAt adds the createdAt to the pull requests list params
func (o *PullRequestsListParams) WithCreatedAt(createdAt *string) *PullRequestsListParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the pull requests list params
func (o *PullRequestsListParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedAtGt adds the createdAtGt to the pull requests list params
func (o *PullRequestsListParams) WithCreatedAtGt(createdAtGt *string) *PullRequestsListParams {
	o.SetCreatedAtGt(createdAtGt)
	return o
}

// SetCreatedAtGt adds the createdAtGt to the pull requests list params
func (o *PullRequestsListParams) SetCreatedAtGt(createdAtGt *string) {
	o.CreatedAtGt = createdAtGt
}

// WithCreatedAtGte adds the createdAtGte to the pull requests list params
func (o *PullRequestsListParams) WithCreatedAtGte(createdAtGte *string) *PullRequestsListParams {
	o.SetCreatedAtGte(createdAtGte)
	return o
}

// SetCreatedAtGte adds the createdAtGte to the pull requests list params
func (o *PullRequestsListParams) SetCreatedAtGte(createdAtGte *string) {
	o.CreatedAtGte = createdAtGte
}

// WithCreatedAtLt adds the createdAtLt to the pull requests list params
func (o *PullRequestsListParams) WithCreatedAtLt(createdAtLt *string) *PullRequestsListParams {
	o.SetCreatedAtLt(createdAtLt)
	return o
}

// SetCreatedAtLt adds the createdAtLt to the pull requests list params
func (o *PullRequestsListParams) SetCreatedAtLt(createdAtLt *string) {
	o.CreatedAtLt = createdAtLt
}

// WithCreatedAtLte adds the createdAtLte to the pull requests list params
func (o *PullRequestsListParams) WithCreatedAtLte(createdAtLte *string) *PullRequestsListParams {
	o.SetCreatedAtLte(createdAtLte)
	return o
}

// SetCreatedAtLte adds the createdAtLte to the pull requests list params
func (o *PullRequestsListParams) SetCreatedAtLte(createdAtLte *string) {
	o.CreatedAtLte = createdAtLte
}

// WithExtractedTags adds the extractedTags to the pull requests list params
func (o *PullRequestsListParams) WithExtractedTags(extractedTags *string) *PullRequestsListParams {
	o.SetExtractedTags(extractedTags)
	return o
}

// SetExtractedTags adds the extractedTags to the pull requests list params
func (o *PullRequestsListParams) SetExtractedTags(extractedTags *string) {
	o.ExtractedTags = extractedTags
}

// WithExtractedTagsIcontains adds the extractedTagsIcontains to the pull requests list params
func (o *PullRequestsListParams) WithExtractedTagsIcontains(extractedTagsIcontains *string) *PullRequestsListParams {
	o.SetExtractedTagsIcontains(extractedTagsIcontains)
	return o
}

// SetExtractedTagsIcontains adds the extractedTagsIcontains to the pull requests list params
func (o *PullRequestsListParams) SetExtractedTagsIcontains(extractedTagsIcontains *string) {
	o.ExtractedTagsIcontains = extractedTagsIcontains
}

// WithFilters adds the filters to the pull requests list params
func (o *PullRequestsListParams) WithFilters(filters *string) *PullRequestsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the pull requests list params
func (o *PullRequestsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithFollowOnCommitCount adds the followOnCommitCount to the pull requests list params
func (o *PullRequestsListParams) WithFollowOnCommitCount(followOnCommitCount *float64) *PullRequestsListParams {
	o.SetFollowOnCommitCount(followOnCommitCount)
	return o
}

// SetFollowOnCommitCount adds the followOnCommitCount to the pull requests list params
func (o *PullRequestsListParams) SetFollowOnCommitCount(followOnCommitCount *float64) {
	o.FollowOnCommitCount = followOnCommitCount
}

// WithFollowOnCommitCountGt adds the followOnCommitCountGt to the pull requests list params
func (o *PullRequestsListParams) WithFollowOnCommitCountGt(followOnCommitCountGt *float64) *PullRequestsListParams {
	o.SetFollowOnCommitCountGt(followOnCommitCountGt)
	return o
}

// SetFollowOnCommitCountGt adds the followOnCommitCountGt to the pull requests list params
func (o *PullRequestsListParams) SetFollowOnCommitCountGt(followOnCommitCountGt *float64) {
	o.FollowOnCommitCountGt = followOnCommitCountGt
}

// WithFollowOnCommitCountGte adds the followOnCommitCountGte to the pull requests list params
func (o *PullRequestsListParams) WithFollowOnCommitCountGte(followOnCommitCountGte *float64) *PullRequestsListParams {
	o.SetFollowOnCommitCountGte(followOnCommitCountGte)
	return o
}

// SetFollowOnCommitCountGte adds the followOnCommitCountGte to the pull requests list params
func (o *PullRequestsListParams) SetFollowOnCommitCountGte(followOnCommitCountGte *float64) {
	o.FollowOnCommitCountGte = followOnCommitCountGte
}

// WithFollowOnCommitCountLt adds the followOnCommitCountLt to the pull requests list params
func (o *PullRequestsListParams) WithFollowOnCommitCountLt(followOnCommitCountLt *float64) *PullRequestsListParams {
	o.SetFollowOnCommitCountLt(followOnCommitCountLt)
	return o
}

// SetFollowOnCommitCountLt adds the followOnCommitCountLt to the pull requests list params
func (o *PullRequestsListParams) SetFollowOnCommitCountLt(followOnCommitCountLt *float64) {
	o.FollowOnCommitCountLt = followOnCommitCountLt
}

// WithFollowOnCommitCountLte adds the followOnCommitCountLte to the pull requests list params
func (o *PullRequestsListParams) WithFollowOnCommitCountLte(followOnCommitCountLte *float64) *PullRequestsListParams {
	o.SetFollowOnCommitCountLte(followOnCommitCountLte)
	return o
}

// SetFollowOnCommitCountLte adds the followOnCommitCountLte to the pull requests list params
func (o *PullRequestsListParams) SetFollowOnCommitCountLte(followOnCommitCountLte *float64) {
	o.FollowOnCommitCountLte = followOnCommitCountLte
}

// WithID adds the id to the pull requests list params
func (o *PullRequestsListParams) WithID(id *float64) *PullRequestsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the pull requests list params
func (o *PullRequestsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the pull requests list params
func (o *PullRequestsListParams) WithIDIn(iDIn *float64) *PullRequestsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the pull requests list params
func (o *PullRequestsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithLimit adds the limit to the pull requests list params
func (o *PullRequestsListParams) WithLimit(limit *int64) *PullRequestsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the pull requests list params
func (o *PullRequestsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNumberExact adds the numberExact to the pull requests list params
func (o *PullRequestsListParams) WithNumberExact(numberExact *string) *PullRequestsListParams {
	o.SetNumberExact(numberExact)
	return o
}

// SetNumberExact adds the numberExact to the pull requests list params
func (o *PullRequestsListParams) SetNumberExact(numberExact *string) {
	o.NumberExact = numberExact
}

// WithOffset adds the offset to the pull requests list params
func (o *PullRequestsListParams) WithOffset(offset *int64) *PullRequestsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the pull requests list params
func (o *PullRequestsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the pull requests list params
func (o *PullRequestsListParams) WithOrdering(ordering *string) *PullRequestsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the pull requests list params
func (o *PullRequestsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithProject adds the project to the pull requests list params
func (o *PullRequestsListParams) WithProject(project *string) *PullRequestsListParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the pull requests list params
func (o *PullRequestsListParams) SetProject(project *string) {
	o.Project = project
}

// WithProjectID adds the projectID to the pull requests list params
func (o *PullRequestsListParams) WithProjectID(projectID *float64) *PullRequestsListParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the pull requests list params
func (o *PullRequestsListParams) SetProjectID(projectID *float64) {
	o.ProjectID = projectID
}

// WithProjectIDIn adds the projectIDIn to the pull requests list params
func (o *PullRequestsListParams) WithProjectIDIn(projectIDIn *string) *PullRequestsListParams {
	o.SetProjectIDIn(projectIDIn)
	return o
}

// SetProjectIDIn adds the projectIdIn to the pull requests list params
func (o *PullRequestsListParams) SetProjectIDIn(projectIDIn *string) {
	o.ProjectIDIn = projectIDIn
}

// WithReviewTime adds the reviewTime to the pull requests list params
func (o *PullRequestsListParams) WithReviewTime(reviewTime *float64) *PullRequestsListParams {
	o.SetReviewTime(reviewTime)
	return o
}

// SetReviewTime adds the reviewTime to the pull requests list params
func (o *PullRequestsListParams) SetReviewTime(reviewTime *float64) {
	o.ReviewTime = reviewTime
}

// WithReviewTimeGt adds the reviewTimeGt to the pull requests list params
func (o *PullRequestsListParams) WithReviewTimeGt(reviewTimeGt *float64) *PullRequestsListParams {
	o.SetReviewTimeGt(reviewTimeGt)
	return o
}

// SetReviewTimeGt adds the reviewTimeGt to the pull requests list params
func (o *PullRequestsListParams) SetReviewTimeGt(reviewTimeGt *float64) {
	o.ReviewTimeGt = reviewTimeGt
}

// WithReviewTimeGte adds the reviewTimeGte to the pull requests list params
func (o *PullRequestsListParams) WithReviewTimeGte(reviewTimeGte *float64) *PullRequestsListParams {
	o.SetReviewTimeGte(reviewTimeGte)
	return o
}

// SetReviewTimeGte adds the reviewTimeGte to the pull requests list params
func (o *PullRequestsListParams) SetReviewTimeGte(reviewTimeGte *float64) {
	o.ReviewTimeGte = reviewTimeGte
}

// WithReviewTimeLt adds the reviewTimeLt to the pull requests list params
func (o *PullRequestsListParams) WithReviewTimeLt(reviewTimeLt *float64) *PullRequestsListParams {
	o.SetReviewTimeLt(reviewTimeLt)
	return o
}

// SetReviewTimeLt adds the reviewTimeLt to the pull requests list params
func (o *PullRequestsListParams) SetReviewTimeLt(reviewTimeLt *float64) {
	o.ReviewTimeLt = reviewTimeLt
}

// WithReviewTimeLte adds the reviewTimeLte to the pull requests list params
func (o *PullRequestsListParams) WithReviewTimeLte(reviewTimeLte *float64) *PullRequestsListParams {
	o.SetReviewTimeLte(reviewTimeLte)
	return o
}

// SetReviewTimeLte adds the reviewTimeLte to the pull requests list params
func (o *PullRequestsListParams) SetReviewTimeLte(reviewTimeLte *float64) {
	o.ReviewTimeLte = reviewTimeLte
}

// WithReviewerCommentCount adds the reviewerCommentCount to the pull requests list params
func (o *PullRequestsListParams) WithReviewerCommentCount(reviewerCommentCount *float64) *PullRequestsListParams {
	o.SetReviewerCommentCount(reviewerCommentCount)
	return o
}

// SetReviewerCommentCount adds the reviewerCommentCount to the pull requests list params
func (o *PullRequestsListParams) SetReviewerCommentCount(reviewerCommentCount *float64) {
	o.ReviewerCommentCount = reviewerCommentCount
}

// WithReviewerCommentCountGt adds the reviewerCommentCountGt to the pull requests list params
func (o *PullRequestsListParams) WithReviewerCommentCountGt(reviewerCommentCountGt *float64) *PullRequestsListParams {
	o.SetReviewerCommentCountGt(reviewerCommentCountGt)
	return o
}

// SetReviewerCommentCountGt adds the reviewerCommentCountGt to the pull requests list params
func (o *PullRequestsListParams) SetReviewerCommentCountGt(reviewerCommentCountGt *float64) {
	o.ReviewerCommentCountGt = reviewerCommentCountGt
}

// WithReviewerCommentCountGte adds the reviewerCommentCountGte to the pull requests list params
func (o *PullRequestsListParams) WithReviewerCommentCountGte(reviewerCommentCountGte *float64) *PullRequestsListParams {
	o.SetReviewerCommentCountGte(reviewerCommentCountGte)
	return o
}

// SetReviewerCommentCountGte adds the reviewerCommentCountGte to the pull requests list params
func (o *PullRequestsListParams) SetReviewerCommentCountGte(reviewerCommentCountGte *float64) {
	o.ReviewerCommentCountGte = reviewerCommentCountGte
}

// WithReviewerCommentCountLt adds the reviewerCommentCountLt to the pull requests list params
func (o *PullRequestsListParams) WithReviewerCommentCountLt(reviewerCommentCountLt *float64) *PullRequestsListParams {
	o.SetReviewerCommentCountLt(reviewerCommentCountLt)
	return o
}

// SetReviewerCommentCountLt adds the reviewerCommentCountLt to the pull requests list params
func (o *PullRequestsListParams) SetReviewerCommentCountLt(reviewerCommentCountLt *float64) {
	o.ReviewerCommentCountLt = reviewerCommentCountLt
}

// WithReviewerCommentCountLte adds the reviewerCommentCountLte to the pull requests list params
func (o *PullRequestsListParams) WithReviewerCommentCountLte(reviewerCommentCountLte *float64) *PullRequestsListParams {
	o.SetReviewerCommentCountLte(reviewerCommentCountLte)
	return o
}

// SetReviewerCommentCountLte adds the reviewerCommentCountLte to the pull requests list params
func (o *PullRequestsListParams) SetReviewerCommentCountLte(reviewerCommentCountLte *float64) {
	o.ReviewerCommentCountLte = reviewerCommentCountLte
}

// WithReviewers adds the reviewers to the pull requests list params
func (o *PullRequestsListParams) WithReviewers(reviewers *string) *PullRequestsListParams {
	o.SetReviewers(reviewers)
	return o
}

// SetReviewers adds the reviewers to the pull requests list params
func (o *PullRequestsListParams) SetReviewers(reviewers *string) {
	o.Reviewers = reviewers
}

// WithSearch adds the search to the pull requests list params
func (o *PullRequestsListParams) WithSearch(search *string) *PullRequestsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the pull requests list params
func (o *PullRequestsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithState adds the state to the pull requests list params
func (o *PullRequestsListParams) WithState(state *string) *PullRequestsListParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the pull requests list params
func (o *PullRequestsListParams) SetState(state *string) {
	o.State = state
}

// WithStateIn adds the stateIn to the pull requests list params
func (o *PullRequestsListParams) WithStateIn(stateIn *string) *PullRequestsListParams {
	o.SetStateIn(stateIn)
	return o
}

// SetStateIn adds the stateIn to the pull requests list params
func (o *PullRequestsListParams) SetStateIn(stateIn *string) {
	o.StateIn = stateIn
}

// WithTitle adds the title to the pull requests list params
func (o *PullRequestsListParams) WithTitle(title *string) *PullRequestsListParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the pull requests list params
func (o *PullRequestsListParams) SetTitle(title *string) {
	o.Title = title
}

// WithTitleIcontains adds the titleIcontains to the pull requests list params
func (o *PullRequestsListParams) WithTitleIcontains(titleIcontains *string) *PullRequestsListParams {
	o.SetTitleIcontains(titleIcontains)
	return o
}

// SetTitleIcontains adds the titleIcontains to the pull requests list params
func (o *PullRequestsListParams) SetTitleIcontains(titleIcontains *string) {
	o.TitleIcontains = titleIcontains
}

// WithTitleStartswith adds the titleStartswith to the pull requests list params
func (o *PullRequestsListParams) WithTitleStartswith(titleStartswith *string) *PullRequestsListParams {
	o.SetTitleStartswith(titleStartswith)
	return o
}

// SetTitleStartswith adds the titleStartswith to the pull requests list params
func (o *PullRequestsListParams) SetTitleStartswith(titleStartswith *string) {
	o.TitleStartswith = titleStartswith
}

// WithUserAliasID adds the userAliasID to the pull requests list params
func (o *PullRequestsListParams) WithUserAliasID(userAliasID *float64) *PullRequestsListParams {
	o.SetUserAliasID(userAliasID)
	return o
}

// SetUserAliasID adds the userAliasId to the pull requests list params
func (o *PullRequestsListParams) SetUserAliasID(userAliasID *float64) {
	o.UserAliasID = userAliasID
}

// WithUserAliasIDIn adds the userAliasIDIn to the pull requests list params
func (o *PullRequestsListParams) WithUserAliasIDIn(userAliasIDIn *string) *PullRequestsListParams {
	o.SetUserAliasIDIn(userAliasIDIn)
	return o
}

// SetUserAliasIDIn adds the userAliasIdIn to the pull requests list params
func (o *PullRequestsListParams) SetUserAliasIDIn(userAliasIDIn *string) {
	o.UserAliasIDIn = userAliasIDIn
}

// WithVendor adds the vendor to the pull requests list params
func (o *PullRequestsListParams) WithVendor(vendor *string) *PullRequestsListParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the pull requests list params
func (o *PullRequestsListParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WriteToRequest writes these params to a swagger request
func (o *PullRequestsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApexApproversIDIn != nil {

		// query param apex_approvers_id__in
		var qrApexApproversIDIn string
		if o.ApexApproversIDIn != nil {
			qrApexApproversIDIn = *o.ApexApproversIDIn
		}
		qApexApproversIDIn := qrApexApproversIDIn
		if qApexApproversIDIn != "" {
			if err := r.SetQueryParam("apex_approvers_id__in", qApexApproversIDIn); err != nil {
				return err
			}
		}

	}

	if o.ApexAssigneesIDIn != nil {

		// query param apex_assignees_id__in
		var qrApexAssigneesIDIn string
		if o.ApexAssigneesIDIn != nil {
			qrApexAssigneesIDIn = *o.ApexAssigneesIDIn
		}
		qApexAssigneesIDIn := qrApexAssigneesIDIn
		if qApexAssigneesIDIn != "" {
			if err := r.SetQueryParam("apex_assignees_id__in", qApexAssigneesIDIn); err != nil {
				return err
			}
		}

	}

	if o.ApexReviewerIDIn != nil {

		// query param apex_reviewer_id__in
		var qrApexReviewerIDIn string
		if o.ApexReviewerIDIn != nil {
			qrApexReviewerIDIn = *o.ApexReviewerIDIn
		}
		qApexReviewerIDIn := qrApexReviewerIDIn
		if qApexReviewerIDIn != "" {
			if err := r.SetQueryParam("apex_reviewer_id__in", qApexReviewerIDIn); err != nil {
				return err
			}
		}

	}

	if o.ApexUserID != nil {

		// query param apex_user_id
		var qrApexUserID float64
		if o.ApexUserID != nil {
			qrApexUserID = *o.ApexUserID
		}
		qApexUserID := swag.FormatFloat64(qrApexUserID)
		if qApexUserID != "" {
			if err := r.SetQueryParam("apex_user_id", qApexUserID); err != nil {
				return err
			}
		}

	}

	if o.ApexUserIDIn != nil {

		// query param apex_user_id__in
		var qrApexUserIDIn string
		if o.ApexUserIDIn != nil {
			qrApexUserIDIn = *o.ApexUserIDIn
		}
		qApexUserIDIn := qrApexUserIDIn
		if qApexUserIDIn != "" {
			if err := r.SetQueryParam("apex_user_id__in", qApexUserIDIn); err != nil {
				return err
			}
		}

	}

	if o.Approvers != nil {

		// query param approvers
		var qrApprovers string
		if o.Approvers != nil {
			qrApprovers = *o.Approvers
		}
		qApprovers := qrApprovers
		if qApprovers != "" {
			if err := r.SetQueryParam("approvers", qApprovers); err != nil {
				return err
			}
		}

	}

	if o.Assignees != nil {

		// query param assignees
		var qrAssignees string
		if o.Assignees != nil {
			qrAssignees = *o.Assignees
		}
		qAssignees := qrAssignees
		if qAssignees != "" {
			if err := r.SetQueryParam("assignees", qAssignees); err != nil {
				return err
			}
		}

	}

	if o.Body != nil {

		// query param body
		var qrBody string
		if o.Body != nil {
			qrBody = *o.Body
		}
		qBody := qrBody
		if qBody != "" {
			if err := r.SetQueryParam("body", qBody); err != nil {
				return err
			}
		}

	}

	if o.BodyIcontains != nil {

		// query param body__icontains
		var qrBodyIcontains string
		if o.BodyIcontains != nil {
			qrBodyIcontains = *o.BodyIcontains
		}
		qBodyIcontains := qrBodyIcontains
		if qBodyIcontains != "" {
			if err := r.SetQueryParam("body__icontains", qBodyIcontains); err != nil {
				return err
			}
		}

	}

	if o.BodyStartswith != nil {

		// query param body__startswith
		var qrBodyStartswith string
		if o.BodyStartswith != nil {
			qrBodyStartswith = *o.BodyStartswith
		}
		qBodyStartswith := qrBodyStartswith
		if qBodyStartswith != "" {
			if err := r.SetQueryParam("body__startswith", qBodyStartswith); err != nil {
				return err
			}
		}

	}

	if o.ClosedAt != nil {

		// query param closed_at
		var qrClosedAt string
		if o.ClosedAt != nil {
			qrClosedAt = *o.ClosedAt
		}
		qClosedAt := qrClosedAt
		if qClosedAt != "" {
			if err := r.SetQueryParam("closed_at", qClosedAt); err != nil {
				return err
			}
		}

	}

	if o.ClosedAtGt != nil {

		// query param closed_at__gt
		var qrClosedAtGt string
		if o.ClosedAtGt != nil {
			qrClosedAtGt = *o.ClosedAtGt
		}
		qClosedAtGt := qrClosedAtGt
		if qClosedAtGt != "" {
			if err := r.SetQueryParam("closed_at__gt", qClosedAtGt); err != nil {
				return err
			}
		}

	}

	if o.ClosedAtGte != nil {

		// query param closed_at__gte
		var qrClosedAtGte string
		if o.ClosedAtGte != nil {
			qrClosedAtGte = *o.ClosedAtGte
		}
		qClosedAtGte := qrClosedAtGte
		if qClosedAtGte != "" {
			if err := r.SetQueryParam("closed_at__gte", qClosedAtGte); err != nil {
				return err
			}
		}

	}

	if o.ClosedAtLt != nil {

		// query param closed_at__lt
		var qrClosedAtLt string
		if o.ClosedAtLt != nil {
			qrClosedAtLt = *o.ClosedAtLt
		}
		qClosedAtLt := qrClosedAtLt
		if qClosedAtLt != "" {
			if err := r.SetQueryParam("closed_at__lt", qClosedAtLt); err != nil {
				return err
			}
		}

	}

	if o.ClosedAtLte != nil {

		// query param closed_at__lte
		var qrClosedAtLte string
		if o.ClosedAtLte != nil {
			qrClosedAtLte = *o.ClosedAtLte
		}
		qClosedAtLte := qrClosedAtLte
		if qClosedAtLte != "" {
			if err := r.SetQueryParam("closed_at__lte", qClosedAtLte); err != nil {
				return err
			}
		}

	}

	if o.CodingTime != nil {

		// query param coding_time
		var qrCodingTime float64
		if o.CodingTime != nil {
			qrCodingTime = *o.CodingTime
		}
		qCodingTime := swag.FormatFloat64(qrCodingTime)
		if qCodingTime != "" {
			if err := r.SetQueryParam("coding_time", qCodingTime); err != nil {
				return err
			}
		}

	}

	if o.CodingTimeGt != nil {

		// query param coding_time__gt
		var qrCodingTimeGt float64
		if o.CodingTimeGt != nil {
			qrCodingTimeGt = *o.CodingTimeGt
		}
		qCodingTimeGt := swag.FormatFloat64(qrCodingTimeGt)
		if qCodingTimeGt != "" {
			if err := r.SetQueryParam("coding_time__gt", qCodingTimeGt); err != nil {
				return err
			}
		}

	}

	if o.CodingTimeGte != nil {

		// query param coding_time__gte
		var qrCodingTimeGte float64
		if o.CodingTimeGte != nil {
			qrCodingTimeGte = *o.CodingTimeGte
		}
		qCodingTimeGte := swag.FormatFloat64(qrCodingTimeGte)
		if qCodingTimeGte != "" {
			if err := r.SetQueryParam("coding_time__gte", qCodingTimeGte); err != nil {
				return err
			}
		}

	}

	if o.CodingTimeLt != nil {

		// query param coding_time__lt
		var qrCodingTimeLt float64
		if o.CodingTimeLt != nil {
			qrCodingTimeLt = *o.CodingTimeLt
		}
		qCodingTimeLt := swag.FormatFloat64(qrCodingTimeLt)
		if qCodingTimeLt != "" {
			if err := r.SetQueryParam("coding_time__lt", qCodingTimeLt); err != nil {
				return err
			}
		}

	}

	if o.CodingTimeLte != nil {

		// query param coding_time__lte
		var qrCodingTimeLte float64
		if o.CodingTimeLte != nil {
			qrCodingTimeLte = *o.CodingTimeLte
		}
		qCodingTimeLte := swag.FormatFloat64(qrCodingTimeLte)
		if qCodingTimeLte != "" {
			if err := r.SetQueryParam("coding_time__lte", qCodingTimeLte); err != nil {
				return err
			}
		}

	}

	if o.Comments != nil {

		// query param comments
		var qrComments string
		if o.Comments != nil {
			qrComments = *o.Comments
		}
		qComments := qrComments
		if qComments != "" {
			if err := r.SetQueryParam("comments", qComments); err != nil {
				return err
			}
		}

	}

	if o.CommitShas != nil {

		// query param commit_shas
		var qrCommitShas string
		if o.CommitShas != nil {
			qrCommitShas = *o.CommitShas
		}
		qCommitShas := qrCommitShas
		if qCommitShas != "" {
			if err := r.SetQueryParam("commit_shas", qCommitShas); err != nil {
				return err
			}
		}

	}

	if o.CommitShasContains != nil {

		// query param commit_shas__contains
		var qrCommitShasContains string
		if o.CommitShasContains != nil {
			qrCommitShasContains = *o.CommitShasContains
		}
		qCommitShasContains := qrCommitShasContains
		if qCommitShasContains != "" {
			if err := r.SetQueryParam("commit_shas__contains", qCommitShasContains); err != nil {
				return err
			}
		}

	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string
		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {
			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGt != nil {

		// query param created_at__gt
		var qrCreatedAtGt string
		if o.CreatedAtGt != nil {
			qrCreatedAtGt = *o.CreatedAtGt
		}
		qCreatedAtGt := qrCreatedAtGt
		if qCreatedAtGt != "" {
			if err := r.SetQueryParam("created_at__gt", qCreatedAtGt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGte != nil {

		// query param created_at__gte
		var qrCreatedAtGte string
		if o.CreatedAtGte != nil {
			qrCreatedAtGte = *o.CreatedAtGte
		}
		qCreatedAtGte := qrCreatedAtGte
		if qCreatedAtGte != "" {
			if err := r.SetQueryParam("created_at__gte", qCreatedAtGte); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLt != nil {

		// query param created_at__lt
		var qrCreatedAtLt string
		if o.CreatedAtLt != nil {
			qrCreatedAtLt = *o.CreatedAtLt
		}
		qCreatedAtLt := qrCreatedAtLt
		if qCreatedAtLt != "" {
			if err := r.SetQueryParam("created_at__lt", qCreatedAtLt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLte != nil {

		// query param created_at__lte
		var qrCreatedAtLte string
		if o.CreatedAtLte != nil {
			qrCreatedAtLte = *o.CreatedAtLte
		}
		qCreatedAtLte := qrCreatedAtLte
		if qCreatedAtLte != "" {
			if err := r.SetQueryParam("created_at__lte", qCreatedAtLte); err != nil {
				return err
			}
		}

	}

	if o.ExtractedTags != nil {

		// query param extracted_tags
		var qrExtractedTags string
		if o.ExtractedTags != nil {
			qrExtractedTags = *o.ExtractedTags
		}
		qExtractedTags := qrExtractedTags
		if qExtractedTags != "" {
			if err := r.SetQueryParam("extracted_tags", qExtractedTags); err != nil {
				return err
			}
		}

	}

	if o.ExtractedTagsIcontains != nil {

		// query param extracted_tags__icontains
		var qrExtractedTagsIcontains string
		if o.ExtractedTagsIcontains != nil {
			qrExtractedTagsIcontains = *o.ExtractedTagsIcontains
		}
		qExtractedTagsIcontains := qrExtractedTagsIcontains
		if qExtractedTagsIcontains != "" {
			if err := r.SetQueryParam("extracted_tags__icontains", qExtractedTagsIcontains); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.FollowOnCommitCount != nil {

		// query param follow_on_commit_count
		var qrFollowOnCommitCount float64
		if o.FollowOnCommitCount != nil {
			qrFollowOnCommitCount = *o.FollowOnCommitCount
		}
		qFollowOnCommitCount := swag.FormatFloat64(qrFollowOnCommitCount)
		if qFollowOnCommitCount != "" {
			if err := r.SetQueryParam("follow_on_commit_count", qFollowOnCommitCount); err != nil {
				return err
			}
		}

	}

	if o.FollowOnCommitCountGt != nil {

		// query param follow_on_commit_count__gt
		var qrFollowOnCommitCountGt float64
		if o.FollowOnCommitCountGt != nil {
			qrFollowOnCommitCountGt = *o.FollowOnCommitCountGt
		}
		qFollowOnCommitCountGt := swag.FormatFloat64(qrFollowOnCommitCountGt)
		if qFollowOnCommitCountGt != "" {
			if err := r.SetQueryParam("follow_on_commit_count__gt", qFollowOnCommitCountGt); err != nil {
				return err
			}
		}

	}

	if o.FollowOnCommitCountGte != nil {

		// query param follow_on_commit_count__gte
		var qrFollowOnCommitCountGte float64
		if o.FollowOnCommitCountGte != nil {
			qrFollowOnCommitCountGte = *o.FollowOnCommitCountGte
		}
		qFollowOnCommitCountGte := swag.FormatFloat64(qrFollowOnCommitCountGte)
		if qFollowOnCommitCountGte != "" {
			if err := r.SetQueryParam("follow_on_commit_count__gte", qFollowOnCommitCountGte); err != nil {
				return err
			}
		}

	}

	if o.FollowOnCommitCountLt != nil {

		// query param follow_on_commit_count__lt
		var qrFollowOnCommitCountLt float64
		if o.FollowOnCommitCountLt != nil {
			qrFollowOnCommitCountLt = *o.FollowOnCommitCountLt
		}
		qFollowOnCommitCountLt := swag.FormatFloat64(qrFollowOnCommitCountLt)
		if qFollowOnCommitCountLt != "" {
			if err := r.SetQueryParam("follow_on_commit_count__lt", qFollowOnCommitCountLt); err != nil {
				return err
			}
		}

	}

	if o.FollowOnCommitCountLte != nil {

		// query param follow_on_commit_count__lte
		var qrFollowOnCommitCountLte float64
		if o.FollowOnCommitCountLte != nil {
			qrFollowOnCommitCountLte = *o.FollowOnCommitCountLte
		}
		qFollowOnCommitCountLte := swag.FormatFloat64(qrFollowOnCommitCountLte)
		if qFollowOnCommitCountLte != "" {
			if err := r.SetQueryParam("follow_on_commit_count__lte", qFollowOnCommitCountLte); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.NumberExact != nil {

		// query param number__exact
		var qrNumberExact string
		if o.NumberExact != nil {
			qrNumberExact = *o.NumberExact
		}
		qNumberExact := qrNumberExact
		if qNumberExact != "" {
			if err := r.SetQueryParam("number__exact", qNumberExact); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Project != nil {

		// query param project
		var qrProject string
		if o.Project != nil {
			qrProject = *o.Project
		}
		qProject := qrProject
		if qProject != "" {
			if err := r.SetQueryParam("project", qProject); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param project_id
		var qrProjectID float64
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := swag.FormatFloat64(qrProjectID)
		if qProjectID != "" {
			if err := r.SetQueryParam("project_id", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.ProjectIDIn != nil {

		// query param project_id__in
		var qrProjectIDIn string
		if o.ProjectIDIn != nil {
			qrProjectIDIn = *o.ProjectIDIn
		}
		qProjectIDIn := qrProjectIDIn
		if qProjectIDIn != "" {
			if err := r.SetQueryParam("project_id__in", qProjectIDIn); err != nil {
				return err
			}
		}

	}

	if o.ReviewTime != nil {

		// query param review_time
		var qrReviewTime float64
		if o.ReviewTime != nil {
			qrReviewTime = *o.ReviewTime
		}
		qReviewTime := swag.FormatFloat64(qrReviewTime)
		if qReviewTime != "" {
			if err := r.SetQueryParam("review_time", qReviewTime); err != nil {
				return err
			}
		}

	}

	if o.ReviewTimeGt != nil {

		// query param review_time__gt
		var qrReviewTimeGt float64
		if o.ReviewTimeGt != nil {
			qrReviewTimeGt = *o.ReviewTimeGt
		}
		qReviewTimeGt := swag.FormatFloat64(qrReviewTimeGt)
		if qReviewTimeGt != "" {
			if err := r.SetQueryParam("review_time__gt", qReviewTimeGt); err != nil {
				return err
			}
		}

	}

	if o.ReviewTimeGte != nil {

		// query param review_time__gte
		var qrReviewTimeGte float64
		if o.ReviewTimeGte != nil {
			qrReviewTimeGte = *o.ReviewTimeGte
		}
		qReviewTimeGte := swag.FormatFloat64(qrReviewTimeGte)
		if qReviewTimeGte != "" {
			if err := r.SetQueryParam("review_time__gte", qReviewTimeGte); err != nil {
				return err
			}
		}

	}

	if o.ReviewTimeLt != nil {

		// query param review_time__lt
		var qrReviewTimeLt float64
		if o.ReviewTimeLt != nil {
			qrReviewTimeLt = *o.ReviewTimeLt
		}
		qReviewTimeLt := swag.FormatFloat64(qrReviewTimeLt)
		if qReviewTimeLt != "" {
			if err := r.SetQueryParam("review_time__lt", qReviewTimeLt); err != nil {
				return err
			}
		}

	}

	if o.ReviewTimeLte != nil {

		// query param review_time__lte
		var qrReviewTimeLte float64
		if o.ReviewTimeLte != nil {
			qrReviewTimeLte = *o.ReviewTimeLte
		}
		qReviewTimeLte := swag.FormatFloat64(qrReviewTimeLte)
		if qReviewTimeLte != "" {
			if err := r.SetQueryParam("review_time__lte", qReviewTimeLte); err != nil {
				return err
			}
		}

	}

	if o.ReviewerCommentCount != nil {

		// query param reviewer_comment_count
		var qrReviewerCommentCount float64
		if o.ReviewerCommentCount != nil {
			qrReviewerCommentCount = *o.ReviewerCommentCount
		}
		qReviewerCommentCount := swag.FormatFloat64(qrReviewerCommentCount)
		if qReviewerCommentCount != "" {
			if err := r.SetQueryParam("reviewer_comment_count", qReviewerCommentCount); err != nil {
				return err
			}
		}

	}

	if o.ReviewerCommentCountGt != nil {

		// query param reviewer_comment_count__gt
		var qrReviewerCommentCountGt float64
		if o.ReviewerCommentCountGt != nil {
			qrReviewerCommentCountGt = *o.ReviewerCommentCountGt
		}
		qReviewerCommentCountGt := swag.FormatFloat64(qrReviewerCommentCountGt)
		if qReviewerCommentCountGt != "" {
			if err := r.SetQueryParam("reviewer_comment_count__gt", qReviewerCommentCountGt); err != nil {
				return err
			}
		}

	}

	if o.ReviewerCommentCountGte != nil {

		// query param reviewer_comment_count__gte
		var qrReviewerCommentCountGte float64
		if o.ReviewerCommentCountGte != nil {
			qrReviewerCommentCountGte = *o.ReviewerCommentCountGte
		}
		qReviewerCommentCountGte := swag.FormatFloat64(qrReviewerCommentCountGte)
		if qReviewerCommentCountGte != "" {
			if err := r.SetQueryParam("reviewer_comment_count__gte", qReviewerCommentCountGte); err != nil {
				return err
			}
		}

	}

	if o.ReviewerCommentCountLt != nil {

		// query param reviewer_comment_count__lt
		var qrReviewerCommentCountLt float64
		if o.ReviewerCommentCountLt != nil {
			qrReviewerCommentCountLt = *o.ReviewerCommentCountLt
		}
		qReviewerCommentCountLt := swag.FormatFloat64(qrReviewerCommentCountLt)
		if qReviewerCommentCountLt != "" {
			if err := r.SetQueryParam("reviewer_comment_count__lt", qReviewerCommentCountLt); err != nil {
				return err
			}
		}

	}

	if o.ReviewerCommentCountLte != nil {

		// query param reviewer_comment_count__lte
		var qrReviewerCommentCountLte float64
		if o.ReviewerCommentCountLte != nil {
			qrReviewerCommentCountLte = *o.ReviewerCommentCountLte
		}
		qReviewerCommentCountLte := swag.FormatFloat64(qrReviewerCommentCountLte)
		if qReviewerCommentCountLte != "" {
			if err := r.SetQueryParam("reviewer_comment_count__lte", qReviewerCommentCountLte); err != nil {
				return err
			}
		}

	}

	if o.Reviewers != nil {

		// query param reviewers
		var qrReviewers string
		if o.Reviewers != nil {
			qrReviewers = *o.Reviewers
		}
		qReviewers := qrReviewers
		if qReviewers != "" {
			if err := r.SetQueryParam("reviewers", qReviewers); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if o.StateIn != nil {

		// query param state__in
		var qrStateIn string
		if o.StateIn != nil {
			qrStateIn = *o.StateIn
		}
		qStateIn := qrStateIn
		if qStateIn != "" {
			if err := r.SetQueryParam("state__in", qStateIn); err != nil {
				return err
			}
		}

	}

	if o.Title != nil {

		// query param title
		var qrTitle string
		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {
			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}

	}

	if o.TitleIcontains != nil {

		// query param title__icontains
		var qrTitleIcontains string
		if o.TitleIcontains != nil {
			qrTitleIcontains = *o.TitleIcontains
		}
		qTitleIcontains := qrTitleIcontains
		if qTitleIcontains != "" {
			if err := r.SetQueryParam("title__icontains", qTitleIcontains); err != nil {
				return err
			}
		}

	}

	if o.TitleStartswith != nil {

		// query param title__startswith
		var qrTitleStartswith string
		if o.TitleStartswith != nil {
			qrTitleStartswith = *o.TitleStartswith
		}
		qTitleStartswith := qrTitleStartswith
		if qTitleStartswith != "" {
			if err := r.SetQueryParam("title__startswith", qTitleStartswith); err != nil {
				return err
			}
		}

	}

	if o.UserAliasID != nil {

		// query param user_alias_id
		var qrUserAliasID float64
		if o.UserAliasID != nil {
			qrUserAliasID = *o.UserAliasID
		}
		qUserAliasID := swag.FormatFloat64(qrUserAliasID)
		if qUserAliasID != "" {
			if err := r.SetQueryParam("user_alias_id", qUserAliasID); err != nil {
				return err
			}
		}

	}

	if o.UserAliasIDIn != nil {

		// query param user_alias_id__in
		var qrUserAliasIDIn string
		if o.UserAliasIDIn != nil {
			qrUserAliasIDIn = *o.UserAliasIDIn
		}
		qUserAliasIDIn := qrUserAliasIDIn
		if qUserAliasIDIn != "" {
			if err := r.SetQueryParam("user_alias_id__in", qUserAliasIDIn); err != nil {
				return err
			}
		}

	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string
		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {
			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
