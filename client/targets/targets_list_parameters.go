// Code generated by go-swagger; DO NOT EDIT.

package targets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTargetsListParams creates a new TargetsListParams object
// with the default values initialized.
func NewTargetsListParams() *TargetsListParams {
	var ()
	return &TargetsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTargetsListParamsWithTimeout creates a new TargetsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTargetsListParamsWithTimeout(timeout time.Duration) *TargetsListParams {
	var ()
	return &TargetsListParams{

		timeout: timeout,
	}
}

// NewTargetsListParamsWithContext creates a new TargetsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewTargetsListParamsWithContext(ctx context.Context) *TargetsListParams {
	var ()
	return &TargetsListParams{

		Context: ctx,
	}
}

// NewTargetsListParamsWithHTTPClient creates a new TargetsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTargetsListParamsWithHTTPClient(client *http.Client) *TargetsListParams {
	var ()
	return &TargetsListParams{
		HTTPClient: client,
	}
}

/*TargetsListParams contains all the parameters to send to the API endpoint
for the targets list operation typically these are written to a http.Request
*/
type TargetsListParams struct {

	/*ApexUserIn
	  Match on apex_user in a comma separated list

	*/
	ApexUserIn *string
	/*ApexUserID*/
	ApexUserID *string
	/*ApexUserIDIn
	  Match on apex_user_id in a comma separated list

	*/
	ApexUserIDIn *string
	/*ApexUserIDIsnull*/
	ApexUserIDIsnull *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Key*/
	Key *string
	/*KeyIcontains*/
	KeyIcontains *string
	/*KeyStartswith*/
	KeyStartswith *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `key`, `team_id`, `apex_user_id`

	*/
	Ordering *string
	/*Search
	  A search term.

	*/
	Search *string
	/*TeamID*/
	TeamID *string
	/*TeamIDIn
	  Match on team_id in a comma separated list

	*/
	TeamIDIn *string
	/*TeamIDIsnull*/
	TeamIDIsnull *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the targets list params
func (o *TargetsListParams) WithTimeout(timeout time.Duration) *TargetsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the targets list params
func (o *TargetsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the targets list params
func (o *TargetsListParams) WithContext(ctx context.Context) *TargetsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the targets list params
func (o *TargetsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the targets list params
func (o *TargetsListParams) WithHTTPClient(client *http.Client) *TargetsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the targets list params
func (o *TargetsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApexUserIn adds the apexUserIn to the targets list params
func (o *TargetsListParams) WithApexUserIn(apexUserIn *string) *TargetsListParams {
	o.SetApexUserIn(apexUserIn)
	return o
}

// SetApexUserIn adds the apexUserIn to the targets list params
func (o *TargetsListParams) SetApexUserIn(apexUserIn *string) {
	o.ApexUserIn = apexUserIn
}

// WithApexUserID adds the apexUserID to the targets list params
func (o *TargetsListParams) WithApexUserID(apexUserID *string) *TargetsListParams {
	o.SetApexUserID(apexUserID)
	return o
}

// SetApexUserID adds the apexUserId to the targets list params
func (o *TargetsListParams) SetApexUserID(apexUserID *string) {
	o.ApexUserID = apexUserID
}

// WithApexUserIDIn adds the apexUserIDIn to the targets list params
func (o *TargetsListParams) WithApexUserIDIn(apexUserIDIn *string) *TargetsListParams {
	o.SetApexUserIDIn(apexUserIDIn)
	return o
}

// SetApexUserIDIn adds the apexUserIdIn to the targets list params
func (o *TargetsListParams) SetApexUserIDIn(apexUserIDIn *string) {
	o.ApexUserIDIn = apexUserIDIn
}

// WithApexUserIDIsnull adds the apexUserIDIsnull to the targets list params
func (o *TargetsListParams) WithApexUserIDIsnull(apexUserIDIsnull *string) *TargetsListParams {
	o.SetApexUserIDIsnull(apexUserIDIsnull)
	return o
}

// SetApexUserIDIsnull adds the apexUserIdIsnull to the targets list params
func (o *TargetsListParams) SetApexUserIDIsnull(apexUserIDIsnull *string) {
	o.ApexUserIDIsnull = apexUserIDIsnull
}

// WithFilters adds the filters to the targets list params
func (o *TargetsListParams) WithFilters(filters *string) *TargetsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the targets list params
func (o *TargetsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the targets list params
func (o *TargetsListParams) WithID(id *float64) *TargetsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the targets list params
func (o *TargetsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the targets list params
func (o *TargetsListParams) WithIDIn(iDIn *float64) *TargetsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the targets list params
func (o *TargetsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithKey adds the key to the targets list params
func (o *TargetsListParams) WithKey(key *string) *TargetsListParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the targets list params
func (o *TargetsListParams) SetKey(key *string) {
	o.Key = key
}

// WithKeyIcontains adds the keyIcontains to the targets list params
func (o *TargetsListParams) WithKeyIcontains(keyIcontains *string) *TargetsListParams {
	o.SetKeyIcontains(keyIcontains)
	return o
}

// SetKeyIcontains adds the keyIcontains to the targets list params
func (o *TargetsListParams) SetKeyIcontains(keyIcontains *string) {
	o.KeyIcontains = keyIcontains
}

// WithKeyStartswith adds the keyStartswith to the targets list params
func (o *TargetsListParams) WithKeyStartswith(keyStartswith *string) *TargetsListParams {
	o.SetKeyStartswith(keyStartswith)
	return o
}

// SetKeyStartswith adds the keyStartswith to the targets list params
func (o *TargetsListParams) SetKeyStartswith(keyStartswith *string) {
	o.KeyStartswith = keyStartswith
}

// WithLimit adds the limit to the targets list params
func (o *TargetsListParams) WithLimit(limit *int64) *TargetsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the targets list params
func (o *TargetsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the targets list params
func (o *TargetsListParams) WithOffset(offset *int64) *TargetsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the targets list params
func (o *TargetsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the targets list params
func (o *TargetsListParams) WithOrdering(ordering *string) *TargetsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the targets list params
func (o *TargetsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithSearch adds the search to the targets list params
func (o *TargetsListParams) WithSearch(search *string) *TargetsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the targets list params
func (o *TargetsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithTeamID adds the teamID to the targets list params
func (o *TargetsListParams) WithTeamID(teamID *string) *TargetsListParams {
	o.SetTeamID(teamID)
	return o
}

// SetTeamID adds the teamId to the targets list params
func (o *TargetsListParams) SetTeamID(teamID *string) {
	o.TeamID = teamID
}

// WithTeamIDIn adds the teamIDIn to the targets list params
func (o *TargetsListParams) WithTeamIDIn(teamIDIn *string) *TargetsListParams {
	o.SetTeamIDIn(teamIDIn)
	return o
}

// SetTeamIDIn adds the teamIdIn to the targets list params
func (o *TargetsListParams) SetTeamIDIn(teamIDIn *string) {
	o.TeamIDIn = teamIDIn
}

// WithTeamIDIsnull adds the teamIDIsnull to the targets list params
func (o *TargetsListParams) WithTeamIDIsnull(teamIDIsnull *string) *TargetsListParams {
	o.SetTeamIDIsnull(teamIDIsnull)
	return o
}

// SetTeamIDIsnull adds the teamIdIsnull to the targets list params
func (o *TargetsListParams) SetTeamIDIsnull(teamIDIsnull *string) {
	o.TeamIDIsnull = teamIDIsnull
}

// WriteToRequest writes these params to a swagger request
func (o *TargetsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApexUserIn != nil {

		// query param apex_user__in
		var qrApexUserIn string
		if o.ApexUserIn != nil {
			qrApexUserIn = *o.ApexUserIn
		}
		qApexUserIn := qrApexUserIn
		if qApexUserIn != "" {
			if err := r.SetQueryParam("apex_user__in", qApexUserIn); err != nil {
				return err
			}
		}

	}

	if o.ApexUserID != nil {

		// query param apex_user_id
		var qrApexUserID string
		if o.ApexUserID != nil {
			qrApexUserID = *o.ApexUserID
		}
		qApexUserID := qrApexUserID
		if qApexUserID != "" {
			if err := r.SetQueryParam("apex_user_id", qApexUserID); err != nil {
				return err
			}
		}

	}

	if o.ApexUserIDIn != nil {

		// query param apex_user_id__in
		var qrApexUserIDIn string
		if o.ApexUserIDIn != nil {
			qrApexUserIDIn = *o.ApexUserIDIn
		}
		qApexUserIDIn := qrApexUserIDIn
		if qApexUserIDIn != "" {
			if err := r.SetQueryParam("apex_user_id__in", qApexUserIDIn); err != nil {
				return err
			}
		}

	}

	if o.ApexUserIDIsnull != nil {

		// query param apex_user_id__isnull
		var qrApexUserIDIsnull string
		if o.ApexUserIDIsnull != nil {
			qrApexUserIDIsnull = *o.ApexUserIDIsnull
		}
		qApexUserIDIsnull := qrApexUserIDIsnull
		if qApexUserIDIsnull != "" {
			if err := r.SetQueryParam("apex_user_id__isnull", qApexUserIDIsnull); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Key != nil {

		// query param key
		var qrKey string
		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {
			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}

	}

	if o.KeyIcontains != nil {

		// query param key__icontains
		var qrKeyIcontains string
		if o.KeyIcontains != nil {
			qrKeyIcontains = *o.KeyIcontains
		}
		qKeyIcontains := qrKeyIcontains
		if qKeyIcontains != "" {
			if err := r.SetQueryParam("key__icontains", qKeyIcontains); err != nil {
				return err
			}
		}

	}

	if o.KeyStartswith != nil {

		// query param key__startswith
		var qrKeyStartswith string
		if o.KeyStartswith != nil {
			qrKeyStartswith = *o.KeyStartswith
		}
		qKeyStartswith := qrKeyStartswith
		if qKeyStartswith != "" {
			if err := r.SetQueryParam("key__startswith", qKeyStartswith); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.TeamID != nil {

		// query param team_id
		var qrTeamID string
		if o.TeamID != nil {
			qrTeamID = *o.TeamID
		}
		qTeamID := qrTeamID
		if qTeamID != "" {
			if err := r.SetQueryParam("team_id", qTeamID); err != nil {
				return err
			}
		}

	}

	if o.TeamIDIn != nil {

		// query param team_id__in
		var qrTeamIDIn string
		if o.TeamIDIn != nil {
			qrTeamIDIn = *o.TeamIDIn
		}
		qTeamIDIn := qrTeamIDIn
		if qTeamIDIn != "" {
			if err := r.SetQueryParam("team_id__in", qTeamIDIn); err != nil {
				return err
			}
		}

	}

	if o.TeamIDIsnull != nil {

		// query param team_id__isnull
		var qrTeamIDIsnull string
		if o.TeamIDIsnull != nil {
			qrTeamIDIsnull = *o.TeamIDIsnull
		}
		qTeamIDIsnull := qrTeamIDIsnull
		if qTeamIDIsnull != "" {
			if err := r.SetQueryParam("team_id__isnull", qTeamIDIsnull); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
