// Code generated by go-swagger; DO NOT EDIT.

package targets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new targets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for targets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TargetsList(params *TargetsListParams, authInfo runtime.ClientAuthInfoWriter) (*TargetsListOK, error)

	TargetsRead(params *TargetsReadParams, authInfo runtime.ClientAuthInfoWriter) (*TargetsReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TargetsList lists targets entities

  List Targets entities

--- Target ---

A Target represents a user-defined goal for an individual or team. The goals are reflected in specific reports.

--- General ---

All objects can be traversed to related objects. This can be achieved by using the double-underscore syntax.
For instance, query all Author records with a specific Team name like so:

"?team\_\_name=Bobs%20Team".

You can easily traverse multiple levels of relationships by connecting related objects. For example:

"?foo\_\_bar\_\_baz\_\_name=Bob"

All available relationships are defined in the filter documentation with the note "filter-traversable object."
Additionally, you can limit the properties returned in an object by using the `fields` or `omit`
keywords as follows:

"?fields=foo,bar,bad" will return only these fields

or

"?omit=foo,bar,baz" will return all but the specified fields
*/
func (a *Client) TargetsList(params *TargetsListParams, authInfo runtime.ClientAuthInfoWriter) (*TargetsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTargetsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "targets_list",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/targets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TargetsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TargetsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for targets_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TargetsRead gets a specific targets entity by id value

  Get a specific Targets entity by id value
*/
func (a *Client) TargetsRead(params *TargetsReadParams, authInfo runtime.ClientAuthInfoWriter) (*TargetsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTargetsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "targets_read",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/targets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TargetsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TargetsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for targets_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
