// Code generated by go-swagger; DO NOT EDIT.

package org_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new org membership API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for org membership API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	OrgMembershipList(params *OrgMembershipListParams, authInfo runtime.ClientAuthInfoWriter) (*OrgMembershipListOK, error)

	OrgMembershipPartialUpdate(params *OrgMembershipPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OrgMembershipPartialUpdateOK, error)

	OrgMembershipRead(params *OrgMembershipReadParams, authInfo runtime.ClientAuthInfoWriter) (*OrgMembershipReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  OrgMembershipList lists org membership entities

  List OrgMembership entities

--- Org Membership ---

Org Membership is a defined relationship between an Organization, a User and sometimes an Author.

--- General ---

All objects can be traversed to related objects. This can be achieved by using the double-underscore syntax.
For instance, query all Author records with a specific Team name like so:

"?team\_\_name=Bobs%20Team".

You can easily traverse multiple levels of relationships by connecting related objects. For example:

"?foo\_\_bar\_\_baz\_\_name=Bob"

All available relationships are defined in the filter documentation with the note "filter-traversable object."
Additionally, you can limit the properties returned in an object by using the `fields` or `omit`
keywords as follows:

"?fields=foo,bar,bad" will return only these fields

or

"?omit=foo,bar,baz" will return all but the specified fields
*/
func (a *Client) OrgMembershipList(params *OrgMembershipListParams, authInfo runtime.ClientAuthInfoWriter) (*OrgMembershipListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgMembershipListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org_membership_list",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/org_membership/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrgMembershipListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgMembershipListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for org_membership_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrgMembershipPartialUpdate updates org membership by id value

  Update org_membership by id value

Change the grants, roles, depth and scope of an org membership

Roles have associated grants with them. To assign roles pass in an Array of Role ids. To view available Roles use
the roles API.

For custom grants pass in an Array of Grant ids. To view available Grants use the grants API.

Visibility Level:

Use scope to change which teams users see by default. If left out, defaults to all teams

    USER - see only my data
    TEAM - see my teams data
    ALL - see any teams data

Individual contributor metrics:

Use depth to change if users can see individual users' metrics. If left out, defaults to yes.

    NONE - user see nothing past themselves
    AGGREGATE  - view general data metrics (teams active days per week)
    ATOMIC - view granular data metrics (Sandy's active days per week)
*/
func (a *Client) OrgMembershipPartialUpdate(params *OrgMembershipPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*OrgMembershipPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgMembershipPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org_membership_partial_update",
		Method:             "PATCH",
		PathPattern:        "/v3/customer/core/org_membership/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrgMembershipPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgMembershipPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for org_membership_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrgMembershipRead gets a specific org membership entity by id value

  Get a specific OrgMembership entity by id value
*/
func (a *Client) OrgMembershipRead(params *OrgMembershipReadParams, authInfo runtime.ClientAuthInfoWriter) (*OrgMembershipReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrgMembershipReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "org_membership_read",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/org_membership/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrgMembershipReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrgMembershipReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for org_membership_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
