// Code generated by go-swagger; DO NOT EDIT.

package org_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewOrgMembershipListParams creates a new OrgMembershipListParams object
// with the default values initialized.
func NewOrgMembershipListParams() *OrgMembershipListParams {
	var ()
	return &OrgMembershipListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOrgMembershipListParamsWithTimeout creates a new OrgMembershipListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOrgMembershipListParamsWithTimeout(timeout time.Duration) *OrgMembershipListParams {
	var ()
	return &OrgMembershipListParams{

		timeout: timeout,
	}
}

// NewOrgMembershipListParamsWithContext creates a new OrgMembershipListParams object
// with the default values initialized, and the ability to set a context for a request
func NewOrgMembershipListParamsWithContext(ctx context.Context) *OrgMembershipListParams {
	var ()
	return &OrgMembershipListParams{

		Context: ctx,
	}
}

// NewOrgMembershipListParamsWithHTTPClient creates a new OrgMembershipListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOrgMembershipListParamsWithHTTPClient(client *http.Client) *OrgMembershipListParams {
	var ()
	return &OrgMembershipListParams{
		HTTPClient: client,
	}
}

/*OrgMembershipListParams contains all the parameters to send to the API endpoint
for the org membership list operation typically these are written to a http.Request
*/
type OrgMembershipListParams struct {

	/*ApexUser
	  Filter-traversable object

	*/
	ApexUser *string
	/*ApexUserID*/
	ApexUserID *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `user_id`, `org_id`, `apex_user_id`, `created_at`

	*/
	Ordering *string
	/*Search
	  A search term.

	*/
	Search *string
	/*User
	  Filter-traversable object

	*/
	User *string
	/*UserID*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the org membership list params
func (o *OrgMembershipListParams) WithTimeout(timeout time.Duration) *OrgMembershipListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the org membership list params
func (o *OrgMembershipListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the org membership list params
func (o *OrgMembershipListParams) WithContext(ctx context.Context) *OrgMembershipListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the org membership list params
func (o *OrgMembershipListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the org membership list params
func (o *OrgMembershipListParams) WithHTTPClient(client *http.Client) *OrgMembershipListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the org membership list params
func (o *OrgMembershipListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApexUser adds the apexUser to the org membership list params
func (o *OrgMembershipListParams) WithApexUser(apexUser *string) *OrgMembershipListParams {
	o.SetApexUser(apexUser)
	return o
}

// SetApexUser adds the apexUser to the org membership list params
func (o *OrgMembershipListParams) SetApexUser(apexUser *string) {
	o.ApexUser = apexUser
}

// WithApexUserID adds the apexUserID to the org membership list params
func (o *OrgMembershipListParams) WithApexUserID(apexUserID *string) *OrgMembershipListParams {
	o.SetApexUserID(apexUserID)
	return o
}

// SetApexUserID adds the apexUserId to the org membership list params
func (o *OrgMembershipListParams) SetApexUserID(apexUserID *string) {
	o.ApexUserID = apexUserID
}

// WithFilters adds the filters to the org membership list params
func (o *OrgMembershipListParams) WithFilters(filters *string) *OrgMembershipListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the org membership list params
func (o *OrgMembershipListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the org membership list params
func (o *OrgMembershipListParams) WithID(id *float64) *OrgMembershipListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the org membership list params
func (o *OrgMembershipListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the org membership list params
func (o *OrgMembershipListParams) WithIDIn(iDIn *float64) *OrgMembershipListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the org membership list params
func (o *OrgMembershipListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithLimit adds the limit to the org membership list params
func (o *OrgMembershipListParams) WithLimit(limit *int64) *OrgMembershipListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the org membership list params
func (o *OrgMembershipListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the org membership list params
func (o *OrgMembershipListParams) WithOffset(offset *int64) *OrgMembershipListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the org membership list params
func (o *OrgMembershipListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the org membership list params
func (o *OrgMembershipListParams) WithOrdering(ordering *string) *OrgMembershipListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the org membership list params
func (o *OrgMembershipListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithSearch adds the search to the org membership list params
func (o *OrgMembershipListParams) WithSearch(search *string) *OrgMembershipListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the org membership list params
func (o *OrgMembershipListParams) SetSearch(search *string) {
	o.Search = search
}

// WithUser adds the user to the org membership list params
func (o *OrgMembershipListParams) WithUser(user *string) *OrgMembershipListParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the org membership list params
func (o *OrgMembershipListParams) SetUser(user *string) {
	o.User = user
}

// WithUserID adds the userID to the org membership list params
func (o *OrgMembershipListParams) WithUserID(userID *string) *OrgMembershipListParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the org membership list params
func (o *OrgMembershipListParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *OrgMembershipListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApexUser != nil {

		// query param apex_user
		var qrApexUser string
		if o.ApexUser != nil {
			qrApexUser = *o.ApexUser
		}
		qApexUser := qrApexUser
		if qApexUser != "" {
			if err := r.SetQueryParam("apex_user", qApexUser); err != nil {
				return err
			}
		}

	}

	if o.ApexUserID != nil {

		// query param apex_user_id
		var qrApexUserID string
		if o.ApexUserID != nil {
			qrApexUserID = *o.ApexUserID
		}
		qApexUserID := qrApexUserID
		if qApexUserID != "" {
			if err := r.SetQueryParam("apex_user_id", qApexUserID); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.User != nil {

		// query param user
		var qrUser string
		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {
			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
