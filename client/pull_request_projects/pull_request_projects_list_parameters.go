// Code generated by go-swagger; DO NOT EDIT.

package pull_request_projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPullRequestProjectsListParams creates a new PullRequestProjectsListParams object
// with the default values initialized.
func NewPullRequestProjectsListParams() *PullRequestProjectsListParams {
	var ()
	return &PullRequestProjectsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPullRequestProjectsListParamsWithTimeout creates a new PullRequestProjectsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPullRequestProjectsListParamsWithTimeout(timeout time.Duration) *PullRequestProjectsListParams {
	var ()
	return &PullRequestProjectsListParams{

		timeout: timeout,
	}
}

// NewPullRequestProjectsListParamsWithContext creates a new PullRequestProjectsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewPullRequestProjectsListParamsWithContext(ctx context.Context) *PullRequestProjectsListParams {
	var ()
	return &PullRequestProjectsListParams{

		Context: ctx,
	}
}

// NewPullRequestProjectsListParamsWithHTTPClient creates a new PullRequestProjectsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPullRequestProjectsListParamsWithHTTPClient(client *http.Client) *PullRequestProjectsListParams {
	var ()
	return &PullRequestProjectsListParams{
		HTTPClient: client,
	}
}

/*PullRequestProjectsListParams contains all the parameters to send to the API endpoint
for the pull request projects list operation typically these are written to a http.Request
*/
type PullRequestProjectsListParams struct {

	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*IntegrationName*/
	IntegrationName *string
	/*IntegrationNameIcontains*/
	IntegrationNameIcontains *string
	/*IntegrationNameStartswith*/
	IntegrationNameStartswith *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Name*/
	Name *string
	/*NameIcontains*/
	NameIcontains *string
	/*NameStartswith*/
	NameStartswith *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `repo_id`, `vendor_type`, `integration__name`, `name`, `processing__updated_at`, `processing__processing_status__id`

	*/
	Ordering *string
	/*Repo
	  Filter-traversable object

	*/
	Repo *string
	/*RepoID
	  Records matching the provided id

	*/
	RepoID *float64
	/*RepoIDIn
	  Match on repo_id in a comma separated list

	*/
	RepoIDIn *string
	/*Search
	  A search term.

	*/
	Search *string
	/*UpdatedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAt *string
	/*UpdatedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAtGt *string
	/*UpdatedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAtGte *string
	/*UpdatedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAtLt *string
	/*UpdatedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	UpdatedAtLte *string
	/*URL*/
	URL *string
	/*URLIcontains*/
	URLIcontains *string
	/*URLStartswith*/
	URLStartswith *string
	/*VendorType*/
	VendorType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the pull request projects list params
func (o *PullRequestProjectsListParams) WithTimeout(timeout time.Duration) *PullRequestProjectsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pull request projects list params
func (o *PullRequestProjectsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pull request projects list params
func (o *PullRequestProjectsListParams) WithContext(ctx context.Context) *PullRequestProjectsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pull request projects list params
func (o *PullRequestProjectsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pull request projects list params
func (o *PullRequestProjectsListParams) WithHTTPClient(client *http.Client) *PullRequestProjectsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pull request projects list params
func (o *PullRequestProjectsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilters adds the filters to the pull request projects list params
func (o *PullRequestProjectsListParams) WithFilters(filters *string) *PullRequestProjectsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the pull request projects list params
func (o *PullRequestProjectsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the pull request projects list params
func (o *PullRequestProjectsListParams) WithID(id *float64) *PullRequestProjectsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the pull request projects list params
func (o *PullRequestProjectsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the pull request projects list params
func (o *PullRequestProjectsListParams) WithIDIn(iDIn *float64) *PullRequestProjectsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the pull request projects list params
func (o *PullRequestProjectsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithIntegrationName adds the integrationName to the pull request projects list params
func (o *PullRequestProjectsListParams) WithIntegrationName(integrationName *string) *PullRequestProjectsListParams {
	o.SetIntegrationName(integrationName)
	return o
}

// SetIntegrationName adds the integrationName to the pull request projects list params
func (o *PullRequestProjectsListParams) SetIntegrationName(integrationName *string) {
	o.IntegrationName = integrationName
}

// WithIntegrationNameIcontains adds the integrationNameIcontains to the pull request projects list params
func (o *PullRequestProjectsListParams) WithIntegrationNameIcontains(integrationNameIcontains *string) *PullRequestProjectsListParams {
	o.SetIntegrationNameIcontains(integrationNameIcontains)
	return o
}

// SetIntegrationNameIcontains adds the integrationNameIcontains to the pull request projects list params
func (o *PullRequestProjectsListParams) SetIntegrationNameIcontains(integrationNameIcontains *string) {
	o.IntegrationNameIcontains = integrationNameIcontains
}

// WithIntegrationNameStartswith adds the integrationNameStartswith to the pull request projects list params
func (o *PullRequestProjectsListParams) WithIntegrationNameStartswith(integrationNameStartswith *string) *PullRequestProjectsListParams {
	o.SetIntegrationNameStartswith(integrationNameStartswith)
	return o
}

// SetIntegrationNameStartswith adds the integrationNameStartswith to the pull request projects list params
func (o *PullRequestProjectsListParams) SetIntegrationNameStartswith(integrationNameStartswith *string) {
	o.IntegrationNameStartswith = integrationNameStartswith
}

// WithLimit adds the limit to the pull request projects list params
func (o *PullRequestProjectsListParams) WithLimit(limit *int64) *PullRequestProjectsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the pull request projects list params
func (o *PullRequestProjectsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the pull request projects list params
func (o *PullRequestProjectsListParams) WithName(name *string) *PullRequestProjectsListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the pull request projects list params
func (o *PullRequestProjectsListParams) SetName(name *string) {
	o.Name = name
}

// WithNameIcontains adds the nameIcontains to the pull request projects list params
func (o *PullRequestProjectsListParams) WithNameIcontains(nameIcontains *string) *PullRequestProjectsListParams {
	o.SetNameIcontains(nameIcontains)
	return o
}

// SetNameIcontains adds the nameIcontains to the pull request projects list params
func (o *PullRequestProjectsListParams) SetNameIcontains(nameIcontains *string) {
	o.NameIcontains = nameIcontains
}

// WithNameStartswith adds the nameStartswith to the pull request projects list params
func (o *PullRequestProjectsListParams) WithNameStartswith(nameStartswith *string) *PullRequestProjectsListParams {
	o.SetNameStartswith(nameStartswith)
	return o
}

// SetNameStartswith adds the nameStartswith to the pull request projects list params
func (o *PullRequestProjectsListParams) SetNameStartswith(nameStartswith *string) {
	o.NameStartswith = nameStartswith
}

// WithOffset adds the offset to the pull request projects list params
func (o *PullRequestProjectsListParams) WithOffset(offset *int64) *PullRequestProjectsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the pull request projects list params
func (o *PullRequestProjectsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the pull request projects list params
func (o *PullRequestProjectsListParams) WithOrdering(ordering *string) *PullRequestProjectsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the pull request projects list params
func (o *PullRequestProjectsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithRepo adds the repo to the pull request projects list params
func (o *PullRequestProjectsListParams) WithRepo(repo *string) *PullRequestProjectsListParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the pull request projects list params
func (o *PullRequestProjectsListParams) SetRepo(repo *string) {
	o.Repo = repo
}

// WithRepoID adds the repoID to the pull request projects list params
func (o *PullRequestProjectsListParams) WithRepoID(repoID *float64) *PullRequestProjectsListParams {
	o.SetRepoID(repoID)
	return o
}

// SetRepoID adds the repoId to the pull request projects list params
func (o *PullRequestProjectsListParams) SetRepoID(repoID *float64) {
	o.RepoID = repoID
}

// WithRepoIDIn adds the repoIDIn to the pull request projects list params
func (o *PullRequestProjectsListParams) WithRepoIDIn(repoIDIn *string) *PullRequestProjectsListParams {
	o.SetRepoIDIn(repoIDIn)
	return o
}

// SetRepoIDIn adds the repoIdIn to the pull request projects list params
func (o *PullRequestProjectsListParams) SetRepoIDIn(repoIDIn *string) {
	o.RepoIDIn = repoIDIn
}

// WithSearch adds the search to the pull request projects list params
func (o *PullRequestProjectsListParams) WithSearch(search *string) *PullRequestProjectsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the pull request projects list params
func (o *PullRequestProjectsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithUpdatedAt adds the updatedAt to the pull request projects list params
func (o *PullRequestProjectsListParams) WithUpdatedAt(updatedAt *string) *PullRequestProjectsListParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the pull request projects list params
func (o *PullRequestProjectsListParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WithUpdatedAtGt adds the updatedAtGt to the pull request projects list params
func (o *PullRequestProjectsListParams) WithUpdatedAtGt(updatedAtGt *string) *PullRequestProjectsListParams {
	o.SetUpdatedAtGt(updatedAtGt)
	return o
}

// SetUpdatedAtGt adds the updatedAtGt to the pull request projects list params
func (o *PullRequestProjectsListParams) SetUpdatedAtGt(updatedAtGt *string) {
	o.UpdatedAtGt = updatedAtGt
}

// WithUpdatedAtGte adds the updatedAtGte to the pull request projects list params
func (o *PullRequestProjectsListParams) WithUpdatedAtGte(updatedAtGte *string) *PullRequestProjectsListParams {
	o.SetUpdatedAtGte(updatedAtGte)
	return o
}

// SetUpdatedAtGte adds the updatedAtGte to the pull request projects list params
func (o *PullRequestProjectsListParams) SetUpdatedAtGte(updatedAtGte *string) {
	o.UpdatedAtGte = updatedAtGte
}

// WithUpdatedAtLt adds the updatedAtLt to the pull request projects list params
func (o *PullRequestProjectsListParams) WithUpdatedAtLt(updatedAtLt *string) *PullRequestProjectsListParams {
	o.SetUpdatedAtLt(updatedAtLt)
	return o
}

// SetUpdatedAtLt adds the updatedAtLt to the pull request projects list params
func (o *PullRequestProjectsListParams) SetUpdatedAtLt(updatedAtLt *string) {
	o.UpdatedAtLt = updatedAtLt
}

// WithUpdatedAtLte adds the updatedAtLte to the pull request projects list params
func (o *PullRequestProjectsListParams) WithUpdatedAtLte(updatedAtLte *string) *PullRequestProjectsListParams {
	o.SetUpdatedAtLte(updatedAtLte)
	return o
}

// SetUpdatedAtLte adds the updatedAtLte to the pull request projects list params
func (o *PullRequestProjectsListParams) SetUpdatedAtLte(updatedAtLte *string) {
	o.UpdatedAtLte = updatedAtLte
}

// WithURL adds the url to the pull request projects list params
func (o *PullRequestProjectsListParams) WithURL(url *string) *PullRequestProjectsListParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the pull request projects list params
func (o *PullRequestProjectsListParams) SetURL(url *string) {
	o.URL = url
}

// WithURLIcontains adds the uRLIcontains to the pull request projects list params
func (o *PullRequestProjectsListParams) WithURLIcontains(uRLIcontains *string) *PullRequestProjectsListParams {
	o.SetURLIcontains(uRLIcontains)
	return o
}

// SetURLIcontains adds the urlIcontains to the pull request projects list params
func (o *PullRequestProjectsListParams) SetURLIcontains(uRLIcontains *string) {
	o.URLIcontains = uRLIcontains
}

// WithURLStartswith adds the uRLStartswith to the pull request projects list params
func (o *PullRequestProjectsListParams) WithURLStartswith(uRLStartswith *string) *PullRequestProjectsListParams {
	o.SetURLStartswith(uRLStartswith)
	return o
}

// SetURLStartswith adds the urlStartswith to the pull request projects list params
func (o *PullRequestProjectsListParams) SetURLStartswith(uRLStartswith *string) {
	o.URLStartswith = uRLStartswith
}

// WithVendorType adds the vendorType to the pull request projects list params
func (o *PullRequestProjectsListParams) WithVendorType(vendorType *string) *PullRequestProjectsListParams {
	o.SetVendorType(vendorType)
	return o
}

// SetVendorType adds the vendorType to the pull request projects list params
func (o *PullRequestProjectsListParams) SetVendorType(vendorType *string) {
	o.VendorType = vendorType
}

// WriteToRequest writes these params to a swagger request
func (o *PullRequestProjectsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.IntegrationName != nil {

		// query param integration__name
		var qrIntegrationName string
		if o.IntegrationName != nil {
			qrIntegrationName = *o.IntegrationName
		}
		qIntegrationName := qrIntegrationName
		if qIntegrationName != "" {
			if err := r.SetQueryParam("integration__name", qIntegrationName); err != nil {
				return err
			}
		}

	}

	if o.IntegrationNameIcontains != nil {

		// query param integration__name__icontains
		var qrIntegrationNameIcontains string
		if o.IntegrationNameIcontains != nil {
			qrIntegrationNameIcontains = *o.IntegrationNameIcontains
		}
		qIntegrationNameIcontains := qrIntegrationNameIcontains
		if qIntegrationNameIcontains != "" {
			if err := r.SetQueryParam("integration__name__icontains", qIntegrationNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.IntegrationNameStartswith != nil {

		// query param integration__name__startswith
		var qrIntegrationNameStartswith string
		if o.IntegrationNameStartswith != nil {
			qrIntegrationNameStartswith = *o.IntegrationNameStartswith
		}
		qIntegrationNameStartswith := qrIntegrationNameStartswith
		if qIntegrationNameStartswith != "" {
			if err := r.SetQueryParam("integration__name__startswith", qIntegrationNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NameIcontains != nil {

		// query param name__icontains
		var qrNameIcontains string
		if o.NameIcontains != nil {
			qrNameIcontains = *o.NameIcontains
		}
		qNameIcontains := qrNameIcontains
		if qNameIcontains != "" {
			if err := r.SetQueryParam("name__icontains", qNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.NameStartswith != nil {

		// query param name__startswith
		var qrNameStartswith string
		if o.NameStartswith != nil {
			qrNameStartswith = *o.NameStartswith
		}
		qNameStartswith := qrNameStartswith
		if qNameStartswith != "" {
			if err := r.SetQueryParam("name__startswith", qNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Repo != nil {

		// query param repo
		var qrRepo string
		if o.Repo != nil {
			qrRepo = *o.Repo
		}
		qRepo := qrRepo
		if qRepo != "" {
			if err := r.SetQueryParam("repo", qRepo); err != nil {
				return err
			}
		}

	}

	if o.RepoID != nil {

		// query param repo_id
		var qrRepoID float64
		if o.RepoID != nil {
			qrRepoID = *o.RepoID
		}
		qRepoID := swag.FormatFloat64(qrRepoID)
		if qRepoID != "" {
			if err := r.SetQueryParam("repo_id", qRepoID); err != nil {
				return err
			}
		}

	}

	if o.RepoIDIn != nil {

		// query param repo_id__in
		var qrRepoIDIn string
		if o.RepoIDIn != nil {
			qrRepoIDIn = *o.RepoIDIn
		}
		qRepoIDIn := qrRepoIDIn
		if qRepoIDIn != "" {
			if err := r.SetQueryParam("repo_id__in", qRepoIDIn); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAt != nil {

		// query param updated_at
		var qrUpdatedAt string
		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {
			if err := r.SetQueryParam("updated_at", qUpdatedAt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtGt != nil {

		// query param updated_at__gt
		var qrUpdatedAtGt string
		if o.UpdatedAtGt != nil {
			qrUpdatedAtGt = *o.UpdatedAtGt
		}
		qUpdatedAtGt := qrUpdatedAtGt
		if qUpdatedAtGt != "" {
			if err := r.SetQueryParam("updated_at__gt", qUpdatedAtGt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtGte != nil {

		// query param updated_at__gte
		var qrUpdatedAtGte string
		if o.UpdatedAtGte != nil {
			qrUpdatedAtGte = *o.UpdatedAtGte
		}
		qUpdatedAtGte := qrUpdatedAtGte
		if qUpdatedAtGte != "" {
			if err := r.SetQueryParam("updated_at__gte", qUpdatedAtGte); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtLt != nil {

		// query param updated_at__lt
		var qrUpdatedAtLt string
		if o.UpdatedAtLt != nil {
			qrUpdatedAtLt = *o.UpdatedAtLt
		}
		qUpdatedAtLt := qrUpdatedAtLt
		if qUpdatedAtLt != "" {
			if err := r.SetQueryParam("updated_at__lt", qUpdatedAtLt); err != nil {
				return err
			}
		}

	}

	if o.UpdatedAtLte != nil {

		// query param updated_at__lte
		var qrUpdatedAtLte string
		if o.UpdatedAtLte != nil {
			qrUpdatedAtLte = *o.UpdatedAtLte
		}
		qUpdatedAtLte := qrUpdatedAtLte
		if qUpdatedAtLte != "" {
			if err := r.SetQueryParam("updated_at__lte", qUpdatedAtLte); err != nil {
				return err
			}
		}

	}

	if o.URL != nil {

		// query param url
		var qrURL string
		if o.URL != nil {
			qrURL = *o.URL
		}
		qURL := qrURL
		if qURL != "" {
			if err := r.SetQueryParam("url", qURL); err != nil {
				return err
			}
		}

	}

	if o.URLIcontains != nil {

		// query param url__icontains
		var qrURLIcontains string
		if o.URLIcontains != nil {
			qrURLIcontains = *o.URLIcontains
		}
		qURLIcontains := qrURLIcontains
		if qURLIcontains != "" {
			if err := r.SetQueryParam("url__icontains", qURLIcontains); err != nil {
				return err
			}
		}

	}

	if o.URLStartswith != nil {

		// query param url__startswith
		var qrURLStartswith string
		if o.URLStartswith != nil {
			qrURLStartswith = *o.URLStartswith
		}
		qURLStartswith := qrURLStartswith
		if qURLStartswith != "" {
			if err := r.SetQueryParam("url__startswith", qURLStartswith); err != nil {
				return err
			}
		}

	}

	if o.VendorType != nil {

		// query param vendor_type
		var qrVendorType string
		if o.VendorType != nil {
			qrVendorType = *o.VendorType
		}
		qVendorType := qrVendorType
		if qVendorType != "" {
			if err := r.SetQueryParam("vendor_type", qVendorType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
