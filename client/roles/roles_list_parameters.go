// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRolesListParams creates a new RolesListParams object
// with the default values initialized.
func NewRolesListParams() *RolesListParams {
	var ()
	return &RolesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRolesListParamsWithTimeout creates a new RolesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRolesListParamsWithTimeout(timeout time.Duration) *RolesListParams {
	var ()
	return &RolesListParams{

		timeout: timeout,
	}
}

// NewRolesListParamsWithContext creates a new RolesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewRolesListParamsWithContext(ctx context.Context) *RolesListParams {
	var ()
	return &RolesListParams{

		Context: ctx,
	}
}

// NewRolesListParamsWithHTTPClient creates a new RolesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRolesListParamsWithHTTPClient(client *http.Client) *RolesListParams {
	var ()
	return &RolesListParams{
		HTTPClient: client,
	}
}

/*RolesListParams contains all the parameters to send to the API endpoint
for the roles list operation typically these are written to a http.Request
*/
type RolesListParams struct {

	/*Depth*/
	Depth *string
	/*DepthIsnull*/
	DepthIsnull *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*Grant
	  Filter-traversable object

	*/
	Grant *string
	/*ID*/
	ID *float64
	/*Name*/
	Name *string
	/*NameIcontains*/
	NameIcontains *string
	/*NameStartswith*/
	NameStartswith *string
	/*Ordering
	  Valid ordering fields are: `id`, `name`

	*/
	Ordering *string
	/*Page
	  A page number within the paginated result set.

	*/
	Page *int64
	/*PageSize
	  Number of results to return per page.

	*/
	PageSize *int64
	/*Scope*/
	Scope *string
	/*ScopeIsnull*/
	ScopeIsnull *string
	/*Search
	  A search term.

	*/
	Search *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the roles list params
func (o *RolesListParams) WithTimeout(timeout time.Duration) *RolesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the roles list params
func (o *RolesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the roles list params
func (o *RolesListParams) WithContext(ctx context.Context) *RolesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the roles list params
func (o *RolesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the roles list params
func (o *RolesListParams) WithHTTPClient(client *http.Client) *RolesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the roles list params
func (o *RolesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDepth adds the depth to the roles list params
func (o *RolesListParams) WithDepth(depth *string) *RolesListParams {
	o.SetDepth(depth)
	return o
}

// SetDepth adds the depth to the roles list params
func (o *RolesListParams) SetDepth(depth *string) {
	o.Depth = depth
}

// WithDepthIsnull adds the depthIsnull to the roles list params
func (o *RolesListParams) WithDepthIsnull(depthIsnull *string) *RolesListParams {
	o.SetDepthIsnull(depthIsnull)
	return o
}

// SetDepthIsnull adds the depthIsnull to the roles list params
func (o *RolesListParams) SetDepthIsnull(depthIsnull *string) {
	o.DepthIsnull = depthIsnull
}

// WithFilters adds the filters to the roles list params
func (o *RolesListParams) WithFilters(filters *string) *RolesListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the roles list params
func (o *RolesListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithGrant adds the grant to the roles list params
func (o *RolesListParams) WithGrant(grant *string) *RolesListParams {
	o.SetGrant(grant)
	return o
}

// SetGrant adds the grant to the roles list params
func (o *RolesListParams) SetGrant(grant *string) {
	o.Grant = grant
}

// WithID adds the id to the roles list params
func (o *RolesListParams) WithID(id *float64) *RolesListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the roles list params
func (o *RolesListParams) SetID(id *float64) {
	o.ID = id
}

// WithName adds the name to the roles list params
func (o *RolesListParams) WithName(name *string) *RolesListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the roles list params
func (o *RolesListParams) SetName(name *string) {
	o.Name = name
}

// WithNameIcontains adds the nameIcontains to the roles list params
func (o *RolesListParams) WithNameIcontains(nameIcontains *string) *RolesListParams {
	o.SetNameIcontains(nameIcontains)
	return o
}

// SetNameIcontains adds the nameIcontains to the roles list params
func (o *RolesListParams) SetNameIcontains(nameIcontains *string) {
	o.NameIcontains = nameIcontains
}

// WithNameStartswith adds the nameStartswith to the roles list params
func (o *RolesListParams) WithNameStartswith(nameStartswith *string) *RolesListParams {
	o.SetNameStartswith(nameStartswith)
	return o
}

// SetNameStartswith adds the nameStartswith to the roles list params
func (o *RolesListParams) SetNameStartswith(nameStartswith *string) {
	o.NameStartswith = nameStartswith
}

// WithOrdering adds the ordering to the roles list params
func (o *RolesListParams) WithOrdering(ordering *string) *RolesListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the roles list params
func (o *RolesListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithPage adds the page to the roles list params
func (o *RolesListParams) WithPage(page *int64) *RolesListParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the roles list params
func (o *RolesListParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the roles list params
func (o *RolesListParams) WithPageSize(pageSize *int64) *RolesListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the roles list params
func (o *RolesListParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithScope adds the scope to the roles list params
func (o *RolesListParams) WithScope(scope *string) *RolesListParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the roles list params
func (o *RolesListParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithScopeIsnull adds the scopeIsnull to the roles list params
func (o *RolesListParams) WithScopeIsnull(scopeIsnull *string) *RolesListParams {
	o.SetScopeIsnull(scopeIsnull)
	return o
}

// SetScopeIsnull adds the scopeIsnull to the roles list params
func (o *RolesListParams) SetScopeIsnull(scopeIsnull *string) {
	o.ScopeIsnull = scopeIsnull
}

// WithSearch adds the search to the roles list params
func (o *RolesListParams) WithSearch(search *string) *RolesListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the roles list params
func (o *RolesListParams) SetSearch(search *string) {
	o.Search = search
}

// WriteToRequest writes these params to a swagger request
func (o *RolesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Depth != nil {

		// query param depth
		var qrDepth string
		if o.Depth != nil {
			qrDepth = *o.Depth
		}
		qDepth := qrDepth
		if qDepth != "" {
			if err := r.SetQueryParam("depth", qDepth); err != nil {
				return err
			}
		}

	}

	if o.DepthIsnull != nil {

		// query param depth__isnull
		var qrDepthIsnull string
		if o.DepthIsnull != nil {
			qrDepthIsnull = *o.DepthIsnull
		}
		qDepthIsnull := qrDepthIsnull
		if qDepthIsnull != "" {
			if err := r.SetQueryParam("depth__isnull", qDepthIsnull); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.Grant != nil {

		// query param grant
		var qrGrant string
		if o.Grant != nil {
			qrGrant = *o.Grant
		}
		qGrant := qrGrant
		if qGrant != "" {
			if err := r.SetQueryParam("grant", qGrant); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NameIcontains != nil {

		// query param name__icontains
		var qrNameIcontains string
		if o.NameIcontains != nil {
			qrNameIcontains = *o.NameIcontains
		}
		qNameIcontains := qrNameIcontains
		if qNameIcontains != "" {
			if err := r.SetQueryParam("name__icontains", qNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.NameStartswith != nil {

		// query param name__startswith
		var qrNameStartswith string
		if o.NameStartswith != nil {
			qrNameStartswith = *o.NameStartswith
		}
		qNameStartswith := qrNameStartswith
		if qNameStartswith != "" {
			if err := r.SetQueryParam("name__startswith", qNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if o.ScopeIsnull != nil {

		// query param scope__isnull
		var qrScopeIsnull string
		if o.ScopeIsnull != nil {
			qrScopeIsnull = *o.ScopeIsnull
		}
		qScopeIsnull := qrScopeIsnull
		if qScopeIsnull != "" {
			if err := r.SetQueryParam("scope__isnull", qScopeIsnull); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
