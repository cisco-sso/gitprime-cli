// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTeamsListParams creates a new TeamsListParams object
// with the default values initialized.
func NewTeamsListParams() *TeamsListParams {
	var ()
	return &TeamsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTeamsListParamsWithTimeout creates a new TeamsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTeamsListParamsWithTimeout(timeout time.Duration) *TeamsListParams {
	var ()
	return &TeamsListParams{

		timeout: timeout,
	}
}

// NewTeamsListParamsWithContext creates a new TeamsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewTeamsListParamsWithContext(ctx context.Context) *TeamsListParams {
	var ()
	return &TeamsListParams{

		Context: ctx,
	}
}

// NewTeamsListParamsWithHTTPClient creates a new TeamsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTeamsListParamsWithHTTPClient(client *http.Client) *TeamsListParams {
	var ()
	return &TeamsListParams{
		HTTPClient: client,
	}
}

/*TeamsListParams contains all the parameters to send to the API endpoint
for the teams list operation typically these are written to a http.Request
*/
type TeamsListParams struct {

	/*AncestorID
	  Get the team with the given id and return descendants too

	*/
	AncestorID *float64
	/*AncestorsofDescriptionIcontains
	  Match on case insensitive substring search in description and return ancestors too

	*/
	AncestorsofDescriptionIcontains *string
	/*AncestorsofDescriptionIsnull
	  Match on description being null and return ancestors too

	*/
	AncestorsofDescriptionIsnull *string
	/*AncestorsofIDIn
	  Match on a set of ids and return ancestors too

	*/
	AncestorsofIDIn *string
	/*AncestorsofName
	  Match on exact name and return ancestors too

	*/
	AncestorsofName *string
	/*AncestorsofNameIcontains
	  Match on case insensitive substring search in name and return ancestors too

	*/
	AncestorsofNameIcontains *string
	/*AncestorsofNameStartswith
	  Match on name that starts with substring in case sensitive way and return ancestors too

	*/
	AncestorsofNameStartswith *string
	/*AncestorsofNameDescriptionIcontains
	  Match on case insensitive substring search in name/description and return ancestors too

	*/
	AncestorsofNameDescriptionIcontains *string
	/*Depth*/
	Depth *string
	/*DepthIsnull*/
	DepthIsnull *string
	/*DescriptionIcontains*/
	DescriptionIcontains *string
	/*DescriptionIsnull*/
	DescriptionIsnull *string
	/*ExcludeDescendants
	  Exclude teams that are descendants of any other team in the result set

	*/
	ExcludeDescendants *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*IsVisible
	  Include or exclude visible teams

	*/
	IsVisible *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Name*/
	Name *string
	/*NameIcontains*/
	NameIcontains *string
	/*NameStartswith*/
	NameStartswith *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `name`, `team_level`, `all_users`

	*/
	Ordering *string
	/*Parent*/
	Parent *string
	/*ParentIsnull*/
	ParentIsnull *string
	/*ParentName*/
	ParentName *string
	/*ParentNameIcontains*/
	ParentNameIcontains *string
	/*ParentNameStartswith*/
	ParentNameStartswith *string
	/*Search
	  A search term.

	*/
	Search *string
	/*Vendor*/
	Vendor *string
	/*VendorIcontains*/
	VendorIcontains *string
	/*VendorStartswith*/
	VendorStartswith *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the teams list params
func (o *TeamsListParams) WithTimeout(timeout time.Duration) *TeamsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the teams list params
func (o *TeamsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the teams list params
func (o *TeamsListParams) WithContext(ctx context.Context) *TeamsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the teams list params
func (o *TeamsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the teams list params
func (o *TeamsListParams) WithHTTPClient(client *http.Client) *TeamsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the teams list params
func (o *TeamsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAncestorID adds the ancestorID to the teams list params
func (o *TeamsListParams) WithAncestorID(ancestorID *float64) *TeamsListParams {
	o.SetAncestorID(ancestorID)
	return o
}

// SetAncestorID adds the ancestorId to the teams list params
func (o *TeamsListParams) SetAncestorID(ancestorID *float64) {
	o.AncestorID = ancestorID
}

// WithAncestorsofDescriptionIcontains adds the ancestorsofDescriptionIcontains to the teams list params
func (o *TeamsListParams) WithAncestorsofDescriptionIcontains(ancestorsofDescriptionIcontains *string) *TeamsListParams {
	o.SetAncestorsofDescriptionIcontains(ancestorsofDescriptionIcontains)
	return o
}

// SetAncestorsofDescriptionIcontains adds the ancestorsofDescriptionIcontains to the teams list params
func (o *TeamsListParams) SetAncestorsofDescriptionIcontains(ancestorsofDescriptionIcontains *string) {
	o.AncestorsofDescriptionIcontains = ancestorsofDescriptionIcontains
}

// WithAncestorsofDescriptionIsnull adds the ancestorsofDescriptionIsnull to the teams list params
func (o *TeamsListParams) WithAncestorsofDescriptionIsnull(ancestorsofDescriptionIsnull *string) *TeamsListParams {
	o.SetAncestorsofDescriptionIsnull(ancestorsofDescriptionIsnull)
	return o
}

// SetAncestorsofDescriptionIsnull adds the ancestorsofDescriptionIsnull to the teams list params
func (o *TeamsListParams) SetAncestorsofDescriptionIsnull(ancestorsofDescriptionIsnull *string) {
	o.AncestorsofDescriptionIsnull = ancestorsofDescriptionIsnull
}

// WithAncestorsofIDIn adds the ancestorsofIDIn to the teams list params
func (o *TeamsListParams) WithAncestorsofIDIn(ancestorsofIDIn *string) *TeamsListParams {
	o.SetAncestorsofIDIn(ancestorsofIDIn)
	return o
}

// SetAncestorsofIDIn adds the ancestorsofIdIn to the teams list params
func (o *TeamsListParams) SetAncestorsofIDIn(ancestorsofIDIn *string) {
	o.AncestorsofIDIn = ancestorsofIDIn
}

// WithAncestorsofName adds the ancestorsofName to the teams list params
func (o *TeamsListParams) WithAncestorsofName(ancestorsofName *string) *TeamsListParams {
	o.SetAncestorsofName(ancestorsofName)
	return o
}

// SetAncestorsofName adds the ancestorsofName to the teams list params
func (o *TeamsListParams) SetAncestorsofName(ancestorsofName *string) {
	o.AncestorsofName = ancestorsofName
}

// WithAncestorsofNameIcontains adds the ancestorsofNameIcontains to the teams list params
func (o *TeamsListParams) WithAncestorsofNameIcontains(ancestorsofNameIcontains *string) *TeamsListParams {
	o.SetAncestorsofNameIcontains(ancestorsofNameIcontains)
	return o
}

// SetAncestorsofNameIcontains adds the ancestorsofNameIcontains to the teams list params
func (o *TeamsListParams) SetAncestorsofNameIcontains(ancestorsofNameIcontains *string) {
	o.AncestorsofNameIcontains = ancestorsofNameIcontains
}

// WithAncestorsofNameStartswith adds the ancestorsofNameStartswith to the teams list params
func (o *TeamsListParams) WithAncestorsofNameStartswith(ancestorsofNameStartswith *string) *TeamsListParams {
	o.SetAncestorsofNameStartswith(ancestorsofNameStartswith)
	return o
}

// SetAncestorsofNameStartswith adds the ancestorsofNameStartswith to the teams list params
func (o *TeamsListParams) SetAncestorsofNameStartswith(ancestorsofNameStartswith *string) {
	o.AncestorsofNameStartswith = ancestorsofNameStartswith
}

// WithAncestorsofNameDescriptionIcontains adds the ancestorsofNameDescriptionIcontains to the teams list params
func (o *TeamsListParams) WithAncestorsofNameDescriptionIcontains(ancestorsofNameDescriptionIcontains *string) *TeamsListParams {
	o.SetAncestorsofNameDescriptionIcontains(ancestorsofNameDescriptionIcontains)
	return o
}

// SetAncestorsofNameDescriptionIcontains adds the ancestorsofNameDescriptionIcontains to the teams list params
func (o *TeamsListParams) SetAncestorsofNameDescriptionIcontains(ancestorsofNameDescriptionIcontains *string) {
	o.AncestorsofNameDescriptionIcontains = ancestorsofNameDescriptionIcontains
}

// WithDepth adds the depth to the teams list params
func (o *TeamsListParams) WithDepth(depth *string) *TeamsListParams {
	o.SetDepth(depth)
	return o
}

// SetDepth adds the depth to the teams list params
func (o *TeamsListParams) SetDepth(depth *string) {
	o.Depth = depth
}

// WithDepthIsnull adds the depthIsnull to the teams list params
func (o *TeamsListParams) WithDepthIsnull(depthIsnull *string) *TeamsListParams {
	o.SetDepthIsnull(depthIsnull)
	return o
}

// SetDepthIsnull adds the depthIsnull to the teams list params
func (o *TeamsListParams) SetDepthIsnull(depthIsnull *string) {
	o.DepthIsnull = depthIsnull
}

// WithDescriptionIcontains adds the descriptionIcontains to the teams list params
func (o *TeamsListParams) WithDescriptionIcontains(descriptionIcontains *string) *TeamsListParams {
	o.SetDescriptionIcontains(descriptionIcontains)
	return o
}

// SetDescriptionIcontains adds the descriptionIcontains to the teams list params
func (o *TeamsListParams) SetDescriptionIcontains(descriptionIcontains *string) {
	o.DescriptionIcontains = descriptionIcontains
}

// WithDescriptionIsnull adds the descriptionIsnull to the teams list params
func (o *TeamsListParams) WithDescriptionIsnull(descriptionIsnull *string) *TeamsListParams {
	o.SetDescriptionIsnull(descriptionIsnull)
	return o
}

// SetDescriptionIsnull adds the descriptionIsnull to the teams list params
func (o *TeamsListParams) SetDescriptionIsnull(descriptionIsnull *string) {
	o.DescriptionIsnull = descriptionIsnull
}

// WithExcludeDescendants adds the excludeDescendants to the teams list params
func (o *TeamsListParams) WithExcludeDescendants(excludeDescendants *string) *TeamsListParams {
	o.SetExcludeDescendants(excludeDescendants)
	return o
}

// SetExcludeDescendants adds the excludeDescendants to the teams list params
func (o *TeamsListParams) SetExcludeDescendants(excludeDescendants *string) {
	o.ExcludeDescendants = excludeDescendants
}

// WithFilters adds the filters to the teams list params
func (o *TeamsListParams) WithFilters(filters *string) *TeamsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the teams list params
func (o *TeamsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the teams list params
func (o *TeamsListParams) WithID(id *float64) *TeamsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the teams list params
func (o *TeamsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the teams list params
func (o *TeamsListParams) WithIDIn(iDIn *float64) *TeamsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the teams list params
func (o *TeamsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithIsVisible adds the isVisible to the teams list params
func (o *TeamsListParams) WithIsVisible(isVisible *string) *TeamsListParams {
	o.SetIsVisible(isVisible)
	return o
}

// SetIsVisible adds the isVisible to the teams list params
func (o *TeamsListParams) SetIsVisible(isVisible *string) {
	o.IsVisible = isVisible
}

// WithLimit adds the limit to the teams list params
func (o *TeamsListParams) WithLimit(limit *int64) *TeamsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the teams list params
func (o *TeamsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the teams list params
func (o *TeamsListParams) WithName(name *string) *TeamsListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the teams list params
func (o *TeamsListParams) SetName(name *string) {
	o.Name = name
}

// WithNameIcontains adds the nameIcontains to the teams list params
func (o *TeamsListParams) WithNameIcontains(nameIcontains *string) *TeamsListParams {
	o.SetNameIcontains(nameIcontains)
	return o
}

// SetNameIcontains adds the nameIcontains to the teams list params
func (o *TeamsListParams) SetNameIcontains(nameIcontains *string) {
	o.NameIcontains = nameIcontains
}

// WithNameStartswith adds the nameStartswith to the teams list params
func (o *TeamsListParams) WithNameStartswith(nameStartswith *string) *TeamsListParams {
	o.SetNameStartswith(nameStartswith)
	return o
}

// SetNameStartswith adds the nameStartswith to the teams list params
func (o *TeamsListParams) SetNameStartswith(nameStartswith *string) {
	o.NameStartswith = nameStartswith
}

// WithOffset adds the offset to the teams list params
func (o *TeamsListParams) WithOffset(offset *int64) *TeamsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the teams list params
func (o *TeamsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the teams list params
func (o *TeamsListParams) WithOrdering(ordering *string) *TeamsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the teams list params
func (o *TeamsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithParent adds the parent to the teams list params
func (o *TeamsListParams) WithParent(parent *string) *TeamsListParams {
	o.SetParent(parent)
	return o
}

// SetParent adds the parent to the teams list params
func (o *TeamsListParams) SetParent(parent *string) {
	o.Parent = parent
}

// WithParentIsnull adds the parentIsnull to the teams list params
func (o *TeamsListParams) WithParentIsnull(parentIsnull *string) *TeamsListParams {
	o.SetParentIsnull(parentIsnull)
	return o
}

// SetParentIsnull adds the parentIsnull to the teams list params
func (o *TeamsListParams) SetParentIsnull(parentIsnull *string) {
	o.ParentIsnull = parentIsnull
}

// WithParentName adds the parentName to the teams list params
func (o *TeamsListParams) WithParentName(parentName *string) *TeamsListParams {
	o.SetParentName(parentName)
	return o
}

// SetParentName adds the parentName to the teams list params
func (o *TeamsListParams) SetParentName(parentName *string) {
	o.ParentName = parentName
}

// WithParentNameIcontains adds the parentNameIcontains to the teams list params
func (o *TeamsListParams) WithParentNameIcontains(parentNameIcontains *string) *TeamsListParams {
	o.SetParentNameIcontains(parentNameIcontains)
	return o
}

// SetParentNameIcontains adds the parentNameIcontains to the teams list params
func (o *TeamsListParams) SetParentNameIcontains(parentNameIcontains *string) {
	o.ParentNameIcontains = parentNameIcontains
}

// WithParentNameStartswith adds the parentNameStartswith to the teams list params
func (o *TeamsListParams) WithParentNameStartswith(parentNameStartswith *string) *TeamsListParams {
	o.SetParentNameStartswith(parentNameStartswith)
	return o
}

// SetParentNameStartswith adds the parentNameStartswith to the teams list params
func (o *TeamsListParams) SetParentNameStartswith(parentNameStartswith *string) {
	o.ParentNameStartswith = parentNameStartswith
}

// WithSearch adds the search to the teams list params
func (o *TeamsListParams) WithSearch(search *string) *TeamsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the teams list params
func (o *TeamsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithVendor adds the vendor to the teams list params
func (o *TeamsListParams) WithVendor(vendor *string) *TeamsListParams {
	o.SetVendor(vendor)
	return o
}

// SetVendor adds the vendor to the teams list params
func (o *TeamsListParams) SetVendor(vendor *string) {
	o.Vendor = vendor
}

// WithVendorIcontains adds the vendorIcontains to the teams list params
func (o *TeamsListParams) WithVendorIcontains(vendorIcontains *string) *TeamsListParams {
	o.SetVendorIcontains(vendorIcontains)
	return o
}

// SetVendorIcontains adds the vendorIcontains to the teams list params
func (o *TeamsListParams) SetVendorIcontains(vendorIcontains *string) {
	o.VendorIcontains = vendorIcontains
}

// WithVendorStartswith adds the vendorStartswith to the teams list params
func (o *TeamsListParams) WithVendorStartswith(vendorStartswith *string) *TeamsListParams {
	o.SetVendorStartswith(vendorStartswith)
	return o
}

// SetVendorStartswith adds the vendorStartswith to the teams list params
func (o *TeamsListParams) SetVendorStartswith(vendorStartswith *string) {
	o.VendorStartswith = vendorStartswith
}

// WriteToRequest writes these params to a swagger request
func (o *TeamsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AncestorID != nil {

		// query param ancestor_id
		var qrAncestorID float64
		if o.AncestorID != nil {
			qrAncestorID = *o.AncestorID
		}
		qAncestorID := swag.FormatFloat64(qrAncestorID)
		if qAncestorID != "" {
			if err := r.SetQueryParam("ancestor_id", qAncestorID); err != nil {
				return err
			}
		}

	}

	if o.AncestorsofDescriptionIcontains != nil {

		// query param ancestorsof_description__icontains
		var qrAncestorsofDescriptionIcontains string
		if o.AncestorsofDescriptionIcontains != nil {
			qrAncestorsofDescriptionIcontains = *o.AncestorsofDescriptionIcontains
		}
		qAncestorsofDescriptionIcontains := qrAncestorsofDescriptionIcontains
		if qAncestorsofDescriptionIcontains != "" {
			if err := r.SetQueryParam("ancestorsof_description__icontains", qAncestorsofDescriptionIcontains); err != nil {
				return err
			}
		}

	}

	if o.AncestorsofDescriptionIsnull != nil {

		// query param ancestorsof_description__isnull
		var qrAncestorsofDescriptionIsnull string
		if o.AncestorsofDescriptionIsnull != nil {
			qrAncestorsofDescriptionIsnull = *o.AncestorsofDescriptionIsnull
		}
		qAncestorsofDescriptionIsnull := qrAncestorsofDescriptionIsnull
		if qAncestorsofDescriptionIsnull != "" {
			if err := r.SetQueryParam("ancestorsof_description__isnull", qAncestorsofDescriptionIsnull); err != nil {
				return err
			}
		}

	}

	if o.AncestorsofIDIn != nil {

		// query param ancestorsof_id__in
		var qrAncestorsofIDIn string
		if o.AncestorsofIDIn != nil {
			qrAncestorsofIDIn = *o.AncestorsofIDIn
		}
		qAncestorsofIDIn := qrAncestorsofIDIn
		if qAncestorsofIDIn != "" {
			if err := r.SetQueryParam("ancestorsof_id__in", qAncestorsofIDIn); err != nil {
				return err
			}
		}

	}

	if o.AncestorsofName != nil {

		// query param ancestorsof_name
		var qrAncestorsofName string
		if o.AncestorsofName != nil {
			qrAncestorsofName = *o.AncestorsofName
		}
		qAncestorsofName := qrAncestorsofName
		if qAncestorsofName != "" {
			if err := r.SetQueryParam("ancestorsof_name", qAncestorsofName); err != nil {
				return err
			}
		}

	}

	if o.AncestorsofNameIcontains != nil {

		// query param ancestorsof_name__icontains
		var qrAncestorsofNameIcontains string
		if o.AncestorsofNameIcontains != nil {
			qrAncestorsofNameIcontains = *o.AncestorsofNameIcontains
		}
		qAncestorsofNameIcontains := qrAncestorsofNameIcontains
		if qAncestorsofNameIcontains != "" {
			if err := r.SetQueryParam("ancestorsof_name__icontains", qAncestorsofNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.AncestorsofNameStartswith != nil {

		// query param ancestorsof_name__startswith
		var qrAncestorsofNameStartswith string
		if o.AncestorsofNameStartswith != nil {
			qrAncestorsofNameStartswith = *o.AncestorsofNameStartswith
		}
		qAncestorsofNameStartswith := qrAncestorsofNameStartswith
		if qAncestorsofNameStartswith != "" {
			if err := r.SetQueryParam("ancestorsof_name__startswith", qAncestorsofNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.AncestorsofNameDescriptionIcontains != nil {

		// query param ancestorsof_name_description__icontains
		var qrAncestorsofNameDescriptionIcontains string
		if o.AncestorsofNameDescriptionIcontains != nil {
			qrAncestorsofNameDescriptionIcontains = *o.AncestorsofNameDescriptionIcontains
		}
		qAncestorsofNameDescriptionIcontains := qrAncestorsofNameDescriptionIcontains
		if qAncestorsofNameDescriptionIcontains != "" {
			if err := r.SetQueryParam("ancestorsof_name_description__icontains", qAncestorsofNameDescriptionIcontains); err != nil {
				return err
			}
		}

	}

	if o.Depth != nil {

		// query param depth
		var qrDepth string
		if o.Depth != nil {
			qrDepth = *o.Depth
		}
		qDepth := qrDepth
		if qDepth != "" {
			if err := r.SetQueryParam("depth", qDepth); err != nil {
				return err
			}
		}

	}

	if o.DepthIsnull != nil {

		// query param depth__isnull
		var qrDepthIsnull string
		if o.DepthIsnull != nil {
			qrDepthIsnull = *o.DepthIsnull
		}
		qDepthIsnull := qrDepthIsnull
		if qDepthIsnull != "" {
			if err := r.SetQueryParam("depth__isnull", qDepthIsnull); err != nil {
				return err
			}
		}

	}

	if o.DescriptionIcontains != nil {

		// query param description__icontains
		var qrDescriptionIcontains string
		if o.DescriptionIcontains != nil {
			qrDescriptionIcontains = *o.DescriptionIcontains
		}
		qDescriptionIcontains := qrDescriptionIcontains
		if qDescriptionIcontains != "" {
			if err := r.SetQueryParam("description__icontains", qDescriptionIcontains); err != nil {
				return err
			}
		}

	}

	if o.DescriptionIsnull != nil {

		// query param description__isnull
		var qrDescriptionIsnull string
		if o.DescriptionIsnull != nil {
			qrDescriptionIsnull = *o.DescriptionIsnull
		}
		qDescriptionIsnull := qrDescriptionIsnull
		if qDescriptionIsnull != "" {
			if err := r.SetQueryParam("description__isnull", qDescriptionIsnull); err != nil {
				return err
			}
		}

	}

	if o.ExcludeDescendants != nil {

		// query param exclude_descendants
		var qrExcludeDescendants string
		if o.ExcludeDescendants != nil {
			qrExcludeDescendants = *o.ExcludeDescendants
		}
		qExcludeDescendants := qrExcludeDescendants
		if qExcludeDescendants != "" {
			if err := r.SetQueryParam("exclude_descendants", qExcludeDescendants); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.IsVisible != nil {

		// query param is_visible
		var qrIsVisible string
		if o.IsVisible != nil {
			qrIsVisible = *o.IsVisible
		}
		qIsVisible := qrIsVisible
		if qIsVisible != "" {
			if err := r.SetQueryParam("is_visible", qIsVisible); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NameIcontains != nil {

		// query param name__icontains
		var qrNameIcontains string
		if o.NameIcontains != nil {
			qrNameIcontains = *o.NameIcontains
		}
		qNameIcontains := qrNameIcontains
		if qNameIcontains != "" {
			if err := r.SetQueryParam("name__icontains", qNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.NameStartswith != nil {

		// query param name__startswith
		var qrNameStartswith string
		if o.NameStartswith != nil {
			qrNameStartswith = *o.NameStartswith
		}
		qNameStartswith := qrNameStartswith
		if qNameStartswith != "" {
			if err := r.SetQueryParam("name__startswith", qNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Parent != nil {

		// query param parent
		var qrParent string
		if o.Parent != nil {
			qrParent = *o.Parent
		}
		qParent := qrParent
		if qParent != "" {
			if err := r.SetQueryParam("parent", qParent); err != nil {
				return err
			}
		}

	}

	if o.ParentIsnull != nil {

		// query param parent__isnull
		var qrParentIsnull string
		if o.ParentIsnull != nil {
			qrParentIsnull = *o.ParentIsnull
		}
		qParentIsnull := qrParentIsnull
		if qParentIsnull != "" {
			if err := r.SetQueryParam("parent__isnull", qParentIsnull); err != nil {
				return err
			}
		}

	}

	if o.ParentName != nil {

		// query param parent__name
		var qrParentName string
		if o.ParentName != nil {
			qrParentName = *o.ParentName
		}
		qParentName := qrParentName
		if qParentName != "" {
			if err := r.SetQueryParam("parent__name", qParentName); err != nil {
				return err
			}
		}

	}

	if o.ParentNameIcontains != nil {

		// query param parent__name__icontains
		var qrParentNameIcontains string
		if o.ParentNameIcontains != nil {
			qrParentNameIcontains = *o.ParentNameIcontains
		}
		qParentNameIcontains := qrParentNameIcontains
		if qParentNameIcontains != "" {
			if err := r.SetQueryParam("parent__name__icontains", qParentNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.ParentNameStartswith != nil {

		// query param parent__name__startswith
		var qrParentNameStartswith string
		if o.ParentNameStartswith != nil {
			qrParentNameStartswith = *o.ParentNameStartswith
		}
		qParentNameStartswith := qrParentNameStartswith
		if qParentNameStartswith != "" {
			if err := r.SetQueryParam("parent__name__startswith", qParentNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.Vendor != nil {

		// query param vendor
		var qrVendor string
		if o.Vendor != nil {
			qrVendor = *o.Vendor
		}
		qVendor := qrVendor
		if qVendor != "" {
			if err := r.SetQueryParam("vendor", qVendor); err != nil {
				return err
			}
		}

	}

	if o.VendorIcontains != nil {

		// query param vendor__icontains
		var qrVendorIcontains string
		if o.VendorIcontains != nil {
			qrVendorIcontains = *o.VendorIcontains
		}
		qVendorIcontains := qrVendorIcontains
		if qVendorIcontains != "" {
			if err := r.SetQueryParam("vendor__icontains", qVendorIcontains); err != nil {
				return err
			}
		}

	}

	if o.VendorStartswith != nil {

		// query param vendor__startswith
		var qrVendorStartswith string
		if o.VendorStartswith != nil {
			qrVendorStartswith = *o.VendorStartswith
		}
		qVendorStartswith := qrVendorStartswith
		if qVendorStartswith != "" {
			if err := r.SetQueryParam("vendor__startswith", qVendorStartswith); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
