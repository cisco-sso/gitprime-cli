// Code generated by go-swagger; DO NOT EDIT.

package ticket_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTicketEventsListParams creates a new TicketEventsListParams object
// with the default values initialized.
func NewTicketEventsListParams() *TicketEventsListParams {
	var ()
	return &TicketEventsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTicketEventsListParamsWithTimeout creates a new TicketEventsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTicketEventsListParamsWithTimeout(timeout time.Duration) *TicketEventsListParams {
	var ()
	return &TicketEventsListParams{

		timeout: timeout,
	}
}

// NewTicketEventsListParamsWithContext creates a new TicketEventsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewTicketEventsListParamsWithContext(ctx context.Context) *TicketEventsListParams {
	var ()
	return &TicketEventsListParams{

		Context: ctx,
	}
}

// NewTicketEventsListParamsWithHTTPClient creates a new TicketEventsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTicketEventsListParamsWithHTTPClient(client *http.Client) *TicketEventsListParams {
	var ()
	return &TicketEventsListParams{
		HTTPClient: client,
	}
}

/*TicketEventsListParams contains all the parameters to send to the API endpoint
for the ticket events list operation typically these are written to a http.Request
*/
type TicketEventsListParams struct {

	/*CreatedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAt *string
	/*CreatedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGt *string
	/*CreatedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGte *string
	/*CreatedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLt *string
	/*CreatedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLte *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `user_alias_id`, `to_state`, `vendor`

	*/
	Ordering *string
	/*Search
	  A search term.

	*/
	Search *string
	/*TicketID
	  ID of associated ticket

	*/
	TicketID *float64
	/*ToState*/
	ToState *string
	/*ToStateIn
	  Mulitple values may be separated by commas.

	*/
	ToStateIn *string
	/*UserAlias2ID*/
	UserAlias2ID *string
	/*UserAlias2IDIn
	  Multiple values may be separated by commas.

	*/
	UserAlias2IDIn *string
	/*UserAliasID*/
	UserAliasID *string
	/*UserAliasIDIn
	  Multiple values may be separated by commas.

	*/
	UserAliasIDIn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ticket events list params
func (o *TicketEventsListParams) WithTimeout(timeout time.Duration) *TicketEventsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ticket events list params
func (o *TicketEventsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ticket events list params
func (o *TicketEventsListParams) WithContext(ctx context.Context) *TicketEventsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ticket events list params
func (o *TicketEventsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ticket events list params
func (o *TicketEventsListParams) WithHTTPClient(client *http.Client) *TicketEventsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ticket events list params
func (o *TicketEventsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAt adds the createdAt to the ticket events list params
func (o *TicketEventsListParams) WithCreatedAt(createdAt *string) *TicketEventsListParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the ticket events list params
func (o *TicketEventsListParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedAtGt adds the createdAtGt to the ticket events list params
func (o *TicketEventsListParams) WithCreatedAtGt(createdAtGt *string) *TicketEventsListParams {
	o.SetCreatedAtGt(createdAtGt)
	return o
}

// SetCreatedAtGt adds the createdAtGt to the ticket events list params
func (o *TicketEventsListParams) SetCreatedAtGt(createdAtGt *string) {
	o.CreatedAtGt = createdAtGt
}

// WithCreatedAtGte adds the createdAtGte to the ticket events list params
func (o *TicketEventsListParams) WithCreatedAtGte(createdAtGte *string) *TicketEventsListParams {
	o.SetCreatedAtGte(createdAtGte)
	return o
}

// SetCreatedAtGte adds the createdAtGte to the ticket events list params
func (o *TicketEventsListParams) SetCreatedAtGte(createdAtGte *string) {
	o.CreatedAtGte = createdAtGte
}

// WithCreatedAtLt adds the createdAtLt to the ticket events list params
func (o *TicketEventsListParams) WithCreatedAtLt(createdAtLt *string) *TicketEventsListParams {
	o.SetCreatedAtLt(createdAtLt)
	return o
}

// SetCreatedAtLt adds the createdAtLt to the ticket events list params
func (o *TicketEventsListParams) SetCreatedAtLt(createdAtLt *string) {
	o.CreatedAtLt = createdAtLt
}

// WithCreatedAtLte adds the createdAtLte to the ticket events list params
func (o *TicketEventsListParams) WithCreatedAtLte(createdAtLte *string) *TicketEventsListParams {
	o.SetCreatedAtLte(createdAtLte)
	return o
}

// SetCreatedAtLte adds the createdAtLte to the ticket events list params
func (o *TicketEventsListParams) SetCreatedAtLte(createdAtLte *string) {
	o.CreatedAtLte = createdAtLte
}

// WithFilters adds the filters to the ticket events list params
func (o *TicketEventsListParams) WithFilters(filters *string) *TicketEventsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the ticket events list params
func (o *TicketEventsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the ticket events list params
func (o *TicketEventsListParams) WithID(id *float64) *TicketEventsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the ticket events list params
func (o *TicketEventsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the ticket events list params
func (o *TicketEventsListParams) WithIDIn(iDIn *float64) *TicketEventsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the ticket events list params
func (o *TicketEventsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithLimit adds the limit to the ticket events list params
func (o *TicketEventsListParams) WithLimit(limit *int64) *TicketEventsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the ticket events list params
func (o *TicketEventsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the ticket events list params
func (o *TicketEventsListParams) WithOffset(offset *int64) *TicketEventsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the ticket events list params
func (o *TicketEventsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the ticket events list params
func (o *TicketEventsListParams) WithOrdering(ordering *string) *TicketEventsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the ticket events list params
func (o *TicketEventsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithSearch adds the search to the ticket events list params
func (o *TicketEventsListParams) WithSearch(search *string) *TicketEventsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the ticket events list params
func (o *TicketEventsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithTicketID adds the ticketID to the ticket events list params
func (o *TicketEventsListParams) WithTicketID(ticketID *float64) *TicketEventsListParams {
	o.SetTicketID(ticketID)
	return o
}

// SetTicketID adds the ticketId to the ticket events list params
func (o *TicketEventsListParams) SetTicketID(ticketID *float64) {
	o.TicketID = ticketID
}

// WithToState adds the toState to the ticket events list params
func (o *TicketEventsListParams) WithToState(toState *string) *TicketEventsListParams {
	o.SetToState(toState)
	return o
}

// SetToState adds the toState to the ticket events list params
func (o *TicketEventsListParams) SetToState(toState *string) {
	o.ToState = toState
}

// WithToStateIn adds the toStateIn to the ticket events list params
func (o *TicketEventsListParams) WithToStateIn(toStateIn *string) *TicketEventsListParams {
	o.SetToStateIn(toStateIn)
	return o
}

// SetToStateIn adds the toStateIn to the ticket events list params
func (o *TicketEventsListParams) SetToStateIn(toStateIn *string) {
	o.ToStateIn = toStateIn
}

// WithUserAlias2ID adds the userAlias2ID to the ticket events list params
func (o *TicketEventsListParams) WithUserAlias2ID(userAlias2ID *string) *TicketEventsListParams {
	o.SetUserAlias2ID(userAlias2ID)
	return o
}

// SetUserAlias2ID adds the userAlias2Id to the ticket events list params
func (o *TicketEventsListParams) SetUserAlias2ID(userAlias2ID *string) {
	o.UserAlias2ID = userAlias2ID
}

// WithUserAlias2IDIn adds the userAlias2IDIn to the ticket events list params
func (o *TicketEventsListParams) WithUserAlias2IDIn(userAlias2IDIn *string) *TicketEventsListParams {
	o.SetUserAlias2IDIn(userAlias2IDIn)
	return o
}

// SetUserAlias2IDIn adds the userAlias2IdIn to the ticket events list params
func (o *TicketEventsListParams) SetUserAlias2IDIn(userAlias2IDIn *string) {
	o.UserAlias2IDIn = userAlias2IDIn
}

// WithUserAliasID adds the userAliasID to the ticket events list params
func (o *TicketEventsListParams) WithUserAliasID(userAliasID *string) *TicketEventsListParams {
	o.SetUserAliasID(userAliasID)
	return o
}

// SetUserAliasID adds the userAliasId to the ticket events list params
func (o *TicketEventsListParams) SetUserAliasID(userAliasID *string) {
	o.UserAliasID = userAliasID
}

// WithUserAliasIDIn adds the userAliasIDIn to the ticket events list params
func (o *TicketEventsListParams) WithUserAliasIDIn(userAliasIDIn *string) *TicketEventsListParams {
	o.SetUserAliasIDIn(userAliasIDIn)
	return o
}

// SetUserAliasIDIn adds the userAliasIdIn to the ticket events list params
func (o *TicketEventsListParams) SetUserAliasIDIn(userAliasIDIn *string) {
	o.UserAliasIDIn = userAliasIDIn
}

// WriteToRequest writes these params to a swagger request
func (o *TicketEventsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string
		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {
			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGt != nil {

		// query param created_at__gt
		var qrCreatedAtGt string
		if o.CreatedAtGt != nil {
			qrCreatedAtGt = *o.CreatedAtGt
		}
		qCreatedAtGt := qrCreatedAtGt
		if qCreatedAtGt != "" {
			if err := r.SetQueryParam("created_at__gt", qCreatedAtGt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGte != nil {

		// query param created_at__gte
		var qrCreatedAtGte string
		if o.CreatedAtGte != nil {
			qrCreatedAtGte = *o.CreatedAtGte
		}
		qCreatedAtGte := qrCreatedAtGte
		if qCreatedAtGte != "" {
			if err := r.SetQueryParam("created_at__gte", qCreatedAtGte); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLt != nil {

		// query param created_at__lt
		var qrCreatedAtLt string
		if o.CreatedAtLt != nil {
			qrCreatedAtLt = *o.CreatedAtLt
		}
		qCreatedAtLt := qrCreatedAtLt
		if qCreatedAtLt != "" {
			if err := r.SetQueryParam("created_at__lt", qCreatedAtLt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLte != nil {

		// query param created_at__lte
		var qrCreatedAtLte string
		if o.CreatedAtLte != nil {
			qrCreatedAtLte = *o.CreatedAtLte
		}
		qCreatedAtLte := qrCreatedAtLte
		if qCreatedAtLte != "" {
			if err := r.SetQueryParam("created_at__lte", qCreatedAtLte); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.TicketID != nil {

		// query param ticket_id
		var qrTicketID float64
		if o.TicketID != nil {
			qrTicketID = *o.TicketID
		}
		qTicketID := swag.FormatFloat64(qrTicketID)
		if qTicketID != "" {
			if err := r.SetQueryParam("ticket_id", qTicketID); err != nil {
				return err
			}
		}

	}

	if o.ToState != nil {

		// query param to_state
		var qrToState string
		if o.ToState != nil {
			qrToState = *o.ToState
		}
		qToState := qrToState
		if qToState != "" {
			if err := r.SetQueryParam("to_state", qToState); err != nil {
				return err
			}
		}

	}

	if o.ToStateIn != nil {

		// query param to_state__in
		var qrToStateIn string
		if o.ToStateIn != nil {
			qrToStateIn = *o.ToStateIn
		}
		qToStateIn := qrToStateIn
		if qToStateIn != "" {
			if err := r.SetQueryParam("to_state__in", qToStateIn); err != nil {
				return err
			}
		}

	}

	if o.UserAlias2ID != nil {

		// query param user_alias2_id
		var qrUserAlias2ID string
		if o.UserAlias2ID != nil {
			qrUserAlias2ID = *o.UserAlias2ID
		}
		qUserAlias2ID := qrUserAlias2ID
		if qUserAlias2ID != "" {
			if err := r.SetQueryParam("user_alias2_id", qUserAlias2ID); err != nil {
				return err
			}
		}

	}

	if o.UserAlias2IDIn != nil {

		// query param user_alias2_id__in
		var qrUserAlias2IDIn string
		if o.UserAlias2IDIn != nil {
			qrUserAlias2IDIn = *o.UserAlias2IDIn
		}
		qUserAlias2IDIn := qrUserAlias2IDIn
		if qUserAlias2IDIn != "" {
			if err := r.SetQueryParam("user_alias2_id__in", qUserAlias2IDIn); err != nil {
				return err
			}
		}

	}

	if o.UserAliasID != nil {

		// query param user_alias_id
		var qrUserAliasID string
		if o.UserAliasID != nil {
			qrUserAliasID = *o.UserAliasID
		}
		qUserAliasID := qrUserAliasID
		if qUserAliasID != "" {
			if err := r.SetQueryParam("user_alias_id", qUserAliasID); err != nil {
				return err
			}
		}

	}

	if o.UserAliasIDIn != nil {

		// query param user_alias_id__in
		var qrUserAliasIDIn string
		if o.UserAliasIDIn != nil {
			qrUserAliasIDIn = *o.UserAliasIDIn
		}
		qUserAliasIDIn := qrUserAliasIDIn
		if qUserAliasIDIn != "" {
			if err := r.SetQueryParam("user_alias_id__in", qUserAliasIDIn); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
