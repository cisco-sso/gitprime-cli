// Code generated by go-swagger; DO NOT EDIT.

package team_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new team membership API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for team membership API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TeamMembershipCreate(params *TeamMembershipCreateParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipCreateCreated, error)

	TeamMembershipDelete(params *TeamMembershipDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipDeleteNoContent, error)

	TeamMembershipList(params *TeamMembershipListParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipListOK, error)

	TeamMembershipRead(params *TeamMembershipReadParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipReadOK, error)

	TeamMembershipUpdate(params *TeamMembershipUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TeamMembershipCreate creates a new team membership

  Create a new TeamMembership

A TeamMembership represents the relationship between a Team and an ApexUser. Here is an example:

{ "membership_type": "contributor", "team_id": 1234, "depth": "atomic", "apex_user_id": 1234 }

Acceptable options for membership_type are:
 * contributor
 * viewer

Acceptable options for depth are:
 * atomic
 * aggregate
 * inherit
*/
func (a *Client) TeamMembershipCreate(params *TeamMembershipCreateParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamMembershipCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "team_membership_create",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/team_membership/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TeamMembershipCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TeamMembershipCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for team_membership_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TeamMembershipDelete removes an apex user from a team using this method

  Remove an ApexUser from a Team using this method.

You must know the primary key of the TeamMembership object itself. If you only know the Team ID and the
ApexUser ID, you must first use a GET query to find the appropriate ID to delete.
*/
func (a *Client) TeamMembershipDelete(params *TeamMembershipDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamMembershipDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "team_membership_delete",
		Method:             "DELETE",
		PathPattern:        "/v3/customer/core/team_membership/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TeamMembershipDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TeamMembershipDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for team_membership_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TeamMembershipList lists team membership entities

  List TeamMembership entities

--- Team Membership ---

Team Membership is what defines a relationship between authors and teams as well as the nature of that relationship.

--- General ---

All objects can be traversed to related objects. This can be achieved by using the double-underscore syntax.
For instance, query all Author records with a specific Team name like so:

"?team\_\_name=Bobs%20Team".

You can easily traverse multiple levels of relationships by connecting related objects. For example:

"?foo\_\_bar\_\_baz\_\_name=Bob"

All available relationships are defined in the filter documentation with the note "filter-traversable object."
Additionally, you can limit the properties returned in an object by using the `fields` or `omit`
keywords as follows:

"?fields=foo,bar,bad" will return only these fields

or

"?omit=foo,bar,baz" will return all but the specified fields
*/
func (a *Client) TeamMembershipList(params *TeamMembershipListParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamMembershipListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "team_membership_list",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/team_membership/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TeamMembershipListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TeamMembershipListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for team_membership_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TeamMembershipRead gets a specific team membership entity by id value

  Get a specific TeamMembership entity by id value
*/
func (a *Client) TeamMembershipRead(params *TeamMembershipReadParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamMembershipReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "team_membership_read",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/team_membership/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TeamMembershipReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TeamMembershipReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for team_membership_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TeamMembershipUpdate updates a specific team membership by id value

  Update a specific TeamMembership by id value

A TeamMembership represents the relationship between a Team and an ApexUser. Here is an example:

{ "membership_type": "contributor", "team_id": 1234, "depth": "atomic", "apex_user_id": 1234 }

However, every TeamMembership is assigned a primary key ID. You must use this ID to update a TeamMembership.
If you have an ApexUser ID and a Team ID, you must first use a GET query to find the appropriate ID to update.

Acceptable options for membership_type are:
 * contributor
 * viewer

Acceptable options for depth are:
 * atomic
 * aggregate
 * inherit
*/
func (a *Client) TeamMembershipUpdate(params *TeamMembershipUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*TeamMembershipUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamMembershipUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "team_membership_update",
		Method:             "PUT",
		PathPattern:        "/v3/customer/core/team_membership/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TeamMembershipUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TeamMembershipUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for team_membership_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
