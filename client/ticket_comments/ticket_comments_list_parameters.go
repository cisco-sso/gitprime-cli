// Code generated by go-swagger; DO NOT EDIT.

package ticket_comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTicketCommentsListParams creates a new TicketCommentsListParams object
// with the default values initialized.
func NewTicketCommentsListParams() *TicketCommentsListParams {
	var ()
	return &TicketCommentsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTicketCommentsListParamsWithTimeout creates a new TicketCommentsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTicketCommentsListParamsWithTimeout(timeout time.Duration) *TicketCommentsListParams {
	var ()
	return &TicketCommentsListParams{

		timeout: timeout,
	}
}

// NewTicketCommentsListParamsWithContext creates a new TicketCommentsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewTicketCommentsListParamsWithContext(ctx context.Context) *TicketCommentsListParams {
	var ()
	return &TicketCommentsListParams{

		Context: ctx,
	}
}

// NewTicketCommentsListParamsWithHTTPClient creates a new TicketCommentsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTicketCommentsListParamsWithHTTPClient(client *http.Client) *TicketCommentsListParams {
	var ()
	return &TicketCommentsListParams{
		HTTPClient: client,
	}
}

/*TicketCommentsListParams contains all the parameters to send to the API endpoint
for the ticket comments list operation typically these are written to a http.Request
*/
type TicketCommentsListParams struct {

	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `user_alias_id`, `created_at`

	*/
	Ordering *string
	/*Search
	  A search term.

	*/
	Search *string
	/*TicketID
	  ID of associated ticket

	*/
	TicketID *float64
	/*UserAliasID*/
	UserAliasID *string
	/*UserAliasIDIn
	  Multiple values may be separated by commas.

	*/
	UserAliasIDIn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the ticket comments list params
func (o *TicketCommentsListParams) WithTimeout(timeout time.Duration) *TicketCommentsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the ticket comments list params
func (o *TicketCommentsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the ticket comments list params
func (o *TicketCommentsListParams) WithContext(ctx context.Context) *TicketCommentsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the ticket comments list params
func (o *TicketCommentsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the ticket comments list params
func (o *TicketCommentsListParams) WithHTTPClient(client *http.Client) *TicketCommentsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the ticket comments list params
func (o *TicketCommentsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilters adds the filters to the ticket comments list params
func (o *TicketCommentsListParams) WithFilters(filters *string) *TicketCommentsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the ticket comments list params
func (o *TicketCommentsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the ticket comments list params
func (o *TicketCommentsListParams) WithID(id *float64) *TicketCommentsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the ticket comments list params
func (o *TicketCommentsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the ticket comments list params
func (o *TicketCommentsListParams) WithIDIn(iDIn *float64) *TicketCommentsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the ticket comments list params
func (o *TicketCommentsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithLimit adds the limit to the ticket comments list params
func (o *TicketCommentsListParams) WithLimit(limit *int64) *TicketCommentsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the ticket comments list params
func (o *TicketCommentsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the ticket comments list params
func (o *TicketCommentsListParams) WithOffset(offset *int64) *TicketCommentsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the ticket comments list params
func (o *TicketCommentsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the ticket comments list params
func (o *TicketCommentsListParams) WithOrdering(ordering *string) *TicketCommentsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the ticket comments list params
func (o *TicketCommentsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithSearch adds the search to the ticket comments list params
func (o *TicketCommentsListParams) WithSearch(search *string) *TicketCommentsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the ticket comments list params
func (o *TicketCommentsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithTicketID adds the ticketID to the ticket comments list params
func (o *TicketCommentsListParams) WithTicketID(ticketID *float64) *TicketCommentsListParams {
	o.SetTicketID(ticketID)
	return o
}

// SetTicketID adds the ticketId to the ticket comments list params
func (o *TicketCommentsListParams) SetTicketID(ticketID *float64) {
	o.TicketID = ticketID
}

// WithUserAliasID adds the userAliasID to the ticket comments list params
func (o *TicketCommentsListParams) WithUserAliasID(userAliasID *string) *TicketCommentsListParams {
	o.SetUserAliasID(userAliasID)
	return o
}

// SetUserAliasID adds the userAliasId to the ticket comments list params
func (o *TicketCommentsListParams) SetUserAliasID(userAliasID *string) {
	o.UserAliasID = userAliasID
}

// WithUserAliasIDIn adds the userAliasIDIn to the ticket comments list params
func (o *TicketCommentsListParams) WithUserAliasIDIn(userAliasIDIn *string) *TicketCommentsListParams {
	o.SetUserAliasIDIn(userAliasIDIn)
	return o
}

// SetUserAliasIDIn adds the userAliasIdIn to the ticket comments list params
func (o *TicketCommentsListParams) SetUserAliasIDIn(userAliasIDIn *string) {
	o.UserAliasIDIn = userAliasIDIn
}

// WriteToRequest writes these params to a swagger request
func (o *TicketCommentsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.TicketID != nil {

		// query param ticket_id
		var qrTicketID float64
		if o.TicketID != nil {
			qrTicketID = *o.TicketID
		}
		qTicketID := swag.FormatFloat64(qrTicketID)
		if qTicketID != "" {
			if err := r.SetQueryParam("ticket_id", qTicketID); err != nil {
				return err
			}
		}

	}

	if o.UserAliasID != nil {

		// query param user_alias_id
		var qrUserAliasID string
		if o.UserAliasID != nil {
			qrUserAliasID = *o.UserAliasID
		}
		qUserAliasID := qrUserAliasID
		if qUserAliasID != "" {
			if err := r.SetQueryParam("user_alias_id", qUserAliasID); err != nil {
				return err
			}
		}

	}

	if o.UserAliasIDIn != nil {

		// query param user_alias_id__in
		var qrUserAliasIDIn string
		if o.UserAliasIDIn != nil {
			qrUserAliasIDIn = *o.UserAliasIDIn
		}
		qUserAliasIDIn := qrUserAliasIDIn
		if qUserAliasIDIn != "" {
			if err := r.SetQueryParam("user_alias_id__in", qUserAliasIDIn); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
