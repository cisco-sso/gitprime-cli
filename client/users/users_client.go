// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	UsersBulkDelete(params *UsersBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UsersBulkDeleteCreated, error)

	UsersBulkUnmerge(params *UsersBulkUnmergeParams, authInfo runtime.ClientAuthInfoWriter) (*UsersBulkUnmergeCreated, error)

	UsersCreate(params *UsersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersCreateCreated, error)

	UsersList(params *UsersListParams, authInfo runtime.ClientAuthInfoWriter) (*UsersListOK, error)

	UsersLoginCreate(params *UsersLoginCreateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersLoginCreateCreated, error)

	UsersLoginPartialUpdate(params *UsersLoginPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersLoginPartialUpdateOK, error)

	UsersMerge(params *UsersMergeParams, authInfo runtime.ClientAuthInfoWriter) (*UsersMergeCreated, error)

	UsersPartialUpdate(params *UsersPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersPartialUpdateOK, error)

	UsersRead(params *UsersReadParams, authInfo runtime.ClientAuthInfoWriter) (*UsersReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  UsersBulkDelete deletes appropriate apex users from the supplied id list

  Deletes appropriate ApexUsers from the supplied id list.

Users with Commit, PR, or Ticket data cannot be deleted as they would just be automatically reimported.
Instead they will be excluded from all metrics, but will still appear in your users list.
*/
func (a *Client) UsersBulkDelete(params *UsersBulkDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UsersBulkDeleteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersBulkDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_bulk_delete",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/users/bulk_delete/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersBulkDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersBulkDeleteCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_bulk_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersBulkUnmerge unmerges all user alias for the given apex users in list of ids

  Unmerge all user_alias for the given Apex Users in list of ids.
*/
func (a *Client) UsersBulkUnmerge(params *UsersBulkUnmergeParams, authInfo runtime.ClientAuthInfoWriter) (*UsersBulkUnmergeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersBulkUnmergeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_bulk_unmerge",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/users/bulk_unmerge/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersBulkUnmergeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersBulkUnmergeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_bulk_unmerge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersCreate creates a user

  Create a user

    This API supports bulk creating user with any of the following attributes.
    If you only need to create an apex_user pass in only user attributes.
    If the user will need to login, you should pass in user attributes and login attributes.

    Example:
    {
        "users": [
            {
                "name": string,
                "email": string,
                "team_ids": [int],
                "hidden_from_reports": boolean,
                ....
                "login": {
                    "login_email": string,
                    "login_preferred_name": string,
                    "login_password": string
                    ....
                }
            }
        ]
    }

    parameters:

        User attributes:

        name: the name of the user
        email: the display email of the user
        hidden_from_reports: toggle if the user data is included in the metrics
        team_ids: array of team ids
        first_activity_at : pick a start date "YYYY-MM-DD HH:MM:SS"


        Roles have associated grants with them. To assign roles pass in an Array of Role ids as role_ids.
        To view available Roles use the roles API.

        For custom grants pass in an Array of Grant ids as grants. To view available Grants use the grants API.

        Use team_visibility to change which teams users see by default. If left out, defaults to inherit.

        No teams - see only my data
        Own teams - see my teams data
        All teams - see any teams data
        Inherit - user inherits their team visibility

        Use user_visibility to change if users can see individual users' metrics. If left out, defaults to inherit.

            No users - user see nothing past themselves
            Other users  - view general data metrics (teams active days per week)
            Inherit - user inherits their user visibility

        Login attributes:
            login_email: login email
            login_preferred_name: login name,
            login_password: login password
            login_enabled (optional, default: true): enable or disable login
            role_ids (optional, default: org default roles): array of role ids
            access_ids (optional, default: org default roles): array of access ids
            needs_password_reset (optional, default: false): password reset,
            user_visibility (optional, default: null): depth
            team_visibility (optional, default: null): scope
*/
func (a *Client) UsersCreate(params *UsersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_create",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/users/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersList lists user entities

  List User entities

--- ApexUsers ---

An apex user is a single point of reference for one or more UserAlias objects. ApexUser objects may have more than
one UserAlias due to differences in email or variations in a name.

--- General ---

All objects can be traversed to related objects. This can be achieved by using the double-underscore syntax.
For instance, query all User records with a specific Team name like so:

"?team\_\_name=Bobs%20Team".

You can easily traverse multiple levels of relationships by connecting related objects. For example:

"?foo\_\_bar\_\_baz\_\_name=Bob"

All available relationships are defined in the filter documentation with the note "filter-traversable object."
Additionally, you can limit the properties returned in an object by using the `fields` or `omit`
keywords as follows:

"?fields=foo,bar,bad" will return only these fields

or

"?omit=foo,bar,baz" will return all but the specified fields
*/
func (a *Client) UsersList(params *UsersListParams, authInfo runtime.ClientAuthInfoWriter) (*UsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_list",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/users/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersLoginCreate users login for an associated apex user

  User login for an associated apex user.

    Roles have associated grants with them. To assign roles pass in an Array of Role ids as role_ids.
    To view available Roles use the roles API.

    For custom grants pass in an Array of Grant ids as grants. To view available Grants use the grants API.

    Use team_visibility to change which teams users see by default. If left out, defaults to inherit.

        No teams - see only my data
        Own teams - see my teams data
        All teams - see any teams data
        Inherit - user inherits their team visibility

    Use user_visibility to change if users can see individual users' metrics. If left out, defaults to inherit.

        No users - user see nothing past themselves
        Other users  - view general data metrics (teams active days per week)
        Inherit - user inherits their user visibility

    POST Parameters:
        login_email: login email
        login_preferred_name: login name,
        login_password: login password,
        login_enabled (optional, default: true): enable or disable login
        role_ids (optional, default: org default roles): array of role ids
        access_ids (optional, default: org default roles): array of access ids
        needs_password_reset (optional, default: false): password reset,
        user_visibility (optional, default: null): depth
        team_visibility (optional, default: null): scope

    PATCH Parameters:
    All fields here are optional
        login_email: login email
        login_preferred_name: login name,
        login_password
        login_enabled (optional, default: true): enable or disable login
        role_ids (optional, default: org default roles): array of role ids
        access_ids (optional, default: org default roles): array of access ids
        needs_password_reset (optional, default: false): password reset,
        user_visibility (optional, default: null): depth
        team_visibility (optional, default: null): scope
*/
func (a *Client) UsersLoginCreate(params *UsersLoginCreateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersLoginCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersLoginCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_login_create",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/users/{id}/login/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersLoginCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersLoginCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_login_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersLoginPartialUpdate users login for an associated apex user

  User login for an associated apex user.

    Roles have associated grants with them. To assign roles pass in an Array of Role ids as role_ids.
    To view available Roles use the roles API.

    For custom grants pass in an Array of Grant ids as grants. To view available Grants use the grants API.

    Use team_visibility to change which teams users see by default. If left out, defaults to inherit.

        No teams - see only my data
        Own teams - see my teams data
        All teams - see any teams data
        Inherit - user inherits their team visibility

    Use user_visibility to change if users can see individual users' metrics. If left out, defaults to inherit.

        No users - user see nothing past themselves
        Other users  - view general data metrics (teams active days per week)
        Inherit - user inherits their user visibility

    POST Parameters:
        login_email: login email
        login_preferred_name: login name,
        login_password: login password,
        login_enabled (optional, default: true): enable or disable login
        role_ids (optional, default: org default roles): array of role ids
        access_ids (optional, default: org default roles): array of access ids
        needs_password_reset (optional, default: false): password reset,
        user_visibility (optional, default: null): depth
        team_visibility (optional, default: null): scope

    PATCH Parameters:
    All fields here are optional
        login_email: login email
        login_preferred_name: login name,
        login_password
        login_enabled (optional, default: true): enable or disable login
        role_ids (optional, default: org default roles): array of role ids
        access_ids (optional, default: org default roles): array of access ids
        needs_password_reset (optional, default: false): password reset,
        user_visibility (optional, default: null): depth
        team_visibility (optional, default: null): scope
*/
func (a *Client) UsersLoginPartialUpdate(params *UsersLoginPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersLoginPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersLoginPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_login_partial_update",
		Method:             "PATCH",
		PathPattern:        "/v3/customer/core/users/{id}/login/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersLoginPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersLoginPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_login_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersMerge merges the list of apex user ids user alias ids into this apex user

  Merges the list of apex_user_ids/user_alias_ids into this ApexUser.
*/
func (a *Client) UsersMerge(params *UsersMergeParams, authInfo runtime.ClientAuthInfoWriter) (*UsersMergeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersMergeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_merge",
		Method:             "POST",
		PathPattern:        "/v3/customer/core/users/{id}/merge/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersMergeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersMergeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_merge: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersPartialUpdate updates user by id value

  Update user by id value.

parameters

    name: change the name of the user
    email: change the display email of the user
    hidden_from_reports: toggle if the user data is included in the metrics
    team_ids: array of team ids
    first_activity_at (optional, default: null YYYY-MM-DD HH:MM:SS): pick a start date
*/
func (a *Client) UsersPartialUpdate(params *UsersPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_partial_update",
		Method:             "PATCH",
		PathPattern:        "/v3/customer/core/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersRead gets a specific apex user entity by id value

  Get a specific ApexUser entity by id value.
*/
func (a *Client) UsersRead(params *UsersReadParams, authInfo runtime.ClientAuthInfoWriter) (*UsersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_read",
		Method:             "GET",
		PathPattern:        "/v3/customer/core/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for users_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
