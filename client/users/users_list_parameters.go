// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUsersListParams creates a new UsersListParams object
// with the default values initialized.
func NewUsersListParams() *UsersListParams {
	var ()
	return &UsersListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUsersListParamsWithTimeout creates a new UsersListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsersListParamsWithTimeout(timeout time.Duration) *UsersListParams {
	var ()
	return &UsersListParams{

		timeout: timeout,
	}
}

// NewUsersListParamsWithContext creates a new UsersListParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsersListParamsWithContext(ctx context.Context) *UsersListParams {
	var ()
	return &UsersListParams{

		Context: ctx,
	}
}

// NewUsersListParamsWithHTTPClient creates a new UsersListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsersListParamsWithHTTPClient(client *http.Client) *UsersListParams {
	var ()
	return &UsersListParams{
		HTTPClient: client,
	}
}

/*UsersListParams contains all the parameters to send to the API endpoint
for the users list operation typically these are written to a http.Request
*/
type UsersListParams struct {

	/*Access
	  Filter on Orgmembership.grant.name  value

	*/
	Access *string
	/*AliasCount
	  Records == alias_count

	*/
	AliasCount *float64
	/*AliasCountGt
	  Records > alias_count

	*/
	AliasCountGt *float64
	/*AliasCountGte
	  Records >= alias_count

	*/
	AliasCountGte *float64
	/*AliasCountLt
	  Records < alias_count

	*/
	AliasCountLt *float64
	/*AliasCountLte
	  Records <= alias_count

	*/
	AliasCountLte *float64
	/*AliasEmail
	  Filter on UserAlias.email Field

	*/
	AliasEmail *string
	/*AliasEmailIcontains
	  Filter on UserAlias.email contains value

	*/
	AliasEmailIcontains *string
	/*AliasEmailStartswith
	  Filter on UserAlias.email startswith value

	*/
	AliasEmailStartswith *string
	/*AliasName
	  Filter on UserAlias.name Field

	*/
	AliasName *string
	/*AliasNameIcontains
	  Filter on UserAlias.name contains value

	*/
	AliasNameIcontains *string
	/*AliasNameStartswith
	  Filter on UserAlias.name startswith value

	*/
	AliasNameStartswith *string
	/*CreatedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAt *string
	/*CreatedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGt *string
	/*CreatedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGte *string
	/*CreatedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLt *string
	/*CreatedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLte *string
	/*Email*/
	Email *string
	/*EmailIcontains*/
	EmailIcontains *string
	/*EmailStartswith*/
	EmailStartswith *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*FirstActivityAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	FirstActivityAt *string
	/*FirstActivityAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	FirstActivityAtGt *string
	/*FirstActivityAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	FirstActivityAtGte *string
	/*FirstActivityAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	FirstActivityAtLt *string
	/*FirstActivityAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	FirstActivityAtLte *string
	/*HasLogin
	  Filter on has_login(true/false) and pending_invitation

	*/
	HasLogin *string
	/*HiddenFromReports
	  Included/Excluded in metrics

	*/
	HiddenFromReports *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*LastActivityAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastActivityAt *string
	/*LastActivityAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastActivityAtGt *string
	/*LastActivityAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastActivityAtGte *string
	/*LastActivityAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastActivityAtLt *string
	/*LastActivityAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	LastActivityAtLte *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*LoginEmail
	  Filter on User.email

	*/
	LoginEmail *string
	/*LoginEmailIcontains
	  Filter on User.email contains value

	*/
	LoginEmailIcontains *string
	/*LoginEmailStartswith
	  Filter on User.email startswith value

	*/
	LoginEmailStartswith *string
	/*LoginEnabled
	  Filter on login_enabled

	*/
	LoginEnabled *string
	/*LoginPreferredName
	  Filter on User.preferred_name

	*/
	LoginPreferredName *string
	/*LoginPreferredNameIcontains
	  Filter on User.preferred_name contains value

	*/
	LoginPreferredNameIcontains *string
	/*LoginPreferredNameStartswith
	  Filter on User.preferred_name startswith value

	*/
	LoginPreferredNameStartswith *string
	/*Name*/
	Name *string
	/*NameIcontains*/
	NameIcontains *string
	/*NameStartswith*/
	NameStartswith *string
	/*NeedsPasswordReset
	  Filter on User.needs_password_reset

	*/
	NeedsPasswordReset *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `name`, `email`, `hidden_from_reports`, `has_login`, `alias_count`, `is_group_member`

	*/
	Ordering *string
	/*PasswordChangeAllowed
	  Filter on User.password_change_allowed

	*/
	PasswordChangeAllowed *string
	/*PendingInvitation
	  Pending invitation true/false

	*/
	PendingInvitation *string
	/*Role
	  Filter on Roles an ApexUser has

	*/
	Role *string
	/*RoleIcontains
	  Filter on Roles an ApexUser has

	*/
	RoleIcontains *string
	/*RoleStartswith
	  Filter on Roles an ApexUser has

	*/
	RoleStartswith *string
	/*RolesManagedViaGitprime
	  Filter on whether a users role is                                                               managed on gitprime

	*/
	RolesManagedViaGitprime *string
	/*Search
	  A search term.

	*/
	Search *string
	/*SignUpMethod
	  Filter on users login signup method, oauth/invite/saml

	*/
	SignUpMethod *string
	/*Team
	  Filter-traversable object

	*/
	Team *string
	/*TeamIsnull
	  Whether or not the user is on any team: true/false

	*/
	TeamIsnull *string
	/*TeamMember
	  Filter on id of related team that a user is part of

	*/
	TeamMember *float64
	/*TeamMemberPathDescendantsin
	  Filter on related team path Ltree

	*/
	TeamMemberPathDescendantsin *string
	/*TeamVisibility
	  Filter on a users team visibility All teams/Own teams/                                                    No teams/Inherit

	*/
	TeamVisibility *string
	/*UserVisibility
	  Filter on a users user visibility Other users/No users/                                                    Inherit

	*/
	UserVisibility *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the users list params
func (o *UsersListParams) WithTimeout(timeout time.Duration) *UsersListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users list params
func (o *UsersListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users list params
func (o *UsersListParams) WithContext(ctx context.Context) *UsersListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users list params
func (o *UsersListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users list params
func (o *UsersListParams) WithHTTPClient(client *http.Client) *UsersListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users list params
func (o *UsersListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccess adds the access to the users list params
func (o *UsersListParams) WithAccess(access *string) *UsersListParams {
	o.SetAccess(access)
	return o
}

// SetAccess adds the access to the users list params
func (o *UsersListParams) SetAccess(access *string) {
	o.Access = access
}

// WithAliasCount adds the aliasCount to the users list params
func (o *UsersListParams) WithAliasCount(aliasCount *float64) *UsersListParams {
	o.SetAliasCount(aliasCount)
	return o
}

// SetAliasCount adds the aliasCount to the users list params
func (o *UsersListParams) SetAliasCount(aliasCount *float64) {
	o.AliasCount = aliasCount
}

// WithAliasCountGt adds the aliasCountGt to the users list params
func (o *UsersListParams) WithAliasCountGt(aliasCountGt *float64) *UsersListParams {
	o.SetAliasCountGt(aliasCountGt)
	return o
}

// SetAliasCountGt adds the aliasCountGt to the users list params
func (o *UsersListParams) SetAliasCountGt(aliasCountGt *float64) {
	o.AliasCountGt = aliasCountGt
}

// WithAliasCountGte adds the aliasCountGte to the users list params
func (o *UsersListParams) WithAliasCountGte(aliasCountGte *float64) *UsersListParams {
	o.SetAliasCountGte(aliasCountGte)
	return o
}

// SetAliasCountGte adds the aliasCountGte to the users list params
func (o *UsersListParams) SetAliasCountGte(aliasCountGte *float64) {
	o.AliasCountGte = aliasCountGte
}

// WithAliasCountLt adds the aliasCountLt to the users list params
func (o *UsersListParams) WithAliasCountLt(aliasCountLt *float64) *UsersListParams {
	o.SetAliasCountLt(aliasCountLt)
	return o
}

// SetAliasCountLt adds the aliasCountLt to the users list params
func (o *UsersListParams) SetAliasCountLt(aliasCountLt *float64) {
	o.AliasCountLt = aliasCountLt
}

// WithAliasCountLte adds the aliasCountLte to the users list params
func (o *UsersListParams) WithAliasCountLte(aliasCountLte *float64) *UsersListParams {
	o.SetAliasCountLte(aliasCountLte)
	return o
}

// SetAliasCountLte adds the aliasCountLte to the users list params
func (o *UsersListParams) SetAliasCountLte(aliasCountLte *float64) {
	o.AliasCountLte = aliasCountLte
}

// WithAliasEmail adds the aliasEmail to the users list params
func (o *UsersListParams) WithAliasEmail(aliasEmail *string) *UsersListParams {
	o.SetAliasEmail(aliasEmail)
	return o
}

// SetAliasEmail adds the aliasEmail to the users list params
func (o *UsersListParams) SetAliasEmail(aliasEmail *string) {
	o.AliasEmail = aliasEmail
}

// WithAliasEmailIcontains adds the aliasEmailIcontains to the users list params
func (o *UsersListParams) WithAliasEmailIcontains(aliasEmailIcontains *string) *UsersListParams {
	o.SetAliasEmailIcontains(aliasEmailIcontains)
	return o
}

// SetAliasEmailIcontains adds the aliasEmailIcontains to the users list params
func (o *UsersListParams) SetAliasEmailIcontains(aliasEmailIcontains *string) {
	o.AliasEmailIcontains = aliasEmailIcontains
}

// WithAliasEmailStartswith adds the aliasEmailStartswith to the users list params
func (o *UsersListParams) WithAliasEmailStartswith(aliasEmailStartswith *string) *UsersListParams {
	o.SetAliasEmailStartswith(aliasEmailStartswith)
	return o
}

// SetAliasEmailStartswith adds the aliasEmailStartswith to the users list params
func (o *UsersListParams) SetAliasEmailStartswith(aliasEmailStartswith *string) {
	o.AliasEmailStartswith = aliasEmailStartswith
}

// WithAliasName adds the aliasName to the users list params
func (o *UsersListParams) WithAliasName(aliasName *string) *UsersListParams {
	o.SetAliasName(aliasName)
	return o
}

// SetAliasName adds the aliasName to the users list params
func (o *UsersListParams) SetAliasName(aliasName *string) {
	o.AliasName = aliasName
}

// WithAliasNameIcontains adds the aliasNameIcontains to the users list params
func (o *UsersListParams) WithAliasNameIcontains(aliasNameIcontains *string) *UsersListParams {
	o.SetAliasNameIcontains(aliasNameIcontains)
	return o
}

// SetAliasNameIcontains adds the aliasNameIcontains to the users list params
func (o *UsersListParams) SetAliasNameIcontains(aliasNameIcontains *string) {
	o.AliasNameIcontains = aliasNameIcontains
}

// WithAliasNameStartswith adds the aliasNameStartswith to the users list params
func (o *UsersListParams) WithAliasNameStartswith(aliasNameStartswith *string) *UsersListParams {
	o.SetAliasNameStartswith(aliasNameStartswith)
	return o
}

// SetAliasNameStartswith adds the aliasNameStartswith to the users list params
func (o *UsersListParams) SetAliasNameStartswith(aliasNameStartswith *string) {
	o.AliasNameStartswith = aliasNameStartswith
}

// WithCreatedAt adds the createdAt to the users list params
func (o *UsersListParams) WithCreatedAt(createdAt *string) *UsersListParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the users list params
func (o *UsersListParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedAtGt adds the createdAtGt to the users list params
func (o *UsersListParams) WithCreatedAtGt(createdAtGt *string) *UsersListParams {
	o.SetCreatedAtGt(createdAtGt)
	return o
}

// SetCreatedAtGt adds the createdAtGt to the users list params
func (o *UsersListParams) SetCreatedAtGt(createdAtGt *string) {
	o.CreatedAtGt = createdAtGt
}

// WithCreatedAtGte adds the createdAtGte to the users list params
func (o *UsersListParams) WithCreatedAtGte(createdAtGte *string) *UsersListParams {
	o.SetCreatedAtGte(createdAtGte)
	return o
}

// SetCreatedAtGte adds the createdAtGte to the users list params
func (o *UsersListParams) SetCreatedAtGte(createdAtGte *string) {
	o.CreatedAtGte = createdAtGte
}

// WithCreatedAtLt adds the createdAtLt to the users list params
func (o *UsersListParams) WithCreatedAtLt(createdAtLt *string) *UsersListParams {
	o.SetCreatedAtLt(createdAtLt)
	return o
}

// SetCreatedAtLt adds the createdAtLt to the users list params
func (o *UsersListParams) SetCreatedAtLt(createdAtLt *string) {
	o.CreatedAtLt = createdAtLt
}

// WithCreatedAtLte adds the createdAtLte to the users list params
func (o *UsersListParams) WithCreatedAtLte(createdAtLte *string) *UsersListParams {
	o.SetCreatedAtLte(createdAtLte)
	return o
}

// SetCreatedAtLte adds the createdAtLte to the users list params
func (o *UsersListParams) SetCreatedAtLte(createdAtLte *string) {
	o.CreatedAtLte = createdAtLte
}

// WithEmail adds the email to the users list params
func (o *UsersListParams) WithEmail(email *string) *UsersListParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the users list params
func (o *UsersListParams) SetEmail(email *string) {
	o.Email = email
}

// WithEmailIcontains adds the emailIcontains to the users list params
func (o *UsersListParams) WithEmailIcontains(emailIcontains *string) *UsersListParams {
	o.SetEmailIcontains(emailIcontains)
	return o
}

// SetEmailIcontains adds the emailIcontains to the users list params
func (o *UsersListParams) SetEmailIcontains(emailIcontains *string) {
	o.EmailIcontains = emailIcontains
}

// WithEmailStartswith adds the emailStartswith to the users list params
func (o *UsersListParams) WithEmailStartswith(emailStartswith *string) *UsersListParams {
	o.SetEmailStartswith(emailStartswith)
	return o
}

// SetEmailStartswith adds the emailStartswith to the users list params
func (o *UsersListParams) SetEmailStartswith(emailStartswith *string) {
	o.EmailStartswith = emailStartswith
}

// WithFilters adds the filters to the users list params
func (o *UsersListParams) WithFilters(filters *string) *UsersListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the users list params
func (o *UsersListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithFirstActivityAt adds the firstActivityAt to the users list params
func (o *UsersListParams) WithFirstActivityAt(firstActivityAt *string) *UsersListParams {
	o.SetFirstActivityAt(firstActivityAt)
	return o
}

// SetFirstActivityAt adds the firstActivityAt to the users list params
func (o *UsersListParams) SetFirstActivityAt(firstActivityAt *string) {
	o.FirstActivityAt = firstActivityAt
}

// WithFirstActivityAtGt adds the firstActivityAtGt to the users list params
func (o *UsersListParams) WithFirstActivityAtGt(firstActivityAtGt *string) *UsersListParams {
	o.SetFirstActivityAtGt(firstActivityAtGt)
	return o
}

// SetFirstActivityAtGt adds the firstActivityAtGt to the users list params
func (o *UsersListParams) SetFirstActivityAtGt(firstActivityAtGt *string) {
	o.FirstActivityAtGt = firstActivityAtGt
}

// WithFirstActivityAtGte adds the firstActivityAtGte to the users list params
func (o *UsersListParams) WithFirstActivityAtGte(firstActivityAtGte *string) *UsersListParams {
	o.SetFirstActivityAtGte(firstActivityAtGte)
	return o
}

// SetFirstActivityAtGte adds the firstActivityAtGte to the users list params
func (o *UsersListParams) SetFirstActivityAtGte(firstActivityAtGte *string) {
	o.FirstActivityAtGte = firstActivityAtGte
}

// WithFirstActivityAtLt adds the firstActivityAtLt to the users list params
func (o *UsersListParams) WithFirstActivityAtLt(firstActivityAtLt *string) *UsersListParams {
	o.SetFirstActivityAtLt(firstActivityAtLt)
	return o
}

// SetFirstActivityAtLt adds the firstActivityAtLt to the users list params
func (o *UsersListParams) SetFirstActivityAtLt(firstActivityAtLt *string) {
	o.FirstActivityAtLt = firstActivityAtLt
}

// WithFirstActivityAtLte adds the firstActivityAtLte to the users list params
func (o *UsersListParams) WithFirstActivityAtLte(firstActivityAtLte *string) *UsersListParams {
	o.SetFirstActivityAtLte(firstActivityAtLte)
	return o
}

// SetFirstActivityAtLte adds the firstActivityAtLte to the users list params
func (o *UsersListParams) SetFirstActivityAtLte(firstActivityAtLte *string) {
	o.FirstActivityAtLte = firstActivityAtLte
}

// WithHasLogin adds the hasLogin to the users list params
func (o *UsersListParams) WithHasLogin(hasLogin *string) *UsersListParams {
	o.SetHasLogin(hasLogin)
	return o
}

// SetHasLogin adds the hasLogin to the users list params
func (o *UsersListParams) SetHasLogin(hasLogin *string) {
	o.HasLogin = hasLogin
}

// WithHiddenFromReports adds the hiddenFromReports to the users list params
func (o *UsersListParams) WithHiddenFromReports(hiddenFromReports *string) *UsersListParams {
	o.SetHiddenFromReports(hiddenFromReports)
	return o
}

// SetHiddenFromReports adds the hiddenFromReports to the users list params
func (o *UsersListParams) SetHiddenFromReports(hiddenFromReports *string) {
	o.HiddenFromReports = hiddenFromReports
}

// WithID adds the id to the users list params
func (o *UsersListParams) WithID(id *float64) *UsersListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the users list params
func (o *UsersListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the users list params
func (o *UsersListParams) WithIDIn(iDIn *float64) *UsersListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the users list params
func (o *UsersListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithLastActivityAt adds the lastActivityAt to the users list params
func (o *UsersListParams) WithLastActivityAt(lastActivityAt *string) *UsersListParams {
	o.SetLastActivityAt(lastActivityAt)
	return o
}

// SetLastActivityAt adds the lastActivityAt to the users list params
func (o *UsersListParams) SetLastActivityAt(lastActivityAt *string) {
	o.LastActivityAt = lastActivityAt
}

// WithLastActivityAtGt adds the lastActivityAtGt to the users list params
func (o *UsersListParams) WithLastActivityAtGt(lastActivityAtGt *string) *UsersListParams {
	o.SetLastActivityAtGt(lastActivityAtGt)
	return o
}

// SetLastActivityAtGt adds the lastActivityAtGt to the users list params
func (o *UsersListParams) SetLastActivityAtGt(lastActivityAtGt *string) {
	o.LastActivityAtGt = lastActivityAtGt
}

// WithLastActivityAtGte adds the lastActivityAtGte to the users list params
func (o *UsersListParams) WithLastActivityAtGte(lastActivityAtGte *string) *UsersListParams {
	o.SetLastActivityAtGte(lastActivityAtGte)
	return o
}

// SetLastActivityAtGte adds the lastActivityAtGte to the users list params
func (o *UsersListParams) SetLastActivityAtGte(lastActivityAtGte *string) {
	o.LastActivityAtGte = lastActivityAtGte
}

// WithLastActivityAtLt adds the lastActivityAtLt to the users list params
func (o *UsersListParams) WithLastActivityAtLt(lastActivityAtLt *string) *UsersListParams {
	o.SetLastActivityAtLt(lastActivityAtLt)
	return o
}

// SetLastActivityAtLt adds the lastActivityAtLt to the users list params
func (o *UsersListParams) SetLastActivityAtLt(lastActivityAtLt *string) {
	o.LastActivityAtLt = lastActivityAtLt
}

// WithLastActivityAtLte adds the lastActivityAtLte to the users list params
func (o *UsersListParams) WithLastActivityAtLte(lastActivityAtLte *string) *UsersListParams {
	o.SetLastActivityAtLte(lastActivityAtLte)
	return o
}

// SetLastActivityAtLte adds the lastActivityAtLte to the users list params
func (o *UsersListParams) SetLastActivityAtLte(lastActivityAtLte *string) {
	o.LastActivityAtLte = lastActivityAtLte
}

// WithLimit adds the limit to the users list params
func (o *UsersListParams) WithLimit(limit *int64) *UsersListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the users list params
func (o *UsersListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLoginEmail adds the loginEmail to the users list params
func (o *UsersListParams) WithLoginEmail(loginEmail *string) *UsersListParams {
	o.SetLoginEmail(loginEmail)
	return o
}

// SetLoginEmail adds the loginEmail to the users list params
func (o *UsersListParams) SetLoginEmail(loginEmail *string) {
	o.LoginEmail = loginEmail
}

// WithLoginEmailIcontains adds the loginEmailIcontains to the users list params
func (o *UsersListParams) WithLoginEmailIcontains(loginEmailIcontains *string) *UsersListParams {
	o.SetLoginEmailIcontains(loginEmailIcontains)
	return o
}

// SetLoginEmailIcontains adds the loginEmailIcontains to the users list params
func (o *UsersListParams) SetLoginEmailIcontains(loginEmailIcontains *string) {
	o.LoginEmailIcontains = loginEmailIcontains
}

// WithLoginEmailStartswith adds the loginEmailStartswith to the users list params
func (o *UsersListParams) WithLoginEmailStartswith(loginEmailStartswith *string) *UsersListParams {
	o.SetLoginEmailStartswith(loginEmailStartswith)
	return o
}

// SetLoginEmailStartswith adds the loginEmailStartswith to the users list params
func (o *UsersListParams) SetLoginEmailStartswith(loginEmailStartswith *string) {
	o.LoginEmailStartswith = loginEmailStartswith
}

// WithLoginEnabled adds the loginEnabled to the users list params
func (o *UsersListParams) WithLoginEnabled(loginEnabled *string) *UsersListParams {
	o.SetLoginEnabled(loginEnabled)
	return o
}

// SetLoginEnabled adds the loginEnabled to the users list params
func (o *UsersListParams) SetLoginEnabled(loginEnabled *string) {
	o.LoginEnabled = loginEnabled
}

// WithLoginPreferredName adds the loginPreferredName to the users list params
func (o *UsersListParams) WithLoginPreferredName(loginPreferredName *string) *UsersListParams {
	o.SetLoginPreferredName(loginPreferredName)
	return o
}

// SetLoginPreferredName adds the loginPreferredName to the users list params
func (o *UsersListParams) SetLoginPreferredName(loginPreferredName *string) {
	o.LoginPreferredName = loginPreferredName
}

// WithLoginPreferredNameIcontains adds the loginPreferredNameIcontains to the users list params
func (o *UsersListParams) WithLoginPreferredNameIcontains(loginPreferredNameIcontains *string) *UsersListParams {
	o.SetLoginPreferredNameIcontains(loginPreferredNameIcontains)
	return o
}

// SetLoginPreferredNameIcontains adds the loginPreferredNameIcontains to the users list params
func (o *UsersListParams) SetLoginPreferredNameIcontains(loginPreferredNameIcontains *string) {
	o.LoginPreferredNameIcontains = loginPreferredNameIcontains
}

// WithLoginPreferredNameStartswith adds the loginPreferredNameStartswith to the users list params
func (o *UsersListParams) WithLoginPreferredNameStartswith(loginPreferredNameStartswith *string) *UsersListParams {
	o.SetLoginPreferredNameStartswith(loginPreferredNameStartswith)
	return o
}

// SetLoginPreferredNameStartswith adds the loginPreferredNameStartswith to the users list params
func (o *UsersListParams) SetLoginPreferredNameStartswith(loginPreferredNameStartswith *string) {
	o.LoginPreferredNameStartswith = loginPreferredNameStartswith
}

// WithName adds the name to the users list params
func (o *UsersListParams) WithName(name *string) *UsersListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the users list params
func (o *UsersListParams) SetName(name *string) {
	o.Name = name
}

// WithNameIcontains adds the nameIcontains to the users list params
func (o *UsersListParams) WithNameIcontains(nameIcontains *string) *UsersListParams {
	o.SetNameIcontains(nameIcontains)
	return o
}

// SetNameIcontains adds the nameIcontains to the users list params
func (o *UsersListParams) SetNameIcontains(nameIcontains *string) {
	o.NameIcontains = nameIcontains
}

// WithNameStartswith adds the nameStartswith to the users list params
func (o *UsersListParams) WithNameStartswith(nameStartswith *string) *UsersListParams {
	o.SetNameStartswith(nameStartswith)
	return o
}

// SetNameStartswith adds the nameStartswith to the users list params
func (o *UsersListParams) SetNameStartswith(nameStartswith *string) {
	o.NameStartswith = nameStartswith
}

// WithNeedsPasswordReset adds the needsPasswordReset to the users list params
func (o *UsersListParams) WithNeedsPasswordReset(needsPasswordReset *string) *UsersListParams {
	o.SetNeedsPasswordReset(needsPasswordReset)
	return o
}

// SetNeedsPasswordReset adds the needsPasswordReset to the users list params
func (o *UsersListParams) SetNeedsPasswordReset(needsPasswordReset *string) {
	o.NeedsPasswordReset = needsPasswordReset
}

// WithOffset adds the offset to the users list params
func (o *UsersListParams) WithOffset(offset *int64) *UsersListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the users list params
func (o *UsersListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the users list params
func (o *UsersListParams) WithOrdering(ordering *string) *UsersListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the users list params
func (o *UsersListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithPasswordChangeAllowed adds the passwordChangeAllowed to the users list params
func (o *UsersListParams) WithPasswordChangeAllowed(passwordChangeAllowed *string) *UsersListParams {
	o.SetPasswordChangeAllowed(passwordChangeAllowed)
	return o
}

// SetPasswordChangeAllowed adds the passwordChangeAllowed to the users list params
func (o *UsersListParams) SetPasswordChangeAllowed(passwordChangeAllowed *string) {
	o.PasswordChangeAllowed = passwordChangeAllowed
}

// WithPendingInvitation adds the pendingInvitation to the users list params
func (o *UsersListParams) WithPendingInvitation(pendingInvitation *string) *UsersListParams {
	o.SetPendingInvitation(pendingInvitation)
	return o
}

// SetPendingInvitation adds the pendingInvitation to the users list params
func (o *UsersListParams) SetPendingInvitation(pendingInvitation *string) {
	o.PendingInvitation = pendingInvitation
}

// WithRole adds the role to the users list params
func (o *UsersListParams) WithRole(role *string) *UsersListParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the users list params
func (o *UsersListParams) SetRole(role *string) {
	o.Role = role
}

// WithRoleIcontains adds the roleIcontains to the users list params
func (o *UsersListParams) WithRoleIcontains(roleIcontains *string) *UsersListParams {
	o.SetRoleIcontains(roleIcontains)
	return o
}

// SetRoleIcontains adds the roleIcontains to the users list params
func (o *UsersListParams) SetRoleIcontains(roleIcontains *string) {
	o.RoleIcontains = roleIcontains
}

// WithRoleStartswith adds the roleStartswith to the users list params
func (o *UsersListParams) WithRoleStartswith(roleStartswith *string) *UsersListParams {
	o.SetRoleStartswith(roleStartswith)
	return o
}

// SetRoleStartswith adds the roleStartswith to the users list params
func (o *UsersListParams) SetRoleStartswith(roleStartswith *string) {
	o.RoleStartswith = roleStartswith
}

// WithRolesManagedViaGitprime adds the rolesManagedViaGitprime to the users list params
func (o *UsersListParams) WithRolesManagedViaGitprime(rolesManagedViaGitprime *string) *UsersListParams {
	o.SetRolesManagedViaGitprime(rolesManagedViaGitprime)
	return o
}

// SetRolesManagedViaGitprime adds the rolesManagedViaGitprime to the users list params
func (o *UsersListParams) SetRolesManagedViaGitprime(rolesManagedViaGitprime *string) {
	o.RolesManagedViaGitprime = rolesManagedViaGitprime
}

// WithSearch adds the search to the users list params
func (o *UsersListParams) WithSearch(search *string) *UsersListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the users list params
func (o *UsersListParams) SetSearch(search *string) {
	o.Search = search
}

// WithSignUpMethod adds the signUpMethod to the users list params
func (o *UsersListParams) WithSignUpMethod(signUpMethod *string) *UsersListParams {
	o.SetSignUpMethod(signUpMethod)
	return o
}

// SetSignUpMethod adds the signUpMethod to the users list params
func (o *UsersListParams) SetSignUpMethod(signUpMethod *string) {
	o.SignUpMethod = signUpMethod
}

// WithTeam adds the team to the users list params
func (o *UsersListParams) WithTeam(team *string) *UsersListParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the users list params
func (o *UsersListParams) SetTeam(team *string) {
	o.Team = team
}

// WithTeamIsnull adds the teamIsnull to the users list params
func (o *UsersListParams) WithTeamIsnull(teamIsnull *string) *UsersListParams {
	o.SetTeamIsnull(teamIsnull)
	return o
}

// SetTeamIsnull adds the teamIsnull to the users list params
func (o *UsersListParams) SetTeamIsnull(teamIsnull *string) {
	o.TeamIsnull = teamIsnull
}

// WithTeamMember adds the teamMember to the users list params
func (o *UsersListParams) WithTeamMember(teamMember *float64) *UsersListParams {
	o.SetTeamMember(teamMember)
	return o
}

// SetTeamMember adds the teamMember to the users list params
func (o *UsersListParams) SetTeamMember(teamMember *float64) {
	o.TeamMember = teamMember
}

// WithTeamMemberPathDescendantsin adds the teamMemberPathDescendantsin to the users list params
func (o *UsersListParams) WithTeamMemberPathDescendantsin(teamMemberPathDescendantsin *string) *UsersListParams {
	o.SetTeamMemberPathDescendantsin(teamMemberPathDescendantsin)
	return o
}

// SetTeamMemberPathDescendantsin adds the teamMemberPathDescendantsin to the users list params
func (o *UsersListParams) SetTeamMemberPathDescendantsin(teamMemberPathDescendantsin *string) {
	o.TeamMemberPathDescendantsin = teamMemberPathDescendantsin
}

// WithTeamVisibility adds the teamVisibility to the users list params
func (o *UsersListParams) WithTeamVisibility(teamVisibility *string) *UsersListParams {
	o.SetTeamVisibility(teamVisibility)
	return o
}

// SetTeamVisibility adds the teamVisibility to the users list params
func (o *UsersListParams) SetTeamVisibility(teamVisibility *string) {
	o.TeamVisibility = teamVisibility
}

// WithUserVisibility adds the userVisibility to the users list params
func (o *UsersListParams) WithUserVisibility(userVisibility *string) *UsersListParams {
	o.SetUserVisibility(userVisibility)
	return o
}

// SetUserVisibility adds the userVisibility to the users list params
func (o *UsersListParams) SetUserVisibility(userVisibility *string) {
	o.UserVisibility = userVisibility
}

// WriteToRequest writes these params to a swagger request
func (o *UsersListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Access != nil {

		// query param access
		var qrAccess string
		if o.Access != nil {
			qrAccess = *o.Access
		}
		qAccess := qrAccess
		if qAccess != "" {
			if err := r.SetQueryParam("access", qAccess); err != nil {
				return err
			}
		}

	}

	if o.AliasCount != nil {

		// query param alias_count
		var qrAliasCount float64
		if o.AliasCount != nil {
			qrAliasCount = *o.AliasCount
		}
		qAliasCount := swag.FormatFloat64(qrAliasCount)
		if qAliasCount != "" {
			if err := r.SetQueryParam("alias_count", qAliasCount); err != nil {
				return err
			}
		}

	}

	if o.AliasCountGt != nil {

		// query param alias_count__gt
		var qrAliasCountGt float64
		if o.AliasCountGt != nil {
			qrAliasCountGt = *o.AliasCountGt
		}
		qAliasCountGt := swag.FormatFloat64(qrAliasCountGt)
		if qAliasCountGt != "" {
			if err := r.SetQueryParam("alias_count__gt", qAliasCountGt); err != nil {
				return err
			}
		}

	}

	if o.AliasCountGte != nil {

		// query param alias_count__gte
		var qrAliasCountGte float64
		if o.AliasCountGte != nil {
			qrAliasCountGte = *o.AliasCountGte
		}
		qAliasCountGte := swag.FormatFloat64(qrAliasCountGte)
		if qAliasCountGte != "" {
			if err := r.SetQueryParam("alias_count__gte", qAliasCountGte); err != nil {
				return err
			}
		}

	}

	if o.AliasCountLt != nil {

		// query param alias_count__lt
		var qrAliasCountLt float64
		if o.AliasCountLt != nil {
			qrAliasCountLt = *o.AliasCountLt
		}
		qAliasCountLt := swag.FormatFloat64(qrAliasCountLt)
		if qAliasCountLt != "" {
			if err := r.SetQueryParam("alias_count__lt", qAliasCountLt); err != nil {
				return err
			}
		}

	}

	if o.AliasCountLte != nil {

		// query param alias_count__lte
		var qrAliasCountLte float64
		if o.AliasCountLte != nil {
			qrAliasCountLte = *o.AliasCountLte
		}
		qAliasCountLte := swag.FormatFloat64(qrAliasCountLte)
		if qAliasCountLte != "" {
			if err := r.SetQueryParam("alias_count__lte", qAliasCountLte); err != nil {
				return err
			}
		}

	}

	if o.AliasEmail != nil {

		// query param alias_email
		var qrAliasEmail string
		if o.AliasEmail != nil {
			qrAliasEmail = *o.AliasEmail
		}
		qAliasEmail := qrAliasEmail
		if qAliasEmail != "" {
			if err := r.SetQueryParam("alias_email", qAliasEmail); err != nil {
				return err
			}
		}

	}

	if o.AliasEmailIcontains != nil {

		// query param alias_email__icontains
		var qrAliasEmailIcontains string
		if o.AliasEmailIcontains != nil {
			qrAliasEmailIcontains = *o.AliasEmailIcontains
		}
		qAliasEmailIcontains := qrAliasEmailIcontains
		if qAliasEmailIcontains != "" {
			if err := r.SetQueryParam("alias_email__icontains", qAliasEmailIcontains); err != nil {
				return err
			}
		}

	}

	if o.AliasEmailStartswith != nil {

		// query param alias_email__startswith
		var qrAliasEmailStartswith string
		if o.AliasEmailStartswith != nil {
			qrAliasEmailStartswith = *o.AliasEmailStartswith
		}
		qAliasEmailStartswith := qrAliasEmailStartswith
		if qAliasEmailStartswith != "" {
			if err := r.SetQueryParam("alias_email__startswith", qAliasEmailStartswith); err != nil {
				return err
			}
		}

	}

	if o.AliasName != nil {

		// query param alias_name
		var qrAliasName string
		if o.AliasName != nil {
			qrAliasName = *o.AliasName
		}
		qAliasName := qrAliasName
		if qAliasName != "" {
			if err := r.SetQueryParam("alias_name", qAliasName); err != nil {
				return err
			}
		}

	}

	if o.AliasNameIcontains != nil {

		// query param alias_name__icontains
		var qrAliasNameIcontains string
		if o.AliasNameIcontains != nil {
			qrAliasNameIcontains = *o.AliasNameIcontains
		}
		qAliasNameIcontains := qrAliasNameIcontains
		if qAliasNameIcontains != "" {
			if err := r.SetQueryParam("alias_name__icontains", qAliasNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.AliasNameStartswith != nil {

		// query param alias_name__startswith
		var qrAliasNameStartswith string
		if o.AliasNameStartswith != nil {
			qrAliasNameStartswith = *o.AliasNameStartswith
		}
		qAliasNameStartswith := qrAliasNameStartswith
		if qAliasNameStartswith != "" {
			if err := r.SetQueryParam("alias_name__startswith", qAliasNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string
		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {
			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGt != nil {

		// query param created_at__gt
		var qrCreatedAtGt string
		if o.CreatedAtGt != nil {
			qrCreatedAtGt = *o.CreatedAtGt
		}
		qCreatedAtGt := qrCreatedAtGt
		if qCreatedAtGt != "" {
			if err := r.SetQueryParam("created_at__gt", qCreatedAtGt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGte != nil {

		// query param created_at__gte
		var qrCreatedAtGte string
		if o.CreatedAtGte != nil {
			qrCreatedAtGte = *o.CreatedAtGte
		}
		qCreatedAtGte := qrCreatedAtGte
		if qCreatedAtGte != "" {
			if err := r.SetQueryParam("created_at__gte", qCreatedAtGte); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLt != nil {

		// query param created_at__lt
		var qrCreatedAtLt string
		if o.CreatedAtLt != nil {
			qrCreatedAtLt = *o.CreatedAtLt
		}
		qCreatedAtLt := qrCreatedAtLt
		if qCreatedAtLt != "" {
			if err := r.SetQueryParam("created_at__lt", qCreatedAtLt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLte != nil {

		// query param created_at__lte
		var qrCreatedAtLte string
		if o.CreatedAtLte != nil {
			qrCreatedAtLte = *o.CreatedAtLte
		}
		qCreatedAtLte := qrCreatedAtLte
		if qCreatedAtLte != "" {
			if err := r.SetQueryParam("created_at__lte", qCreatedAtLte); err != nil {
				return err
			}
		}

	}

	if o.Email != nil {

		// query param email
		var qrEmail string
		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {
			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}

	}

	if o.EmailIcontains != nil {

		// query param email__icontains
		var qrEmailIcontains string
		if o.EmailIcontains != nil {
			qrEmailIcontains = *o.EmailIcontains
		}
		qEmailIcontains := qrEmailIcontains
		if qEmailIcontains != "" {
			if err := r.SetQueryParam("email__icontains", qEmailIcontains); err != nil {
				return err
			}
		}

	}

	if o.EmailStartswith != nil {

		// query param email__startswith
		var qrEmailStartswith string
		if o.EmailStartswith != nil {
			qrEmailStartswith = *o.EmailStartswith
		}
		qEmailStartswith := qrEmailStartswith
		if qEmailStartswith != "" {
			if err := r.SetQueryParam("email__startswith", qEmailStartswith); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.FirstActivityAt != nil {

		// query param first_activity_at
		var qrFirstActivityAt string
		if o.FirstActivityAt != nil {
			qrFirstActivityAt = *o.FirstActivityAt
		}
		qFirstActivityAt := qrFirstActivityAt
		if qFirstActivityAt != "" {
			if err := r.SetQueryParam("first_activity_at", qFirstActivityAt); err != nil {
				return err
			}
		}

	}

	if o.FirstActivityAtGt != nil {

		// query param first_activity_at__gt
		var qrFirstActivityAtGt string
		if o.FirstActivityAtGt != nil {
			qrFirstActivityAtGt = *o.FirstActivityAtGt
		}
		qFirstActivityAtGt := qrFirstActivityAtGt
		if qFirstActivityAtGt != "" {
			if err := r.SetQueryParam("first_activity_at__gt", qFirstActivityAtGt); err != nil {
				return err
			}
		}

	}

	if o.FirstActivityAtGte != nil {

		// query param first_activity_at__gte
		var qrFirstActivityAtGte string
		if o.FirstActivityAtGte != nil {
			qrFirstActivityAtGte = *o.FirstActivityAtGte
		}
		qFirstActivityAtGte := qrFirstActivityAtGte
		if qFirstActivityAtGte != "" {
			if err := r.SetQueryParam("first_activity_at__gte", qFirstActivityAtGte); err != nil {
				return err
			}
		}

	}

	if o.FirstActivityAtLt != nil {

		// query param first_activity_at__lt
		var qrFirstActivityAtLt string
		if o.FirstActivityAtLt != nil {
			qrFirstActivityAtLt = *o.FirstActivityAtLt
		}
		qFirstActivityAtLt := qrFirstActivityAtLt
		if qFirstActivityAtLt != "" {
			if err := r.SetQueryParam("first_activity_at__lt", qFirstActivityAtLt); err != nil {
				return err
			}
		}

	}

	if o.FirstActivityAtLte != nil {

		// query param first_activity_at__lte
		var qrFirstActivityAtLte string
		if o.FirstActivityAtLte != nil {
			qrFirstActivityAtLte = *o.FirstActivityAtLte
		}
		qFirstActivityAtLte := qrFirstActivityAtLte
		if qFirstActivityAtLte != "" {
			if err := r.SetQueryParam("first_activity_at__lte", qFirstActivityAtLte); err != nil {
				return err
			}
		}

	}

	if o.HasLogin != nil {

		// query param has_login
		var qrHasLogin string
		if o.HasLogin != nil {
			qrHasLogin = *o.HasLogin
		}
		qHasLogin := qrHasLogin
		if qHasLogin != "" {
			if err := r.SetQueryParam("has_login", qHasLogin); err != nil {
				return err
			}
		}

	}

	if o.HiddenFromReports != nil {

		// query param hidden_from_reports
		var qrHiddenFromReports string
		if o.HiddenFromReports != nil {
			qrHiddenFromReports = *o.HiddenFromReports
		}
		qHiddenFromReports := qrHiddenFromReports
		if qHiddenFromReports != "" {
			if err := r.SetQueryParam("hidden_from_reports", qHiddenFromReports); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.LastActivityAt != nil {

		// query param last_activity_at
		var qrLastActivityAt string
		if o.LastActivityAt != nil {
			qrLastActivityAt = *o.LastActivityAt
		}
		qLastActivityAt := qrLastActivityAt
		if qLastActivityAt != "" {
			if err := r.SetQueryParam("last_activity_at", qLastActivityAt); err != nil {
				return err
			}
		}

	}

	if o.LastActivityAtGt != nil {

		// query param last_activity_at__gt
		var qrLastActivityAtGt string
		if o.LastActivityAtGt != nil {
			qrLastActivityAtGt = *o.LastActivityAtGt
		}
		qLastActivityAtGt := qrLastActivityAtGt
		if qLastActivityAtGt != "" {
			if err := r.SetQueryParam("last_activity_at__gt", qLastActivityAtGt); err != nil {
				return err
			}
		}

	}

	if o.LastActivityAtGte != nil {

		// query param last_activity_at__gte
		var qrLastActivityAtGte string
		if o.LastActivityAtGte != nil {
			qrLastActivityAtGte = *o.LastActivityAtGte
		}
		qLastActivityAtGte := qrLastActivityAtGte
		if qLastActivityAtGte != "" {
			if err := r.SetQueryParam("last_activity_at__gte", qLastActivityAtGte); err != nil {
				return err
			}
		}

	}

	if o.LastActivityAtLt != nil {

		// query param last_activity_at__lt
		var qrLastActivityAtLt string
		if o.LastActivityAtLt != nil {
			qrLastActivityAtLt = *o.LastActivityAtLt
		}
		qLastActivityAtLt := qrLastActivityAtLt
		if qLastActivityAtLt != "" {
			if err := r.SetQueryParam("last_activity_at__lt", qLastActivityAtLt); err != nil {
				return err
			}
		}

	}

	if o.LastActivityAtLte != nil {

		// query param last_activity_at__lte
		var qrLastActivityAtLte string
		if o.LastActivityAtLte != nil {
			qrLastActivityAtLte = *o.LastActivityAtLte
		}
		qLastActivityAtLte := qrLastActivityAtLte
		if qLastActivityAtLte != "" {
			if err := r.SetQueryParam("last_activity_at__lte", qLastActivityAtLte); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.LoginEmail != nil {

		// query param login_email
		var qrLoginEmail string
		if o.LoginEmail != nil {
			qrLoginEmail = *o.LoginEmail
		}
		qLoginEmail := qrLoginEmail
		if qLoginEmail != "" {
			if err := r.SetQueryParam("login_email", qLoginEmail); err != nil {
				return err
			}
		}

	}

	if o.LoginEmailIcontains != nil {

		// query param login_email__icontains
		var qrLoginEmailIcontains string
		if o.LoginEmailIcontains != nil {
			qrLoginEmailIcontains = *o.LoginEmailIcontains
		}
		qLoginEmailIcontains := qrLoginEmailIcontains
		if qLoginEmailIcontains != "" {
			if err := r.SetQueryParam("login_email__icontains", qLoginEmailIcontains); err != nil {
				return err
			}
		}

	}

	if o.LoginEmailStartswith != nil {

		// query param login_email__startswith
		var qrLoginEmailStartswith string
		if o.LoginEmailStartswith != nil {
			qrLoginEmailStartswith = *o.LoginEmailStartswith
		}
		qLoginEmailStartswith := qrLoginEmailStartswith
		if qLoginEmailStartswith != "" {
			if err := r.SetQueryParam("login_email__startswith", qLoginEmailStartswith); err != nil {
				return err
			}
		}

	}

	if o.LoginEnabled != nil {

		// query param login_enabled
		var qrLoginEnabled string
		if o.LoginEnabled != nil {
			qrLoginEnabled = *o.LoginEnabled
		}
		qLoginEnabled := qrLoginEnabled
		if qLoginEnabled != "" {
			if err := r.SetQueryParam("login_enabled", qLoginEnabled); err != nil {
				return err
			}
		}

	}

	if o.LoginPreferredName != nil {

		// query param login_preferred_name
		var qrLoginPreferredName string
		if o.LoginPreferredName != nil {
			qrLoginPreferredName = *o.LoginPreferredName
		}
		qLoginPreferredName := qrLoginPreferredName
		if qLoginPreferredName != "" {
			if err := r.SetQueryParam("login_preferred_name", qLoginPreferredName); err != nil {
				return err
			}
		}

	}

	if o.LoginPreferredNameIcontains != nil {

		// query param login_preferred_name__icontains
		var qrLoginPreferredNameIcontains string
		if o.LoginPreferredNameIcontains != nil {
			qrLoginPreferredNameIcontains = *o.LoginPreferredNameIcontains
		}
		qLoginPreferredNameIcontains := qrLoginPreferredNameIcontains
		if qLoginPreferredNameIcontains != "" {
			if err := r.SetQueryParam("login_preferred_name__icontains", qLoginPreferredNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.LoginPreferredNameStartswith != nil {

		// query param login_preferred_name__startswith
		var qrLoginPreferredNameStartswith string
		if o.LoginPreferredNameStartswith != nil {
			qrLoginPreferredNameStartswith = *o.LoginPreferredNameStartswith
		}
		qLoginPreferredNameStartswith := qrLoginPreferredNameStartswith
		if qLoginPreferredNameStartswith != "" {
			if err := r.SetQueryParam("login_preferred_name__startswith", qLoginPreferredNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.NameIcontains != nil {

		// query param name__icontains
		var qrNameIcontains string
		if o.NameIcontains != nil {
			qrNameIcontains = *o.NameIcontains
		}
		qNameIcontains := qrNameIcontains
		if qNameIcontains != "" {
			if err := r.SetQueryParam("name__icontains", qNameIcontains); err != nil {
				return err
			}
		}

	}

	if o.NameStartswith != nil {

		// query param name__startswith
		var qrNameStartswith string
		if o.NameStartswith != nil {
			qrNameStartswith = *o.NameStartswith
		}
		qNameStartswith := qrNameStartswith
		if qNameStartswith != "" {
			if err := r.SetQueryParam("name__startswith", qNameStartswith); err != nil {
				return err
			}
		}

	}

	if o.NeedsPasswordReset != nil {

		// query param needs_password_reset
		var qrNeedsPasswordReset string
		if o.NeedsPasswordReset != nil {
			qrNeedsPasswordReset = *o.NeedsPasswordReset
		}
		qNeedsPasswordReset := qrNeedsPasswordReset
		if qNeedsPasswordReset != "" {
			if err := r.SetQueryParam("needs_password_reset", qNeedsPasswordReset); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.PasswordChangeAllowed != nil {

		// query param password_change_allowed
		var qrPasswordChangeAllowed string
		if o.PasswordChangeAllowed != nil {
			qrPasswordChangeAllowed = *o.PasswordChangeAllowed
		}
		qPasswordChangeAllowed := qrPasswordChangeAllowed
		if qPasswordChangeAllowed != "" {
			if err := r.SetQueryParam("password_change_allowed", qPasswordChangeAllowed); err != nil {
				return err
			}
		}

	}

	if o.PendingInvitation != nil {

		// query param pending_invitation
		var qrPendingInvitation string
		if o.PendingInvitation != nil {
			qrPendingInvitation = *o.PendingInvitation
		}
		qPendingInvitation := qrPendingInvitation
		if qPendingInvitation != "" {
			if err := r.SetQueryParam("pending_invitation", qPendingInvitation); err != nil {
				return err
			}
		}

	}

	if o.Role != nil {

		// query param role
		var qrRole string
		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {
			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}

	}

	if o.RoleIcontains != nil {

		// query param role__icontains
		var qrRoleIcontains string
		if o.RoleIcontains != nil {
			qrRoleIcontains = *o.RoleIcontains
		}
		qRoleIcontains := qrRoleIcontains
		if qRoleIcontains != "" {
			if err := r.SetQueryParam("role__icontains", qRoleIcontains); err != nil {
				return err
			}
		}

	}

	if o.RoleStartswith != nil {

		// query param role__startswith
		var qrRoleStartswith string
		if o.RoleStartswith != nil {
			qrRoleStartswith = *o.RoleStartswith
		}
		qRoleStartswith := qrRoleStartswith
		if qRoleStartswith != "" {
			if err := r.SetQueryParam("role__startswith", qRoleStartswith); err != nil {
				return err
			}
		}

	}

	if o.RolesManagedViaGitprime != nil {

		// query param roles_managed_via_gitprime
		var qrRolesManagedViaGitprime string
		if o.RolesManagedViaGitprime != nil {
			qrRolesManagedViaGitprime = *o.RolesManagedViaGitprime
		}
		qRolesManagedViaGitprime := qrRolesManagedViaGitprime
		if qRolesManagedViaGitprime != "" {
			if err := r.SetQueryParam("roles_managed_via_gitprime", qRolesManagedViaGitprime); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.SignUpMethod != nil {

		// query param sign_up_method
		var qrSignUpMethod string
		if o.SignUpMethod != nil {
			qrSignUpMethod = *o.SignUpMethod
		}
		qSignUpMethod := qrSignUpMethod
		if qSignUpMethod != "" {
			if err := r.SetQueryParam("sign_up_method", qSignUpMethod); err != nil {
				return err
			}
		}

	}

	if o.Team != nil {

		// query param team
		var qrTeam string
		if o.Team != nil {
			qrTeam = *o.Team
		}
		qTeam := qrTeam
		if qTeam != "" {
			if err := r.SetQueryParam("team", qTeam); err != nil {
				return err
			}
		}

	}

	if o.TeamIsnull != nil {

		// query param team__isnull
		var qrTeamIsnull string
		if o.TeamIsnull != nil {
			qrTeamIsnull = *o.TeamIsnull
		}
		qTeamIsnull := qrTeamIsnull
		if qTeamIsnull != "" {
			if err := r.SetQueryParam("team__isnull", qTeamIsnull); err != nil {
				return err
			}
		}

	}

	if o.TeamMember != nil {

		// query param team_member
		var qrTeamMember float64
		if o.TeamMember != nil {
			qrTeamMember = *o.TeamMember
		}
		qTeamMember := swag.FormatFloat64(qrTeamMember)
		if qTeamMember != "" {
			if err := r.SetQueryParam("team_member", qTeamMember); err != nil {
				return err
			}
		}

	}

	if o.TeamMemberPathDescendantsin != nil {

		// query param team_member__path__descendantsin
		var qrTeamMemberPathDescendantsin string
		if o.TeamMemberPathDescendantsin != nil {
			qrTeamMemberPathDescendantsin = *o.TeamMemberPathDescendantsin
		}
		qTeamMemberPathDescendantsin := qrTeamMemberPathDescendantsin
		if qTeamMemberPathDescendantsin != "" {
			if err := r.SetQueryParam("team_member__path__descendantsin", qTeamMemberPathDescendantsin); err != nil {
				return err
			}
		}

	}

	if o.TeamVisibility != nil {

		// query param team_visibility
		var qrTeamVisibility string
		if o.TeamVisibility != nil {
			qrTeamVisibility = *o.TeamVisibility
		}
		qTeamVisibility := qrTeamVisibility
		if qTeamVisibility != "" {
			if err := r.SetQueryParam("team_visibility", qTeamVisibility); err != nil {
				return err
			}
		}

	}

	if o.UserVisibility != nil {

		// query param user_visibility
		var qrUserVisibility string
		if o.UserVisibility != nil {
			qrUserVisibility = *o.UserVisibility
		}
		qUserVisibility := qrUserVisibility
		if qUserVisibility != "" {
			if err := r.SetQueryParam("user_visibility", qUserVisibility); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
