// Code generated by go-swagger; DO NOT EDIT.

package pull_request_comments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPullRequestCommentsListParams creates a new PullRequestCommentsListParams object
// with the default values initialized.
func NewPullRequestCommentsListParams() *PullRequestCommentsListParams {
	var ()
	return &PullRequestCommentsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPullRequestCommentsListParamsWithTimeout creates a new PullRequestCommentsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPullRequestCommentsListParamsWithTimeout(timeout time.Duration) *PullRequestCommentsListParams {
	var ()
	return &PullRequestCommentsListParams{

		timeout: timeout,
	}
}

// NewPullRequestCommentsListParamsWithContext creates a new PullRequestCommentsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewPullRequestCommentsListParamsWithContext(ctx context.Context) *PullRequestCommentsListParams {
	var ()
	return &PullRequestCommentsListParams{

		Context: ctx,
	}
}

// NewPullRequestCommentsListParamsWithHTTPClient creates a new PullRequestCommentsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPullRequestCommentsListParamsWithHTTPClient(client *http.Client) *PullRequestCommentsListParams {
	var ()
	return &PullRequestCommentsListParams{
		HTTPClient: client,
	}
}

/*PullRequestCommentsListParams contains all the parameters to send to the API endpoint
for the pull request comments list operation typically these are written to a http.Request
*/
type PullRequestCommentsListParams struct {

	/*ApexUserID
	  Match on apex_user_id (pr creator)

	*/
	ApexUserID *float64
	/*ApexUserIDIn
	  Match on apex_user_id (pr creator) in a comma separated list

	*/
	ApexUserIDIn *string
	/*CreatedAt
	  Records == date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAt *string
	/*CreatedAtGt
	  Records > date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGt *string
	/*CreatedAtGte
	  Records >= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtGte *string
	/*CreatedAtLt
	  Records < date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLt *string
	/*CreatedAtLte
	  Records <= date or datetime (yyyy-mm-dd hh:mm:ss)

	*/
	CreatedAtLte *string
	/*Filters
	  Complex filter that handles filtering with groups of conditions connected with AND and OR conjunctions. The query can be arbitrarily grouped and nested.

	*/
	Filters *string
	/*ID*/
	ID *float64
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *float64
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Ordering
	  Valid ordering fields are: `id`, `user_alias_id`, `created_at`

	*/
	Ordering *string
	/*PullRequestID
	  ID of associated pull request

	*/
	PullRequestID *float64
	/*Search
	  A search term.

	*/
	Search *string
	/*UserAliasID*/
	UserAliasID *string
	/*UserAliasIDIn
	  Multiple values may be separated by commas.

	*/
	UserAliasIDIn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the pull request comments list params
func (o *PullRequestCommentsListParams) WithTimeout(timeout time.Duration) *PullRequestCommentsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pull request comments list params
func (o *PullRequestCommentsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pull request comments list params
func (o *PullRequestCommentsListParams) WithContext(ctx context.Context) *PullRequestCommentsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pull request comments list params
func (o *PullRequestCommentsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pull request comments list params
func (o *PullRequestCommentsListParams) WithHTTPClient(client *http.Client) *PullRequestCommentsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pull request comments list params
func (o *PullRequestCommentsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApexUserID adds the apexUserID to the pull request comments list params
func (o *PullRequestCommentsListParams) WithApexUserID(apexUserID *float64) *PullRequestCommentsListParams {
	o.SetApexUserID(apexUserID)
	return o
}

// SetApexUserID adds the apexUserId to the pull request comments list params
func (o *PullRequestCommentsListParams) SetApexUserID(apexUserID *float64) {
	o.ApexUserID = apexUserID
}

// WithApexUserIDIn adds the apexUserIDIn to the pull request comments list params
func (o *PullRequestCommentsListParams) WithApexUserIDIn(apexUserIDIn *string) *PullRequestCommentsListParams {
	o.SetApexUserIDIn(apexUserIDIn)
	return o
}

// SetApexUserIDIn adds the apexUserIdIn to the pull request comments list params
func (o *PullRequestCommentsListParams) SetApexUserIDIn(apexUserIDIn *string) {
	o.ApexUserIDIn = apexUserIDIn
}

// WithCreatedAt adds the createdAt to the pull request comments list params
func (o *PullRequestCommentsListParams) WithCreatedAt(createdAt *string) *PullRequestCommentsListParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the pull request comments list params
func (o *PullRequestCommentsListParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithCreatedAtGt adds the createdAtGt to the pull request comments list params
func (o *PullRequestCommentsListParams) WithCreatedAtGt(createdAtGt *string) *PullRequestCommentsListParams {
	o.SetCreatedAtGt(createdAtGt)
	return o
}

// SetCreatedAtGt adds the createdAtGt to the pull request comments list params
func (o *PullRequestCommentsListParams) SetCreatedAtGt(createdAtGt *string) {
	o.CreatedAtGt = createdAtGt
}

// WithCreatedAtGte adds the createdAtGte to the pull request comments list params
func (o *PullRequestCommentsListParams) WithCreatedAtGte(createdAtGte *string) *PullRequestCommentsListParams {
	o.SetCreatedAtGte(createdAtGte)
	return o
}

// SetCreatedAtGte adds the createdAtGte to the pull request comments list params
func (o *PullRequestCommentsListParams) SetCreatedAtGte(createdAtGte *string) {
	o.CreatedAtGte = createdAtGte
}

// WithCreatedAtLt adds the createdAtLt to the pull request comments list params
func (o *PullRequestCommentsListParams) WithCreatedAtLt(createdAtLt *string) *PullRequestCommentsListParams {
	o.SetCreatedAtLt(createdAtLt)
	return o
}

// SetCreatedAtLt adds the createdAtLt to the pull request comments list params
func (o *PullRequestCommentsListParams) SetCreatedAtLt(createdAtLt *string) {
	o.CreatedAtLt = createdAtLt
}

// WithCreatedAtLte adds the createdAtLte to the pull request comments list params
func (o *PullRequestCommentsListParams) WithCreatedAtLte(createdAtLte *string) *PullRequestCommentsListParams {
	o.SetCreatedAtLte(createdAtLte)
	return o
}

// SetCreatedAtLte adds the createdAtLte to the pull request comments list params
func (o *PullRequestCommentsListParams) SetCreatedAtLte(createdAtLte *string) {
	o.CreatedAtLte = createdAtLte
}

// WithFilters adds the filters to the pull request comments list params
func (o *PullRequestCommentsListParams) WithFilters(filters *string) *PullRequestCommentsListParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the pull request comments list params
func (o *PullRequestCommentsListParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithID adds the id to the pull request comments list params
func (o *PullRequestCommentsListParams) WithID(id *float64) *PullRequestCommentsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the pull request comments list params
func (o *PullRequestCommentsListParams) SetID(id *float64) {
	o.ID = id
}

// WithIDIn adds the iDIn to the pull request comments list params
func (o *PullRequestCommentsListParams) WithIDIn(iDIn *float64) *PullRequestCommentsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the pull request comments list params
func (o *PullRequestCommentsListParams) SetIDIn(iDIn *float64) {
	o.IDIn = iDIn
}

// WithLimit adds the limit to the pull request comments list params
func (o *PullRequestCommentsListParams) WithLimit(limit *int64) *PullRequestCommentsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the pull request comments list params
func (o *PullRequestCommentsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the pull request comments list params
func (o *PullRequestCommentsListParams) WithOffset(offset *int64) *PullRequestCommentsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the pull request comments list params
func (o *PullRequestCommentsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the pull request comments list params
func (o *PullRequestCommentsListParams) WithOrdering(ordering *string) *PullRequestCommentsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the pull request comments list params
func (o *PullRequestCommentsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithPullRequestID adds the pullRequestID to the pull request comments list params
func (o *PullRequestCommentsListParams) WithPullRequestID(pullRequestID *float64) *PullRequestCommentsListParams {
	o.SetPullRequestID(pullRequestID)
	return o
}

// SetPullRequestID adds the pullRequestId to the pull request comments list params
func (o *PullRequestCommentsListParams) SetPullRequestID(pullRequestID *float64) {
	o.PullRequestID = pullRequestID
}

// WithSearch adds the search to the pull request comments list params
func (o *PullRequestCommentsListParams) WithSearch(search *string) *PullRequestCommentsListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the pull request comments list params
func (o *PullRequestCommentsListParams) SetSearch(search *string) {
	o.Search = search
}

// WithUserAliasID adds the userAliasID to the pull request comments list params
func (o *PullRequestCommentsListParams) WithUserAliasID(userAliasID *string) *PullRequestCommentsListParams {
	o.SetUserAliasID(userAliasID)
	return o
}

// SetUserAliasID adds the userAliasId to the pull request comments list params
func (o *PullRequestCommentsListParams) SetUserAliasID(userAliasID *string) {
	o.UserAliasID = userAliasID
}

// WithUserAliasIDIn adds the userAliasIDIn to the pull request comments list params
func (o *PullRequestCommentsListParams) WithUserAliasIDIn(userAliasIDIn *string) *PullRequestCommentsListParams {
	o.SetUserAliasIDIn(userAliasIDIn)
	return o
}

// SetUserAliasIDIn adds the userAliasIdIn to the pull request comments list params
func (o *PullRequestCommentsListParams) SetUserAliasIDIn(userAliasIDIn *string) {
	o.UserAliasIDIn = userAliasIDIn
}

// WriteToRequest writes these params to a swagger request
func (o *PullRequestCommentsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApexUserID != nil {

		// query param apex_user_id
		var qrApexUserID float64
		if o.ApexUserID != nil {
			qrApexUserID = *o.ApexUserID
		}
		qApexUserID := swag.FormatFloat64(qrApexUserID)
		if qApexUserID != "" {
			if err := r.SetQueryParam("apex_user_id", qApexUserID); err != nil {
				return err
			}
		}

	}

	if o.ApexUserIDIn != nil {

		// query param apex_user_id__in
		var qrApexUserIDIn string
		if o.ApexUserIDIn != nil {
			qrApexUserIDIn = *o.ApexUserIDIn
		}
		qApexUserIDIn := qrApexUserIDIn
		if qApexUserIDIn != "" {
			if err := r.SetQueryParam("apex_user_id__in", qApexUserIDIn); err != nil {
				return err
			}
		}

	}

	if o.CreatedAt != nil {

		// query param created_at
		var qrCreatedAt string
		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {
			if err := r.SetQueryParam("created_at", qCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGt != nil {

		// query param created_at__gt
		var qrCreatedAtGt string
		if o.CreatedAtGt != nil {
			qrCreatedAtGt = *o.CreatedAtGt
		}
		qCreatedAtGt := qrCreatedAtGt
		if qCreatedAtGt != "" {
			if err := r.SetQueryParam("created_at__gt", qCreatedAtGt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtGte != nil {

		// query param created_at__gte
		var qrCreatedAtGte string
		if o.CreatedAtGte != nil {
			qrCreatedAtGte = *o.CreatedAtGte
		}
		qCreatedAtGte := qrCreatedAtGte
		if qCreatedAtGte != "" {
			if err := r.SetQueryParam("created_at__gte", qCreatedAtGte); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLt != nil {

		// query param created_at__lt
		var qrCreatedAtLt string
		if o.CreatedAtLt != nil {
			qrCreatedAtLt = *o.CreatedAtLt
		}
		qCreatedAtLt := qrCreatedAtLt
		if qCreatedAtLt != "" {
			if err := r.SetQueryParam("created_at__lt", qCreatedAtLt); err != nil {
				return err
			}
		}

	}

	if o.CreatedAtLte != nil {

		// query param created_at__lte
		var qrCreatedAtLte string
		if o.CreatedAtLte != nil {
			qrCreatedAtLte = *o.CreatedAtLte
		}
		qCreatedAtLte := qrCreatedAtLte
		if qCreatedAtLte != "" {
			if err := r.SetQueryParam("created_at__lte", qCreatedAtLte); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID float64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatFloat64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn float64
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := swag.FormatFloat64(qrIDIn)
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.PullRequestID != nil {

		// query param pull_request_id
		var qrPullRequestID float64
		if o.PullRequestID != nil {
			qrPullRequestID = *o.PullRequestID
		}
		qPullRequestID := swag.FormatFloat64(qrPullRequestID)
		if qPullRequestID != "" {
			if err := r.SetQueryParam("pull_request_id", qPullRequestID); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.UserAliasID != nil {

		// query param user_alias_id
		var qrUserAliasID string
		if o.UserAliasID != nil {
			qrUserAliasID = *o.UserAliasID
		}
		qUserAliasID := qrUserAliasID
		if qUserAliasID != "" {
			if err := r.SetQueryParam("user_alias_id", qUserAliasID); err != nil {
				return err
			}
		}

	}

	if o.UserAliasIDIn != nil {

		// query param user_alias_id__in
		var qrUserAliasIDIn string
		if o.UserAliasIDIn != nil {
			qrUserAliasIDIn = *o.UserAliasIDIn
		}
		qUserAliasIDIn := qrUserAliasIDIn
		if qUserAliasIDIn != "" {
			if err := r.SetQueryParam("user_alias_id__in", qUserAliasIDIn); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
